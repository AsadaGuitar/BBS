date:2022-07-31 21:35:48	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 21:35:49	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 21:50:08	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 21:50:08	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Apply Function exists
|   0: Filter s2
|     from s2: TableExpansion
|       table s3: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s3.id : String'
|           2: Path s3.first_name : String'
|           3: Path s3.last_name : String'
|           4: Path s3.email_address : String'
|           5: Path s3.password : String'
|           6: Path s3.is_close : Boolean'
|           7: Path s3.create_at : java.sql.Timestamp'
|           8: Path s3.modify_at : Option[java.sql.Timestamp']
|           9: Path s3.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s2.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false)

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Apply Function exists
|   0: Filter s4
|     from s4: TableExpansion
|       table s5: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.id : String'
|           2: Path s5.first_name : String'
|           3: Path s5.last_name : String'
|           4: Path s5.email_address : String'
|           5: Path s5.password : String'
|           6: Path s5.is_close : Boolean'
|           7: Path s5.create_at : java.sql.Timestamp'
|           8: Path s5.modify_at : Option[java.sql.Timestamp']
|           9: Path s5.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s4.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false)

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s7 for Filter s4
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s8 for Pure t9
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>>]
|             value: Ref s7 : @t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             value: StructNode : {password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}
|               password: Path s7.password : String'
|               email_address: Path s7.email_address : String'
|               is_close: Path s7.is_close : Boolean'
|               last_name: Path s7.last_name : String'
|               first_name: Path s7.first_name : String'
|               modify_at: Path s7.modify_at : Option[java.sql.Timestamp']
|               close_at: Path s7.close_at : Option[java.sql.Timestamp']
|               id: Path s7.id : String'
|               create_at: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode : ()

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(), UnassignedType)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t9
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@627db719
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols t10
| Path s4.id : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t11
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols t10
| Path s7.password : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols t10
| Path s7.email_address : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols t10
| Path s7.is_close : Boolean'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols t10
| Path s7.last_name : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols t10
| Path s7.first_name : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols t10
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols t10
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols t10
| Path s7.id : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols t10
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   password: Path s7.password
|   email_address: Path s7.email_address
|   is_close: Path s7.is_close
|   last_name: Path s7.last_name
|   first_name: Path s7.first_name
|   modify_at: Path s7.modify_at
|   close_at: Path s7.close_at
|   id: Path s7.id
|   create_at: Path s7.create_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path password
| Path s7.password

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.password
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path email_address
| Path s7.email_address

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.email_address
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path is_close
| Path s7.is_close

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path last_name
| Path s7.last_name

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.last_name
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path first_name
| Path s7.first_name

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.first_name
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path modify_at
| Path s7.modify_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.modify_at
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path close_at
| Path s7.close_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s7.close_at
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s7.id

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s7.id
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path create_at
| Path s7.create_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Path s7.create_at
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t11: (HashMap(List(modify_at) -> s17, List(is_close) -> s14, List(last_name) -> s15, List(password) -> s12, List(email_address) -> s13, List(create_at) -> s20, List(close_at) -> s18, List(id) -> s19, List(first_name) -> s16), UnassignedType)
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7c800379
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.password
|     s13: Path s7.email_address
|     s14: Path s7.is_close
|     s15: Path s7.last_name
|     s16: Path s7.first_name
|     s17: Path s7.modify_at
|     s18: Path s7.close_at
|     s19: Path s7.id
|     s20: Path s7.create_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s7: Filter s4
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function =
|         0: Path s4.id
|         1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|     select: Pure t11
|       value: StructNode
|         s12: Path s7.password
|         s13: Path s7.email_address
|         s14: Path s7.is_close
|         s15: Path s7.last_name
|         s16: Path s7.first_name
|         s17: Path s7.modify_at
|         s18: Path s7.close_at
|         s19: Path s7.id
|         s20: Path s7.create_at

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s21 -> Apply Function exists
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t9: (Map(List() -> s21), UnassignedType)
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1d746975
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t9
|   value: StructNode
|     s21: Apply Function exists
|       0: Bind
|         from s7: Filter s4
|           from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           where: Apply Function =
|             0: Path s4.id
|             1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|         select: Pure t11
|           value: StructNode
|             s12: Path s7.password
|             s13: Path s7.email_address
|             s14: Path s7.is_close
|             s15: Path s7.last_name
|             s16: Path s7.first_name
|             s17: Path s7.modify_at
|             s18: Path s7.close_at
|             s19: Path s7.id
|             s20: Path s7.create_at

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1fd4dce7
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t10 : Vector[t10<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@109e757b
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlining Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t10 : Vector[t10<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6cf927da
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlined Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t22 : Vector[t22<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@52f8c4f1
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t22, t9, t11; Field refs: (@t6,id), (@t6,close_at), (@t6,modify_at), (@t6,password), (@t6,email_address), (@t6,last_name), (@t6,create_at), (@t6,is_close), (@t6,first_name)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t9<Boolean>
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t9<{s21: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t9 : Vector[t9<{s21: Boolean}>]
|         value: StructNode : {s21: Boolean}
|           s21: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s7.close_at : Option[java.sql.Timestamp']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Timestamp'
|     map: Path s23.s21 : Boolean

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6bf209ad
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Apply Function exists,s24))
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@8248c05
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s23: Bind : Vector[t25<{s24: Boolean}>]
|     from s8: ...
|     select: Pure t25 : Vector[t25<{s24: Boolean}>]
|       value: StructNode : {s24: Boolean}
|         s24: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'
|   map: Path s23.s24 : Boolean

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t25<{s24: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s7.close_at : Option[java.sql.Timestamp']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Timestamp'
|     map: Path s23.s24 : Boolean

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2dc6bd2c
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from Pure:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray()
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@390d2b29
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@42c9f2c4
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t27<{}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t27 : Vector[t27<{}>]
|     value: StructNode : {}

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map()
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s24: Boolean}>]
|   from s8: ...
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6ea11a3c
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t25,s24) -> s24)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t25,s24),List(s24)))
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,password),List(password)), ((@t6,email_address),List(email_address)), ((@t6,is_close),List(is_close)), ((@t6,last_name),List(last_name)), ((@t6,first_name),List(first_name)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,create_at),List(create_at)))
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7696e519
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2692dc81
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s28, None, None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Timestamp']
|       s37: Path s28.close_at : Option[java.sql.Timestamp']
|       s38: Path s28.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,id) -> s30, (@t6,close_at) -> s37, (@t6,modify_at) -> s36, (@t6,password) -> s31, (@t6,email_address) -> s32, (@t6,last_name) -> s34, (@t6,create_at) -> s38, (@t6,is_close) -> s33, (@t6,first_name) -> s35)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2bc05545
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Timestamp']
|       s37: Path s28.close_at : Option[java.sql.Timestamp']
|       s38: Path s28.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|       s12: Path s7.password : String'
|       s13: Path s7.email_address : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.last_name : String'
|       s16: Path s7.first_name : String'
|       s17: Path s7.modify_at : Option[java.sql.Timestamp']
|       s18: Path s7.close_at : Option[java.sql.Timestamp']
|       s19: Path s7.id : String'
|       s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|       s12: Path s28.password : String'
|       s13: Path s28.email_address : String'
|       s14: Path s28.is_close : Boolean'
|       s15: Path s28.last_name : String'
|       s16: Path s28.first_name : String'
|       s17: Path s28.modify_at : Option[java.sql.Timestamp']
|       s18: Path s28.close_at : Option[java.sql.Timestamp']
|       s19: Path s28.id : String'
|       s20: Path s28.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t11,s17) -> s17, (t11,s12) -> s12, (t11,s13) -> s13, (t11,s19) -> s19, (t11,s14) -> s14, (t11,s18) -> s18, (t11,s15) -> s15, (t11,s20) -> s20, (t11,s16) -> s16)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t11,s17),List(s17)), ((t11,s12),List(s12)), ((t11,s13),List(s13)), ((t11,s19),List(s19)), ((t11,s14),List(s14)), ((t11,s18),List(s18)), ((t11,s15),List(s15)), ((t11,s20),List(s20)), ((t11,s16),List(s16)))
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4dd6dafb
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|       from s26: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s28.password : String'
|                   s13: Path s28.email_address : String'
|                   s14: Path s28.is_close : Boolean'
|                   s15: Path s28.last_name : String'
|                   s16: Path s28.first_name : String'
|                   s17: Path s28.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s28.close_at : Option[java.sql.Timestamp']
|                   s19: Path s28.id : String'
|                   s20: Path s28.create_at : java.sql.Timestamp'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|     map: Path s23.s24 : Boolean

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s24 -> 0
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@ca94075
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|     from s26: Pure t22 : Vector[t22<()>]
|       value: ProductNode : ()
|     select: Pure t25 : Vector[t25<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|             from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|               value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|                 1: Path s28.password : String'
|                 2: Path s28.email_address : String'
|                 3: Path s28.is_close : Boolean'
|                 4: Path s28.last_name : String'
|                 5: Path s28.first_name : String'
|                 6: Path s28.modify_at : Option[java.sql.Timestamp']
|                 7: Path s28.close_at : Option[java.sql.Timestamp']
|                 8: Path s28.id : String'
|                 9: Path s28.create_at : java.sql.Timestamp'
|             where: Apply Function = : Boolean
|               0: Path s28.id : String'
|               1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   map: Path s23.s24 : Boolean

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|       from s26: Pure t22 : Vector[t22<()>]
|         value: ProductNode : ()
|       select: Pure t25 : Vector[t25<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|                 value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|                   1: Path s28.password : String'
|                   2: Path s28.email_address : String'
|                   3: Path s28.is_close : Boolean'
|                   4: Path s28.last_name : String'
|                   5: Path s28.first_name : String'
|                   6: Path s28.modify_at : Option[java.sql.Timestamp']
|                   7: Path s28.close_at : Option[java.sql.Timestamp']
|                   8: Path s28.id : String'
|                   9: Path s28.create_at : java.sql.Timestamp'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|     map: Path s23._1 : Boolean

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3c6ff3b5
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|   from s26: Pure t22 : Vector[t22<()>]
|     value: ProductNode : ()
|   select: Pure t25 : Vector[t25<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|           from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|             value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|               1: Path s28.password : String'
|               2: Path s28.email_address : String'
|               3: Path s28.is_close : Boolean'
|               4: Path s28.last_name : String'
|               5: Path s28.first_name : String'
|               6: Path s28.modify_at : Option[java.sql.Timestamp']
|               7: Path s28.close_at : Option[java.sql.Timestamp']
|               8: Path s28.id : String'
|               9: Path s28.create_at : java.sql.Timestamp'
|           where: Apply Function = : Boolean
|             0: Path s28.id : String'
|             1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@152ce300
date:2022-07-31 21:50:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BWI6wH8Ne6')" : Vector[t25<(Boolean)>]

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BWI6wH8Ne6')" : Vector[t25<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   25.516500 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    2.665666 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:   67.232250 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   37.770875 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:   15.040375 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.726417 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.345875 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:   10.494709 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   74.612333 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   26.780750 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.958292 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    2.223417 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.380541 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.665708 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    4.133292 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    5.430000 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   26.590083 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    2.504583 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   98.802958 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.625000 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.199500 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   14.842500 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   42.147000 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  462.688624 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BWI6wH8Ne6')]
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BWI6wH8Ne6')
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@609879917 wrapping select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BWI6wH8Ne6')
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@609879917 wrapping select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BWI6wH8Ne6')
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------\
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1      |
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | exists |
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------|
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | false  |
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------/
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.first_name : String'
|       3: Path s6.last_name : String'
|       4: Path s6.email_address : String'
|       5: Path s6.password : String'
|       6: Path s6.is_close : Boolean'
|       7: Path s6.create_at : java.sql.Timestamp'
|       8: Path s6.modify_at : Option[java.sql.Timestamp']
|       9: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|         0: Path s5._2 : String'
|       3: InsertColumn last_name : String'
|         0: Path s5._3 : String'
|       4: InsertColumn email_address : String'
|         0: Path s5._4 : String'
|       5: InsertColumn password : String'
|         0: Path s5._5 : String'
|       6: InsertColumn is_close : Boolean'
|         0: Path s5._6 : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._7 : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._8 : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._9 : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.first_name : String'
|     3: Path s6.last_name : String'
|     4: Path s6.email_address : String'
|     5: Path s6.password : String'
|     6: Path s6.is_close : Boolean'
|     7: Path s6.create_at : java.sql.Timestamp'
|     8: Path s6.modify_at : Option[java.sql.Timestamp']
|     9: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=19, name=id : String'
|     2: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=first_name : String'
|     3: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=last_name : String'
|     4: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=13, name=email_address : String'
|     5: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=password : String'
|     6: CompoundResultConverter
|       *: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|       -: BaseResultConverter$mcZ$sp idx=15, name=is_close : Boolean'
|     7: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=16, name=create_at : java.sql.Timestamp'
|     8: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=17 : java.sql.Timestamp'
|     9: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=18 : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=19, name=id : String'
|         2: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=first_name : String'
|         3: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=last_name : String'
|         4: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=13, name=email_address : String'
|         5: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=password : String'
|         6: CompoundResultConverter
|           *: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|           -: BaseResultConverter$mcZ$sp idx=15, name=is_close : Boolean'
|         7: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=16, name=create_at : java.sql.Timestamp'
|         8: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=17 : java.sql.Timestamp'
|         9: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=18 : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    4.221500 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    1.395333 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:   10.526083 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   20.844500 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   36.987416 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String')]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String')
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String')
|       1: Path s6.id : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|       3: InsertColumn last_name : String'
|       4: InsertColumn email_address : String'
|       5: InsertColumn password : String'
|       6: InsertColumn is_close : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String')
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String')
|     1: Path s6.id : String'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|     2: CompoundResultConverter
|     3: CompoundResultConverter
|     4: CompoundResultConverter
|     5: CompoundResultConverter
|     6: CompoundResultConverter
|     7: CompoundResultConverter
|     8: CompoundResultConverter
|     9: CompoundResultConverter

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select 1 from "users" where "id"=?" : (String')

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String')]
|   from s5: CompiledStatement "select 1 from "users" where "id"=?" : (String')
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|         2: CompoundResultConverter
|         3: CompoundResultConverter
|         4: CompoundResultConverter
|         5: CompoundResultConverter
|         6: CompoundResultConverter
|         7: CompoundResultConverter
|         8: CompoundResultConverter
|         9: CompoundResultConverter

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.829250 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.189000 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    1.204708 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.227708 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    8.450666 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.first_name : String'
|       3: Path s6.last_name : String'
|       4: Path s6.email_address : String'
|       5: Path s6.password : String'
|       6: Path s6.is_close : Boolean'
|       7: Path s6.create_at : java.sql.Timestamp'
|       8: Path s6.modify_at : Option[java.sql.Timestamp']
|       9: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|         0: Path s5._2 : String'
|       3: InsertColumn last_name : String'
|         0: Path s5._3 : String'
|       4: InsertColumn email_address : String'
|         0: Path s5._4 : String'
|       5: InsertColumn password : String'
|         0: Path s5._5 : String'
|       6: InsertColumn is_close : Boolean'
|         0: Path s5._6 : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._7 : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._8 : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._9 : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.first_name : String'
|     3: Path s6.last_name : String'
|     4: Path s6.email_address : String'
|     5: Path s6.password : String'
|     6: Path s6.is_close : Boolean'
|     7: Path s6.create_at : java.sql.Timestamp'
|     8: Path s6.modify_at : Option[java.sql.Timestamp']
|     9: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|     6: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|         6: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'

date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.092917 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.144333 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.502625 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    2.774208 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    6.514083 ms
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: InsertOrUpdateAction [update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)]
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared update: HikariProxyPreparedStatement@1952181359 wrapping update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared update: HikariProxyPreparedStatement@1952181359 wrapping update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: /--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------\
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | 1      | 2      | 3                | 4        | 5       | 6                       | 7         | 8         | 9          | 10         | 11     | 12     | 13               | 14       | 15      | 16                      | 17        | 18        | 19         |
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | String | String | String           | String   | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String     | String     | String | String | String           | String   | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String     |
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: |--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------|
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | asada  | guitar | info@example.com | password | false   | 2022-07-31 21:50:08.862 | NULL      | NULL      | BWI6wH8Ne6 | BWI6wH8Ne6 | asada  | guitar | info@example.com | password | false   | 2022-07-31 21:50:08.862 | NULL      | NULL      | BWI6wH8Ne6 |
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: \--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------/
date:2022-07-31 21:50:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared update took 8ms
date:2022-07-31 21:50:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.first_name : String'
|         3: Path s3.last_name : String'
|         4: Path s3.email_address : String'
|         5: Path s3.password : String'
|         6: Path s3.is_close : Boolean'
|         7: Path s3.create_at : java.sql.Timestamp'
|         8: Path s3.modify_at : Option[java.sql.Timestamp']
|         9: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s2.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false)

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.first_name : String'
|         3: Path s5.last_name : String'
|         4: Path s5.email_address : String'
|         5: Path s5.password : String'
|         6: Path s5.is_close : Boolean'
|         7: Path s5.create_at : java.sql.Timestamp'
|         8: Path s5.modify_at : Option[java.sql.Timestamp']
|         9: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s4.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false)

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols 
| Path s4.id : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols 
| Path s7.first_name : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols 
| Path s7.last_name : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols 
| Path s7.email_address : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols 
| Path s7.password : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.first_name
|   3: Path s7.last_name
|   4: Path s7.email_address
|   5: Path s7.password
|   6: Path s7.is_close
|   7: Path s7.create_at
|   8: Path s7.modify_at
|   9: Path s7.close_at

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.first_name

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.first_name
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.last_name

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.last_name
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.email_address

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.email_address
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.password

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.password
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.is_close

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.create_at

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.create_at
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _8
| Path s7.modify_at

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.modify_at
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _9
| Path s7.close_at

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.close_at
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_9) -> s17, List(_7) -> s15, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11, List(_8) -> s16, List(_6) -> s14), UnassignedType)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.first_name
|     s11: Path s7.last_name
|     s12: Path s7.email_address
|     s13: Path s7.password
|     s14: Path s7.is_close
|     s15: Path s7.create_at
|     s16: Path s7.modify_at
|     s17: Path s7.close_at

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.first_name : String'
|       s11: Path s7.last_name : String'
|       s12: Path s7.email_address : String'
|       s13: Path s7.password : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.create_at : java.sql.Timestamp'
|       s16: Path s7.modify_at : Option[java.sql.Timestamp']
|       s17: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,email_address), (@t6,create_at), (@t6,modify_at), (@t6,last_name), (@t6,close_at), (@t6,is_close), (@t6,password), (@t6,first_name), (@t6,id)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.first_name : String'
|         s11: Path s7.last_name : String'
|         s12: Path s7.email_address : String'
|         s13: Path s7.password : String'
|         s14: Path s7.is_close : Boolean'
|         s15: Path s7.create_at : java.sql.Timestamp'
|         s16: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s9 : String'
|       2: Path s18.s10 : String'
|       3: Path s18.s11 : String'
|       4: Path s18.s12 : String'
|       5: Path s18.s13 : String'
|       6: Path s18.s14 : Boolean'
|       7: Path s18.s15 : java.sql.Timestamp'
|       8: Path s18.s16 : Option[java.sql.Timestamp']
|       9: Path s18.s17 : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s19), 5 -> (Path s7.is_close,s20), 1 -> (Path s7.first_name,s21), 6 -> (Path s7.create_at,s22), 2 -> (Path s7.last_name,s23), 7 -> (Path s7.modify_at,s24), 3 -> (Path s7.email_address,s25), 8 -> (Path s7.close_at,s26), 4 -> (Path s7.password,s27))
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|     from s7: ...
|     select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|       value: StructNode : {s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s23: Path s7.last_name : String'
|         s19: Path s7.id : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s21: Path s7.first_name : String'
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s27: Path s7.password : String'
|         s25: Path s7.email_address : String'
|         s20: Path s7.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|     select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|       value: StructNode : {s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s23: Path s7.last_name : String'
|         s19: Path s7.id : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s21: Path s7.first_name : String'
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s27: Path s7.password : String'
|         s25: Path s7.email_address : String'
|         s20: Path s7.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,close_at),List(close_at)), ((@t6,last_name),List(last_name)), ((@t6,modify_at),List(modify_at)), ((@t6,first_name),List(first_name)), ((@t6,create_at),List(create_at)), ((@t6,password),List(password)), ((@t6,email_address),List(email_address)), ((@t6,is_close),List(is_close)))
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: Option[java.sql.Timestamp'], s33: String', s34: Option[java.sql.Timestamp'], s35: String', s36: java.sql.Timestamp', s37: String', s38: String', s39: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: Option[java.sql.Timestamp'], s33: String', s34: Option[java.sql.Timestamp'], s35: String', s36: java.sql.Timestamp', s37: String', s38: String', s39: Boolean'}>]
|     value: StructNode : {s31: String', s32: Option[java.sql.Timestamp'], s33: String', s34: Option[java.sql.Timestamp'], s35: String', s36: java.sql.Timestamp', s37: String', s38: String', s39: Boolean'}
|       s31: Path s29.id : String'
|       s32: Path s29.close_at : Option[java.sql.Timestamp']
|       s33: Path s29.last_name : String'
|       s34: Path s29.modify_at : Option[java.sql.Timestamp']
|       s35: Path s29.first_name : String'
|       s36: Path s29.create_at : java.sql.Timestamp'
|       s37: Path s29.password : String'
|       s38: Path s29.email_address : String'
|       s39: Path s29.is_close : Boolean'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,email_address) -> s38, (@t6,create_at) -> s36, (@t6,modify_at) -> s34, (@t6,last_name) -> s33, (@t6,close_at) -> s32, (@t6,is_close) -> s39, (@t6,password) -> s37, (@t6,first_name) -> s35, (@t6,id) -> s31)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: Option[java.sql.Timestamp'], s33: String', s34: Option[java.sql.Timestamp'], s35: String', s36: java.sql.Timestamp', s37: String', s38: String', s39: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: Option[java.sql.Timestamp'], s33: String', s34: Option[java.sql.Timestamp'], s35: String', s36: java.sql.Timestamp', s37: String', s38: String', s39: Boolean'}>]
|     value: StructNode : {s31: String', s32: Option[java.sql.Timestamp'], s33: String', s34: Option[java.sql.Timestamp'], s35: String', s36: java.sql.Timestamp', s37: String', s38: String', s39: Boolean'}
|       s31: Path s29.id : String'
|       s32: Path s29.close_at : Option[java.sql.Timestamp']
|       s33: Path s29.last_name : String'
|       s34: Path s29.modify_at : Option[java.sql.Timestamp']
|       s35: Path s29.first_name : String'
|       s36: Path s29.create_at : java.sql.Timestamp'
|       s37: Path s29.password : String'
|       s38: Path s29.email_address : String'
|       s39: Path s29.is_close : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|   from s7: ...
|   select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|     value: StructNode : {s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}
|       s26: Path s7.close_at : Option[java.sql.Timestamp']
|       s23: Path s7.last_name : String'
|       s19: Path s7.id : String'
|       s24: Path s7.modify_at : Option[java.sql.Timestamp']
|       s21: Path s7.first_name : String'
|       s22: Path s7.create_at : java.sql.Timestamp'
|       s27: Path s7.password : String'
|       s25: Path s7.email_address : String'
|       s20: Path s7.is_close : Boolean'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|     value: StructNode : {s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}
|       s26: Path s29.close_at : Option[java.sql.Timestamp']
|       s23: Path s29.last_name : String'
|       s19: Path s29.id : String'
|       s24: Path s29.modify_at : Option[java.sql.Timestamp']
|       s21: Path s29.first_name : String'
|       s22: Path s29.create_at : java.sql.Timestamp'
|       s27: Path s29.password : String'
|       s25: Path s29.email_address : String'
|       s20: Path s29.is_close : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t28,s20) -> s20, (t28,s19) -> s19, (t28,s23) -> s23, (t28,s26) -> s26, (t28,s24) -> s24, (t28,s25) -> s25, (t28,s22) -> s22, (t28,s27) -> s27, (t28,s21) -> s21)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t28,s20),List(s20)), ((t28,s19),List(s19)), ((t28,s23),List(s23)), ((t28,s26),List(s26)), ((t28,s24),List(s24)), ((t28,s25),List(s25)), ((t28,s22),List(s22)), ((t28,s27),List(s27)), ((t28,s21),List(s21)))
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}>]
|       value: StructNode : {s26: Option[java.sql.Timestamp'], s23: String', s19: String', s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s27: String', s25: String', s20: Boolean'}
|         s26: Path s29.close_at : Option[java.sql.Timestamp']
|         s23: Path s29.last_name : String'
|         s19: Path s29.id : String'
|         s24: Path s29.modify_at : Option[java.sql.Timestamp']
|         s21: Path s29.first_name : String'
|         s22: Path s29.create_at : java.sql.Timestamp'
|         s27: Path s29.password : String'
|         s25: Path s29.email_address : String'
|         s20: Path s29.is_close : Boolean'
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s26 -> 8, s23 -> 2, s19 -> 0, s24 -> 7, s21 -> 1, s22 -> 6, s27 -> 4, s25 -> 3, s20 -> 5
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18._1 : String'
|       2: Path s18._2 : String'
|       3: Path s18._3 : String'
|       4: Path s18._4 : String'
|       5: Path s18._5 : String'
|       6: Path s18._6 : Boolean'
|       7: Path s18._7 : java.sql.Timestamp'
|       8: Path s18._8 : Option[java.sql.Timestamp']
|       9: Path s18._9 : Option[java.sql.Timestamp']

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s29.id : String'
|       2: Path s29.first_name : String'
|       3: Path s29.last_name : String'
|       4: Path s29.email_address : String'
|       5: Path s29.password : String'
|       6: Path s29.is_close : Boolean'
|       7: Path s29.create_at : java.sql.Timestamp'
|       8: Path s29.modify_at : Option[java.sql.Timestamp']
|       9: Path s29.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode BWI6wH8Ne6 (volatileHint=false) : String'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|     6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'BWI6wH8Ne6'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'BWI6wH8Ne6'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|         6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.734625 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.096083 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    1.468208 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   12.146750 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    2.362292 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    3.721334 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.052833 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    2.731334 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   12.118000 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    0.164792 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.089959 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.058709 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.336000 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.076459 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    0.904750 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    3.339958 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    6.101541 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.909583 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:    8.836958 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.219625 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.030250 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    7.725209 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.867667 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   71.092919 ms
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: StreamingInvokerAction$HeadOptionAction [select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'BWI6wH8Ne6']
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'BWI6wH8Ne6'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@722006746 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'BWI6wH8Ne6'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@722006746 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'BWI6wH8Ne6'
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 724µs
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------\
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1          | 2          | 3         | 4                | 5        | 6        | 7                    | 8         | 9        |
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id         | first_name | last_name | email_address    | password | is_close | create_at            | modify_at | close_at |
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------|
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | BWI6wH8Ne6 | asada      | guitar    | info@example.com | password | false    | 2022-07-31 21:50:... | NULL      | NULL     |
date:2022-07-31 21:50:44	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------/
date:2022-07-31 21:51:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:51:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:52:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:52:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:53:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:53:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:54:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:54:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:55:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:55:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:56:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:56:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:57:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:57:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:58:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:58:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:59:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 21:59:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:00:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:00:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:00:43	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 22:00:48	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 22:00:48	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 22:02:40	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 22:02:40	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Apply Function exists
|   0: Filter s2
|     from s2: TableExpansion
|       table s3: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s3.id : String'
|           2: Path s3.first_name : String'
|           3: Path s3.last_name : String'
|           4: Path s3.email_address : String'
|           5: Path s3.password : String'
|           6: Path s3.is_close : Boolean'
|           7: Path s3.create_at : java.sql.Timestamp'
|           8: Path s3.modify_at : Option[java.sql.Timestamp']
|           9: Path s3.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s2.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Apply Function exists
|   0: Filter s4
|     from s4: TableExpansion
|       table s5: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.id : String'
|           2: Path s5.first_name : String'
|           3: Path s5.last_name : String'
|           4: Path s5.email_address : String'
|           5: Path s5.password : String'
|           6: Path s5.is_close : Boolean'
|           7: Path s5.create_at : java.sql.Timestamp'
|           8: Path s5.modify_at : Option[java.sql.Timestamp']
|           9: Path s5.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s7 for Filter s4
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s8 for Pure t9
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>>]
|             value: Ref s7 : @t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@65463260
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             value: StructNode : {password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}
|               password: Path s7.password : String'
|               email_address: Path s7.email_address : String'
|               is_close: Path s7.is_close : Boolean'
|               last_name: Path s7.last_name : String'
|               first_name: Path s7.first_name : String'
|               modify_at: Path s7.modify_at : Option[java.sql.Timestamp']
|               close_at: Path s7.close_at : Option[java.sql.Timestamp']
|               id: Path s7.id : String'
|               create_at: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode : ()

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@391e90b5
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(), UnassignedType)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t9
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols t10
| Path s4.id : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t11
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols t10
| Path s7.password : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols t10
| Path s7.email_address : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols t10
| Path s7.is_close : Boolean'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols t10
| Path s7.last_name : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols t10
| Path s7.first_name : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols t10
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols t10
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols t10
| Path s7.id : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols t10
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   password: Path s7.password
|   email_address: Path s7.email_address
|   is_close: Path s7.is_close
|   last_name: Path s7.last_name
|   first_name: Path s7.first_name
|   modify_at: Path s7.modify_at
|   close_at: Path s7.close_at
|   id: Path s7.id
|   create_at: Path s7.create_at

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path password
| Path s7.password

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3af12af1
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.password
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path email_address
| Path s7.email_address

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.email_address
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path is_close
| Path s7.is_close

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path last_name
| Path s7.last_name

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.last_name
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path first_name
| Path s7.first_name

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.first_name
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path modify_at
| Path s7.modify_at

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.modify_at
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path close_at
| Path s7.close_at

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s7.close_at
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s7.id

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s7.id
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path create_at
| Path s7.create_at

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Path s7.create_at
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t11: (HashMap(List(modify_at) -> s17, List(is_close) -> s14, List(last_name) -> s15, List(password) -> s12, List(email_address) -> s13, List(create_at) -> s20, List(close_at) -> s18, List(id) -> s19, List(first_name) -> s16), UnassignedType)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.password
|     s13: Path s7.email_address
|     s14: Path s7.is_close
|     s15: Path s7.last_name
|     s16: Path s7.first_name
|     s17: Path s7.modify_at
|     s18: Path s7.close_at
|     s19: Path s7.id
|     s20: Path s7.create_at

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@bf92d7e
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s7: Filter s4
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function =
|         0: Path s4.id
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t11
|       value: StructNode
|         s12: Path s7.password
|         s13: Path s7.email_address
|         s14: Path s7.is_close
|         s15: Path s7.last_name
|         s16: Path s7.first_name
|         s17: Path s7.modify_at
|         s18: Path s7.close_at
|         s19: Path s7.id
|         s20: Path s7.create_at

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s21 -> Apply Function exists
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t9: (Map(List() -> s21), UnassignedType)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t9
|   value: StructNode
|     s21: Apply Function exists
|       0: Bind
|         from s7: Filter s4
|           from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           where: Apply Function =
|             0: Path s4.id
|             1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|         select: Pure t11
|           value: StructNode
|             s12: Path s7.password
|             s13: Path s7.email_address
|             s14: Path s7.is_close
|             s15: Path s7.last_name
|             s16: Path s7.first_name
|             s17: Path s7.modify_at
|             s18: Path s7.close_at
|             s19: Path s7.id
|             s20: Path s7.create_at

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5f78cb53
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t10 : Vector[t10<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@122e6331
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlining Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t10 : Vector[t10<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@213b7527
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlined Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@636b3ea3
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t22 : Vector[t22<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t11, t9, t22; Field refs: (@t6,last_name), (@t6,create_at), (@t6,password), (@t6,email_address), (@t6,id), (@t6,is_close), (@t6,first_name), (@t6,close_at), (@t6,modify_at)
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7ad053ce
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t9<Boolean>
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1b06804e
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t9<{s21: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t9 : Vector[t9<{s21: Boolean}>]
|         value: StructNode : {s21: Boolean}
|           s21: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s7.close_at : Option[java.sql.Timestamp']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Timestamp'
|     map: Path s23.s21 : Boolean

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@616e4c44
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Apply Function exists,s24))
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5b4af8ec
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s23: Bind : Vector[t25<{s24: Boolean}>]
|     from s8: ...
|     select: Pure t25 : Vector[t25<{s24: Boolean}>]
|       value: StructNode : {s24: Boolean}
|         s24: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'
|   map: Path s23.s24 : Boolean

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t25<{s24: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s7.close_at : Option[java.sql.Timestamp']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Timestamp'
|     map: Path s23.s24 : Boolean

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@23fc8e68
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from Pure:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray()
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@c577ea9
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t27<{}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t27 : Vector[t27<{}>]
|     value: StructNode : {}

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map()
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s24: Boolean}>]
|   from s8: ...
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1f480f0b
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t25,s24) -> s24)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t25,s24),List(s24)))
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,password),List(password)), ((@t6,email_address),List(email_address)), ((@t6,is_close),List(is_close)), ((@t6,last_name),List(last_name)), ((@t6,first_name),List(first_name)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,create_at),List(create_at)))
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@13490996
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s28, None, None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Timestamp']
|       s37: Path s28.close_at : Option[java.sql.Timestamp']
|       s38: Path s28.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,last_name) -> s34, (@t6,create_at) -> s38, (@t6,password) -> s31, (@t6,email_address) -> s32, (@t6,id) -> s30, (@t6,is_close) -> s33, (@t6,first_name) -> s35, (@t6,close_at) -> s37, (@t6,modify_at) -> s36)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Timestamp']
|       s37: Path s28.close_at : Option[java.sql.Timestamp']
|       s38: Path s28.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@54014a59
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|       s12: Path s7.password : String'
|       s13: Path s7.email_address : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.last_name : String'
|       s16: Path s7.first_name : String'
|       s17: Path s7.modify_at : Option[java.sql.Timestamp']
|       s18: Path s7.close_at : Option[java.sql.Timestamp']
|       s19: Path s7.id : String'
|       s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|       s12: Path s28.password : String'
|       s13: Path s28.email_address : String'
|       s14: Path s28.is_close : Boolean'
|       s15: Path s28.last_name : String'
|       s16: Path s28.first_name : String'
|       s17: Path s28.modify_at : Option[java.sql.Timestamp']
|       s18: Path s28.close_at : Option[java.sql.Timestamp']
|       s19: Path s28.id : String'
|       s20: Path s28.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t11,s20) -> s20, (t11,s13) -> s13, (t11,s15) -> s15, (t11,s14) -> s14, (t11,s12) -> s12, (t11,s16) -> s16, (t11,s19) -> s19, (t11,s18) -> s18, (t11,s17) -> s17)
date:2022-07-31 22:02:40	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t11,s20),List(s20)), ((t11,s13),List(s13)), ((t11,s15),List(s15)), ((t11,s14),List(s14)), ((t11,s12),List(s12)), ((t11,s16),List(s16)), ((t11,s19),List(s19)), ((t11,s18),List(s18)), ((t11,s17),List(s17)))
date:2022-07-31 22:02:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6394c446
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|       from s26: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s28.password : String'
|                   s13: Path s28.email_address : String'
|                   s14: Path s28.is_close : Boolean'
|                   s15: Path s28.last_name : String'
|                   s16: Path s28.first_name : String'
|                   s17: Path s28.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s28.close_at : Option[java.sql.Timestamp']
|                   s19: Path s28.id : String'
|                   s20: Path s28.create_at : java.sql.Timestamp'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     map: Path s23.s24 : Boolean

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 22:02:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3c7bbf68
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s24 -> 0
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|     from s26: Pure t22 : Vector[t22<()>]
|       value: ProductNode : ()
|     select: Pure t25 : Vector[t25<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|             from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|               value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|                 1: Path s28.password : String'
|                 2: Path s28.email_address : String'
|                 3: Path s28.is_close : Boolean'
|                 4: Path s28.last_name : String'
|                 5: Path s28.first_name : String'
|                 6: Path s28.modify_at : Option[java.sql.Timestamp']
|                 7: Path s28.close_at : Option[java.sql.Timestamp']
|                 8: Path s28.id : String'
|                 9: Path s28.create_at : java.sql.Timestamp'
|             where: Apply Function = : Boolean
|               0: Path s28.id : String'
|               1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: Path s23.s24 : Boolean

date:2022-07-31 22:02:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@672504c8
date:2022-07-31 22:02:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|       from s26: Pure t22 : Vector[t22<()>]
|         value: ProductNode : ()
|       select: Pure t25 : Vector[t25<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|                 value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|                   1: Path s28.password : String'
|                   2: Path s28.email_address : String'
|                   3: Path s28.is_close : Boolean'
|                   4: Path s28.last_name : String'
|                   5: Path s28.first_name : String'
|                   6: Path s28.modify_at : Option[java.sql.Timestamp']
|                   7: Path s28.close_at : Option[java.sql.Timestamp']
|                   8: Path s28.id : String'
|                   9: Path s28.create_at : java.sql.Timestamp'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     map: Path s23._1 : Boolean

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|   from s26: Pure t22 : Vector[t22<()>]
|     value: ProductNode : ()
|   select: Pure t25 : Vector[t25<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|           from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|             value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|               1: Path s28.password : String'
|               2: Path s28.email_address : String'
|               3: Path s28.is_close : Boolean'
|               4: Path s28.last_name : String'
|               5: Path s28.first_name : String'
|               6: Path s28.modify_at : Option[java.sql.Timestamp']
|               7: Path s28.close_at : Option[java.sql.Timestamp']
|               8: Path s28.id : String'
|               9: Path s28.create_at : java.sql.Timestamp'
|           where: Apply Function = : Boolean
|             0: Path s28.id : String'
|             1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'ZA91VCAsrS')" : Vector[t25<(Boolean)>]

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'ZA91VCAsrS')" : Vector[t25<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   23.302917 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    2.179000 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:   12.218041 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   90.372208 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:   12.360916 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.890000 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.347875 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:   18.440542 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   59.141750 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   31.781833 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.601917 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    2.579625 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    1.111667 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.356125 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    5.471458 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:   23.475875 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   40.416750 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    3.481416 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   63.727209 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.633542 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.214833 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   14.786375 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   50.045041 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  461.936915 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'ZA91VCAsrS')]
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'ZA91VCAsrS')
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1374981237 wrapping select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'ZA91VCAsrS')
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1374981237 wrapping select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'ZA91VCAsrS')
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------\
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1      |
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | exists |
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------|
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | false  |
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------/
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.first_name : String'
|       3: Path s6.last_name : String'
|       4: Path s6.email_address : String'
|       5: Path s6.password : String'
|       6: Path s6.is_close : Boolean'
|       7: Path s6.create_at : java.sql.Timestamp'
|       8: Path s6.modify_at : Option[java.sql.Timestamp']
|       9: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|         0: Path s5._2 : String'
|       3: InsertColumn last_name : String'
|         0: Path s5._3 : String'
|       4: InsertColumn email_address : String'
|         0: Path s5._4 : String'
|       5: InsertColumn password : String'
|         0: Path s5._5 : String'
|       6: InsertColumn is_close : Boolean'
|         0: Path s5._6 : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._7 : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._8 : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._9 : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.first_name : String'
|     3: Path s6.last_name : String'
|     4: Path s6.email_address : String'
|     5: Path s6.password : String'
|     6: Path s6.is_close : Boolean'
|     7: Path s6.create_at : java.sql.Timestamp'
|     8: Path s6.modify_at : Option[java.sql.Timestamp']
|     9: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=19, name=id : String'
|     2: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=first_name : String'
|     3: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=last_name : String'
|     4: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=13, name=email_address : String'
|     5: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=password : String'
|     6: CompoundResultConverter
|       *: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|       -: BaseResultConverter$mcZ$sp idx=15, name=is_close : Boolean'
|     7: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=16, name=create_at : java.sql.Timestamp'
|     8: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=17 : java.sql.Timestamp'
|     9: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=18 : java.sql.Timestamp'

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=19, name=id : String'
|         2: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=first_name : String'
|         3: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=last_name : String'
|         4: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=13, name=email_address : String'
|         5: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=password : String'
|         6: CompoundResultConverter
|           *: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|           -: BaseResultConverter$mcZ$sp idx=15, name=is_close : Boolean'
|         7: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=16, name=create_at : java.sql.Timestamp'
|         8: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=17 : java.sql.Timestamp'
|         9: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=18 : java.sql.Timestamp'

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    5.796833 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.145875 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    7.032458 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   20.014709 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   32.989875 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String')]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String')
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String')
|       1: Path s6.id : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|       3: InsertColumn last_name : String'
|       4: InsertColumn email_address : String'
|       5: InsertColumn password : String'
|       6: InsertColumn is_close : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String')
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String')
|     1: Path s6.id : String'

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|     2: CompoundResultConverter
|     3: CompoundResultConverter
|     4: CompoundResultConverter
|     5: CompoundResultConverter
|     6: CompoundResultConverter
|     7: CompoundResultConverter
|     8: CompoundResultConverter
|     9: CompoundResultConverter

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select 1 from "users" where "id"=?" : (String')

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String')]
|   from s5: CompiledStatement "select 1 from "users" where "id"=?" : (String')
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|         2: CompoundResultConverter
|         3: CompoundResultConverter
|         4: CompoundResultConverter
|         5: CompoundResultConverter
|         6: CompoundResultConverter
|         7: CompoundResultConverter
|         8: CompoundResultConverter
|         9: CompoundResultConverter

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.095958 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.492458 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    1.745250 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.719667 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    9.053333 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.first_name : String'
|       3: Path s6.last_name : String'
|       4: Path s6.email_address : String'
|       5: Path s6.password : String'
|       6: Path s6.is_close : Boolean'
|       7: Path s6.create_at : java.sql.Timestamp'
|       8: Path s6.modify_at : Option[java.sql.Timestamp']
|       9: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|         0: Path s5._2 : String'
|       3: InsertColumn last_name : String'
|         0: Path s5._3 : String'
|       4: InsertColumn email_address : String'
|         0: Path s5._4 : String'
|       5: InsertColumn password : String'
|         0: Path s5._5 : String'
|       6: InsertColumn is_close : Boolean'
|         0: Path s5._6 : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._7 : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._8 : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._9 : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.first_name : String'
|     3: Path s6.last_name : String'
|     4: Path s6.email_address : String'
|     5: Path s6.password : String'
|     6: Path s6.is_close : Boolean'
|     7: Path s6.create_at : java.sql.Timestamp'
|     8: Path s6.modify_at : Option[java.sql.Timestamp']
|     9: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|     6: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|         6: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'

date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    0.672000 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.118375 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.763334 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    8.567000 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   12.120709 ms
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: InsertOrUpdateAction [update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)]
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared update: HikariProxyPreparedStatement@695487780 wrapping update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared update: HikariProxyPreparedStatement@695487780 wrapping update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: /--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------\
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | 1      | 2      | 3                | 4        | 5       | 6                       | 7         | 8         | 9          | 10         | 11     | 12     | 13               | 14       | 15      | 16                      | 17        | 18        | 19         |
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | String | String | String           | String   | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String     | String     | String | String | String           | String   | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String     |
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: |--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------|
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | asada  | guitar | info@example.com | password | false   | 2022-07-31 22:02:41.172 | NULL      | NULL      | ZA91VCAsrS | ZA91VCAsrS | asada  | guitar | info@example.com | password | false   | 2022-07-31 22:02:41.172 | NULL      | NULL      | ZA91VCAsrS |
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: \--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------/
date:2022-07-31 22:02:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared update took 4ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.first_name : String'
|         3: Path s3.last_name : String'
|         4: Path s3.email_address : String'
|         5: Path s3.password : String'
|         6: Path s3.is_close : Boolean'
|         7: Path s3.create_at : java.sql.Timestamp'
|         8: Path s3.modify_at : Option[java.sql.Timestamp']
|         9: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s2.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.first_name : String'
|         3: Path s5.last_name : String'
|         4: Path s5.email_address : String'
|         5: Path s5.password : String'
|         6: Path s5.is_close : Boolean'
|         7: Path s5.create_at : java.sql.Timestamp'
|         8: Path s5.modify_at : Option[java.sql.Timestamp']
|         9: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols 
| Path s4.id : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols 
| Path s7.first_name : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols 
| Path s7.last_name : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols 
| Path s7.email_address : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols 
| Path s7.password : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.first_name
|   3: Path s7.last_name
|   4: Path s7.email_address
|   5: Path s7.password
|   6: Path s7.is_close
|   7: Path s7.create_at
|   8: Path s7.modify_at
|   9: Path s7.close_at

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.first_name

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.first_name
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.last_name

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.last_name
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.email_address

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.email_address
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.password

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.password
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.is_close

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.create_at

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.create_at
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _8
| Path s7.modify_at

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.modify_at
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _9
| Path s7.close_at

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.close_at
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_9) -> s17, List(_7) -> s15, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11, List(_8) -> s16, List(_6) -> s14), UnassignedType)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.first_name
|     s11: Path s7.last_name
|     s12: Path s7.email_address
|     s13: Path s7.password
|     s14: Path s7.is_close
|     s15: Path s7.create_at
|     s16: Path s7.modify_at
|     s17: Path s7.close_at

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.first_name : String'
|       s11: Path s7.last_name : String'
|       s12: Path s7.email_address : String'
|       s13: Path s7.password : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.create_at : java.sql.Timestamp'
|       s16: Path s7.modify_at : Option[java.sql.Timestamp']
|       s17: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,last_name), (@t6,create_at), (@t6,first_name), (@t6,email_address), (@t6,is_close), (@t6,id), (@t6,close_at), (@t6,password), (@t6,modify_at)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.first_name : String'
|         s11: Path s7.last_name : String'
|         s12: Path s7.email_address : String'
|         s13: Path s7.password : String'
|         s14: Path s7.is_close : Boolean'
|         s15: Path s7.create_at : java.sql.Timestamp'
|         s16: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s9 : String'
|       2: Path s18.s10 : String'
|       3: Path s18.s11 : String'
|       4: Path s18.s12 : String'
|       5: Path s18.s13 : String'
|       6: Path s18.s14 : Boolean'
|       7: Path s18.s15 : java.sql.Timestamp'
|       8: Path s18.s16 : Option[java.sql.Timestamp']
|       9: Path s18.s17 : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s19), 5 -> (Path s7.is_close,s20), 1 -> (Path s7.first_name,s21), 6 -> (Path s7.create_at,s22), 2 -> (Path s7.last_name,s23), 7 -> (Path s7.modify_at,s24), 3 -> (Path s7.email_address,s25), 8 -> (Path s7.close_at,s26), 4 -> (Path s7.password,s27))
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|     from s7: ...
|     select: Pure t28 : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|       value: StructNode : {s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}
|         s27: Path s7.password : String'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s20: Path s7.is_close : Boolean'
|         s21: Path s7.first_name : String'
|         s23: Path s7.last_name : String'
|         s25: Path s7.email_address : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s19: Path s7.id : String'
|         s22: Path s7.create_at : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t28 : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|       value: StructNode : {s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}
|         s27: Path s7.password : String'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s20: Path s7.is_close : Boolean'
|         s21: Path s7.first_name : String'
|         s23: Path s7.last_name : String'
|         s25: Path s7.email_address : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s19: Path s7.id : String'
|         s22: Path s7.create_at : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,password),List(password)), ((@t6,close_at),List(close_at)), ((@t6,is_close),List(is_close)), ((@t6,first_name),List(first_name)), ((@t6,last_name),List(last_name)), ((@t6,email_address),List(email_address)), ((@t6,modify_at),List(modify_at)), ((@t6,create_at),List(create_at)))
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: Boolean', s35: String', s36: String', s37: String', s38: Option[java.sql.Timestamp'], s39: java.sql.Timestamp'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: Boolean', s35: String', s36: String', s37: String', s38: Option[java.sql.Timestamp'], s39: java.sql.Timestamp'}>]
|     value: StructNode : {s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: Boolean', s35: String', s36: String', s37: String', s38: Option[java.sql.Timestamp'], s39: java.sql.Timestamp'}
|       s31: Path s29.id : String'
|       s32: Path s29.password : String'
|       s33: Path s29.close_at : Option[java.sql.Timestamp']
|       s34: Path s29.is_close : Boolean'
|       s35: Path s29.first_name : String'
|       s36: Path s29.last_name : String'
|       s37: Path s29.email_address : String'
|       s38: Path s29.modify_at : Option[java.sql.Timestamp']
|       s39: Path s29.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,last_name) -> s36, (@t6,create_at) -> s39, (@t6,first_name) -> s35, (@t6,email_address) -> s37, (@t6,is_close) -> s34, (@t6,id) -> s31, (@t6,close_at) -> s33, (@t6,password) -> s32, (@t6,modify_at) -> s38)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: Boolean', s35: String', s36: String', s37: String', s38: Option[java.sql.Timestamp'], s39: java.sql.Timestamp'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: Boolean', s35: String', s36: String', s37: String', s38: Option[java.sql.Timestamp'], s39: java.sql.Timestamp'}>]
|     value: StructNode : {s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: Boolean', s35: String', s36: String', s37: String', s38: Option[java.sql.Timestamp'], s39: java.sql.Timestamp'}
|       s31: Path s29.id : String'
|       s32: Path s29.password : String'
|       s33: Path s29.close_at : Option[java.sql.Timestamp']
|       s34: Path s29.is_close : Boolean'
|       s35: Path s29.first_name : String'
|       s36: Path s29.last_name : String'
|       s37: Path s29.email_address : String'
|       s38: Path s29.modify_at : Option[java.sql.Timestamp']
|       s39: Path s29.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t28 : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|     value: StructNode : {s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}
|       s27: Path s7.password : String'
|       s26: Path s7.close_at : Option[java.sql.Timestamp']
|       s20: Path s7.is_close : Boolean'
|       s21: Path s7.first_name : String'
|       s23: Path s7.last_name : String'
|       s25: Path s7.email_address : String'
|       s24: Path s7.modify_at : Option[java.sql.Timestamp']
|       s19: Path s7.id : String'
|       s22: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|     value: StructNode : {s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}
|       s27: Path s29.password : String'
|       s26: Path s29.close_at : Option[java.sql.Timestamp']
|       s20: Path s29.is_close : Boolean'
|       s21: Path s29.first_name : String'
|       s23: Path s29.last_name : String'
|       s25: Path s29.email_address : String'
|       s24: Path s29.modify_at : Option[java.sql.Timestamp']
|       s19: Path s29.id : String'
|       s22: Path s29.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t28,s21) -> s21, (t28,s20) -> s20, (t28,s22) -> s22, (t28,s25) -> s25, (t28,s26) -> s26, (t28,s24) -> s24, (t28,s19) -> s19, (t28,s23) -> s23, (t28,s27) -> s27)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t28,s21),List(s21)), ((t28,s20),List(s20)), ((t28,s22),List(s22)), ((t28,s25),List(s25)), ((t28,s26),List(s26)), ((t28,s24),List(s24)), ((t28,s19),List(s19)), ((t28,s23),List(s23)), ((t28,s27),List(s27)))
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<{s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}>]
|       value: StructNode : {s27: String', s26: Option[java.sql.Timestamp'], s20: Boolean', s21: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s22: java.sql.Timestamp'}
|         s27: Path s29.password : String'
|         s26: Path s29.close_at : Option[java.sql.Timestamp']
|         s20: Path s29.is_close : Boolean'
|         s21: Path s29.first_name : String'
|         s23: Path s29.last_name : String'
|         s25: Path s29.email_address : String'
|         s24: Path s29.modify_at : Option[java.sql.Timestamp']
|         s19: Path s29.id : String'
|         s22: Path s29.create_at : java.sql.Timestamp'
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s27 -> 4, s26 -> 8, s20 -> 5, s21 -> 1, s23 -> 2, s25 -> 3, s24 -> 7, s19 -> 0, s22 -> 6
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18._1 : String'
|       2: Path s18._2 : String'
|       3: Path s18._3 : String'
|       4: Path s18._4 : String'
|       5: Path s18._5 : String'
|       6: Path s18._6 : Boolean'
|       7: Path s18._7 : java.sql.Timestamp'
|       8: Path s18._8 : Option[java.sql.Timestamp']
|       9: Path s18._9 : Option[java.sql.Timestamp']

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s29.id : String'
|       2: Path s29.first_name : String'
|       3: Path s29.last_name : String'
|       4: Path s29.email_address : String'
|       5: Path s29.password : String'
|       6: Path s29.is_close : Boolean'
|       7: Path s29.create_at : java.sql.Timestamp'
|       8: Path s29.modify_at : Option[java.sql.Timestamp']
|       9: Path s29.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|     6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|         6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.333333 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.088333 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.289542 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    7.294083 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    2.214292 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    6.392083 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.086917 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    2.856166 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   12.392583 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    1.205166 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.104042 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.326000 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.268333 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.080666 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    1.023125 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    3.754875 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    5.472042 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.651875 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   12.324875 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.330458 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.043041 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    7.383875 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    4.611750 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   70.527455 ms
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: StreamingInvokerAction$HeadOptionAction [select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS']
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1072591519 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1072591519 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 676µs
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------\
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1          | 2          | 3         | 4                | 5        | 6        | 7                    | 8         | 9        |
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id         | first_name | last_name | email_address    | password | is_close | create_at            | modify_at | close_at |
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------|
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | ZA91VCAsrS | asada      | guitar    | info@example.com | password | false    | 2022-07-31 22:02:... | NULL      | NULL     |
date:2022-07-31 22:02:49	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------/
date:2022-07-31 22:03:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:03:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:04:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:04:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:05:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:05:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:06:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:06:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:07:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:07:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:08:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:08:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:08:50	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 22:08:58	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 22:08:59	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 22:37:52	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 22:37:52	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.first_name : String'
|         3: Path s3.last_name : String'
|         4: Path s3.email_address : String'
|         5: Path s3.password : String'
|         6: Path s3.is_close : Boolean'
|         7: Path s3.create_at : java.sql.Timestamp'
|         8: Path s3.modify_at : Option[java.sql.Timestamp']
|         9: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s2.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.first_name : String'
|         3: Path s5.last_name : String'
|         4: Path s5.email_address : String'
|         5: Path s5.password : String'
|         6: Path s5.is_close : Boolean'
|         7: Path s5.create_at : java.sql.Timestamp'
|         8: Path s5.modify_at : Option[java.sql.Timestamp']
|         9: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5dff8aff
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3c39ec88
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@36564a57
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols 
| Path s4.id : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6b760aaf
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols 
| Path s7.first_name : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols 
| Path s7.last_name : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols 
| Path s7.email_address : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols 
| Path s7.password : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4affcd4c
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.first_name
|   3: Path s7.last_name
|   4: Path s7.email_address
|   5: Path s7.password
|   6: Path s7.is_close
|   7: Path s7.create_at
|   8: Path s7.modify_at
|   9: Path s7.close_at

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@39512537
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.first_name

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.first_name
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.last_name

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.last_name
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.email_address

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.email_address
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.password

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.password
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.is_close

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.create_at

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.create_at
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _8
| Path s7.modify_at

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.modify_at
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _9
| Path s7.close_at

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.close_at
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3d51d4b8
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_9) -> s17, List(_7) -> s15, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11, List(_8) -> s16, List(_6) -> s14), UnassignedType)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.first_name
|     s11: Path s7.last_name
|     s12: Path s7.email_address
|     s13: Path s7.password
|     s14: Path s7.is_close
|     s15: Path s7.create_at
|     s16: Path s7.modify_at
|     s17: Path s7.close_at

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@662982cf
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5288b6eb
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.first_name : String'
|       s11: Path s7.last_name : String'
|       s12: Path s7.email_address : String'
|       s13: Path s7.password : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.create_at : java.sql.Timestamp'
|       s16: Path s7.modify_at : Option[java.sql.Timestamp']
|       s17: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,id), (@t6,close_at), (@t6,last_name), (@t6,is_close), (@t6,modify_at), (@t6,first_name), (@t6,password), (@t6,create_at), (@t6,email_address)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@62405910
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.first_name : String'
|         s11: Path s7.last_name : String'
|         s12: Path s7.email_address : String'
|         s13: Path s7.password : String'
|         s14: Path s7.is_close : Boolean'
|         s15: Path s7.create_at : java.sql.Timestamp'
|         s16: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s9 : String'
|       2: Path s18.s10 : String'
|       3: Path s18.s11 : String'
|       4: Path s18.s12 : String'
|       5: Path s18.s13 : String'
|       6: Path s18.s14 : Boolean'
|       7: Path s18.s15 : java.sql.Timestamp'
|       8: Path s18.s16 : Option[java.sql.Timestamp']
|       9: Path s18.s17 : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5107a5f4
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s19), 5 -> (Path s7.is_close,s20), 1 -> (Path s7.first_name,s21), 6 -> (Path s7.create_at,s22), 2 -> (Path s7.last_name,s23), 7 -> (Path s7.modify_at,s24), 3 -> (Path s7.email_address,s25), 8 -> (Path s7.close_at,s26), 4 -> (Path s7.password,s27))
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7b126ae1
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6c3ab486
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|     from s7: ...
|     select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|       value: StructNode : {s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}
|         s27: Path s7.password : String'
|         s20: Path s7.is_close : Boolean'
|         s23: Path s7.last_name : String'
|         s25: Path s7.email_address : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s21: Path s7.first_name : String'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s19: Path s7.id : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@c52e8c8
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|       value: StructNode : {s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}
|         s27: Path s7.password : String'
|         s20: Path s7.is_close : Boolean'
|         s23: Path s7.last_name : String'
|         s25: Path s7.email_address : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s21: Path s7.first_name : String'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s19: Path s7.id : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,password),List(password)), ((@t6,is_close),List(is_close)), ((@t6,last_name),List(last_name)), ((@t6,email_address),List(email_address)), ((@t6,modify_at),List(modify_at)), ((@t6,create_at),List(create_at)), ((@t6,first_name),List(first_name)), ((@t6,close_at),List(close_at)))
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6016d4b3
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: java.sql.Timestamp', s38: String', s39: Option[java.sql.Timestamp']}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: java.sql.Timestamp', s38: String', s39: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: java.sql.Timestamp', s38: String', s39: Option[java.sql.Timestamp']}
|       s31: Path s29.id : String'
|       s32: Path s29.password : String'
|       s33: Path s29.is_close : Boolean'
|       s34: Path s29.last_name : String'
|       s35: Path s29.email_address : String'
|       s36: Path s29.modify_at : Option[java.sql.Timestamp']
|       s37: Path s29.create_at : java.sql.Timestamp'
|       s38: Path s29.first_name : String'
|       s39: Path s29.close_at : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,id) -> s31, (@t6,close_at) -> s39, (@t6,last_name) -> s34, (@t6,is_close) -> s33, (@t6,modify_at) -> s36, (@t6,first_name) -> s38, (@t6,password) -> s32, (@t6,create_at) -> s37, (@t6,email_address) -> s35)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@8bbef32
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: java.sql.Timestamp', s38: String', s39: Option[java.sql.Timestamp']}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: java.sql.Timestamp', s38: String', s39: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: java.sql.Timestamp', s38: String', s39: Option[java.sql.Timestamp']}
|       s31: Path s29.id : String'
|       s32: Path s29.password : String'
|       s33: Path s29.is_close : Boolean'
|       s34: Path s29.last_name : String'
|       s35: Path s29.email_address : String'
|       s36: Path s29.modify_at : Option[java.sql.Timestamp']
|       s37: Path s29.create_at : java.sql.Timestamp'
|       s38: Path s29.first_name : String'
|       s39: Path s29.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|   from s7: ...
|   select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|     value: StructNode : {s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}
|       s27: Path s7.password : String'
|       s20: Path s7.is_close : Boolean'
|       s23: Path s7.last_name : String'
|       s25: Path s7.email_address : String'
|       s24: Path s7.modify_at : Option[java.sql.Timestamp']
|       s22: Path s7.create_at : java.sql.Timestamp'
|       s21: Path s7.first_name : String'
|       s26: Path s7.close_at : Option[java.sql.Timestamp']
|       s19: Path s7.id : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@319cf427
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|     value: StructNode : {s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}
|       s27: Path s29.password : String'
|       s20: Path s29.is_close : Boolean'
|       s23: Path s29.last_name : String'
|       s25: Path s29.email_address : String'
|       s24: Path s29.modify_at : Option[java.sql.Timestamp']
|       s22: Path s29.create_at : java.sql.Timestamp'
|       s21: Path s29.first_name : String'
|       s26: Path s29.close_at : Option[java.sql.Timestamp']
|       s19: Path s29.id : String'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t28,s25) -> s25, (t28,s26) -> s26, (t28,s23) -> s23, (t28,s22) -> s22, (t28,s19) -> s19, (t28,s24) -> s24, (t28,s21) -> s21, (t28,s27) -> s27, (t28,s20) -> s20)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t28,s25),List(s25)), ((t28,s26),List(s26)), ((t28,s23),List(s23)), ((t28,s22),List(s22)), ((t28,s19),List(s19)), ((t28,s24),List(s24)), ((t28,s21),List(s21)), ((t28,s27),List(s27)), ((t28,s20),List(s20)))
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2a935e74
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}>]
|       value: StructNode : {s27: String', s20: Boolean', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s21: String', s26: Option[java.sql.Timestamp'], s19: String'}
|         s27: Path s29.password : String'
|         s20: Path s29.is_close : Boolean'
|         s23: Path s29.last_name : String'
|         s25: Path s29.email_address : String'
|         s24: Path s29.modify_at : Option[java.sql.Timestamp']
|         s22: Path s29.create_at : java.sql.Timestamp'
|         s21: Path s29.first_name : String'
|         s26: Path s29.close_at : Option[java.sql.Timestamp']
|         s19: Path s29.id : String'
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s27 -> 4, s20 -> 5, s23 -> 2, s25 -> 3, s24 -> 7, s22 -> 6, s21 -> 1, s26 -> 8, s19 -> 0
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7c76b4d9
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2b63161a
date:2022-07-31 22:37:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18._1 : String'
|       2: Path s18._2 : String'
|       3: Path s18._3 : String'
|       4: Path s18._4 : String'
|       5: Path s18._5 : String'
|       6: Path s18._6 : Boolean'
|       7: Path s18._7 : java.sql.Timestamp'
|       8: Path s18._8 : Option[java.sql.Timestamp']
|       9: Path s18._9 : Option[java.sql.Timestamp']

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s29.id : String'
|       2: Path s29.first_name : String'
|       3: Path s29.last_name : String'
|       4: Path s29.email_address : String'
|       5: Path s29.password : String'
|       6: Path s29.is_close : Boolean'
|       7: Path s29.create_at : java.sql.Timestamp'
|       8: Path s29.modify_at : Option[java.sql.Timestamp']
|       9: Path s29.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|     6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|         6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   17.406250 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    1.250125 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    6.508333 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   30.541708 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    8.016167 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    6.820083 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.469458 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    7.889000 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   51.625334 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    0.875042 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    2.539667 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.897416 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.423375 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.934666 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.170625 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:   14.867292 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   31.843709 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    3.135625 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   47.559791 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.633416 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.338000 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   29.876375 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   49.158708 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  318.780165 ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: StreamingInvokerAction$HeadOptionAction [select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS']
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@188149329 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@188149329 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------\
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1          | 2          | 3         | 4                | 5        | 6        | 7                    | 8         | 9        |
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id         | first_name | last_name | email_address    | password | is_close | create_at            | modify_at | close_at |
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------|
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | ZA91VCAsrS | asada      | guitar    | info@example.com | password | false    | 2022-07-31 22:02:... | NULL      | NULL     |
date:2022-07-31 22:37:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------/
date:2022-07-31 22:38:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:38:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:39:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:39:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:40:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:40:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:41:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:41:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:42:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:42:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:43:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:43:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:44:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:44:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:45:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:45:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:46:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:46:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:47:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:47:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:48:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:48:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:49:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:49:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:50:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:50:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:51:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:51:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:52:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:52:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:53:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:53:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:54:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:54:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:55:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:55:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:56:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:56:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:57:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:57:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:58:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:58:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:59:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 22:59:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:00:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:00:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:01:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:01:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:02:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:02:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:03:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:03:34	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 23:03:45	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 23:03:46	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 23:06:46	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 23:06:53	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 23:06:53	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 23:07:15	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 23:07:15	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.first_name : String'
|         3: Path s3.last_name : String'
|         4: Path s3.email_address : String'
|         5: Path s3.password : String'
|         6: Path s3.is_close : Boolean'
|         7: Path s3.create_at : java.sql.Timestamp'
|         8: Path s3.modify_at : Option[java.sql.Timestamp']
|         9: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s2.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.first_name : String'
|         3: Path s5.last_name : String'
|         4: Path s5.email_address : String'
|         5: Path s5.password : String'
|         6: Path s5.is_close : Boolean'
|         7: Path s5.create_at : java.sql.Timestamp'
|         8: Path s5.modify_at : Option[java.sql.Timestamp']
|         9: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1398756b
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols 
| Path s4.id : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols 
| Path s7.first_name : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols 
| Path s7.last_name : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols 
| Path s7.email_address : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols 
| Path s7.password : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@f6fde73
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.first_name
|   3: Path s7.last_name
|   4: Path s7.email_address
|   5: Path s7.password
|   6: Path s7.is_close
|   7: Path s7.create_at
|   8: Path s7.modify_at
|   9: Path s7.close_at

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.first_name

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.first_name
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.last_name

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.last_name
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.email_address

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.email_address
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.password

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.password
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.is_close

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.create_at

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.create_at
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _8
| Path s7.modify_at

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.modify_at
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _9
| Path s7.close_at

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.close_at
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4782c8ae
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_9) -> s17, List(_7) -> s15, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11, List(_8) -> s16, List(_6) -> s14), UnassignedType)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.first_name
|     s11: Path s7.last_name
|     s12: Path s7.email_address
|     s13: Path s7.password
|     s14: Path s7.is_close
|     s15: Path s7.create_at
|     s16: Path s7.modify_at
|     s17: Path s7.close_at

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@75ee8f69
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.first_name : String'
|       s11: Path s7.last_name : String'
|       s12: Path s7.email_address : String'
|       s13: Path s7.password : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.create_at : java.sql.Timestamp'
|       s16: Path s7.modify_at : Option[java.sql.Timestamp']
|       s17: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@258d8f92
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,first_name), (@t6,email_address), (@t6,last_name), (@t6,modify_at), (@t6,create_at), (@t6,is_close), (@t6,password), (@t6,close_at), (@t6,id)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@54e04116
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.first_name : String'
|         s11: Path s7.last_name : String'
|         s12: Path s7.email_address : String'
|         s13: Path s7.password : String'
|         s14: Path s7.is_close : Boolean'
|         s15: Path s7.create_at : java.sql.Timestamp'
|         s16: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s9 : String'
|       2: Path s18.s10 : String'
|       3: Path s18.s11 : String'
|       4: Path s18.s12 : String'
|       5: Path s18.s13 : String'
|       6: Path s18.s14 : Boolean'
|       7: Path s18.s15 : java.sql.Timestamp'
|       8: Path s18.s16 : Option[java.sql.Timestamp']
|       9: Path s18.s17 : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@576349c
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s19), 5 -> (Path s7.is_close,s20), 1 -> (Path s7.first_name,s21), 6 -> (Path s7.create_at,s22), 2 -> (Path s7.last_name,s23), 7 -> (Path s7.modify_at,s24), 3 -> (Path s7.email_address,s25), 8 -> (Path s7.close_at,s26), 4 -> (Path s7.password,s27))
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@462669c
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|     from s7: ...
|     select: Pure t28 : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|       value: StructNode : {s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}
|         s21: Path s7.first_name : String'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s27: Path s7.password : String'
|         s25: Path s7.email_address : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s19: Path s7.id : String'
|         s23: Path s7.last_name : String'
|         s20: Path s7.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4d5a989d
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t28 : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|       value: StructNode : {s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}
|         s21: Path s7.first_name : String'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s27: Path s7.password : String'
|         s25: Path s7.email_address : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s19: Path s7.id : String'
|         s23: Path s7.last_name : String'
|         s20: Path s7.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1be488d1
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,first_name),List(first_name)), ((@t6,close_at),List(close_at)), ((@t6,create_at),List(create_at)), ((@t6,password),List(password)), ((@t6,email_address),List(email_address)), ((@t6,modify_at),List(modify_at)), ((@t6,last_name),List(last_name)), ((@t6,is_close),List(is_close)))
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2f828de5
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: Boolean'}>]
|     value: StructNode : {s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: Boolean'}
|       s31: Path s29.id : String'
|       s32: Path s29.first_name : String'
|       s33: Path s29.close_at : Option[java.sql.Timestamp']
|       s34: Path s29.create_at : java.sql.Timestamp'
|       s35: Path s29.password : String'
|       s36: Path s29.email_address : String'
|       s37: Path s29.modify_at : Option[java.sql.Timestamp']
|       s38: Path s29.last_name : String'
|       s39: Path s29.is_close : Boolean'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,first_name) -> s32, (@t6,email_address) -> s36, (@t6,last_name) -> s38, (@t6,modify_at) -> s37, (@t6,create_at) -> s34, (@t6,is_close) -> s39, (@t6,password) -> s35, (@t6,close_at) -> s33, (@t6,id) -> s31)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: Boolean'}>]
|     value: StructNode : {s31: String', s32: String', s33: Option[java.sql.Timestamp'], s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: Boolean'}
|       s31: Path s29.id : String'
|       s32: Path s29.first_name : String'
|       s33: Path s29.close_at : Option[java.sql.Timestamp']
|       s34: Path s29.create_at : java.sql.Timestamp'
|       s35: Path s29.password : String'
|       s36: Path s29.email_address : String'
|       s37: Path s29.modify_at : Option[java.sql.Timestamp']
|       s38: Path s29.last_name : String'
|       s39: Path s29.is_close : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3843480f
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|   from s7: ...
|   select: Pure t28 : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|     value: StructNode : {s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}
|       s21: Path s7.first_name : String'
|       s26: Path s7.close_at : Option[java.sql.Timestamp']
|       s22: Path s7.create_at : java.sql.Timestamp'
|       s27: Path s7.password : String'
|       s25: Path s7.email_address : String'
|       s24: Path s7.modify_at : Option[java.sql.Timestamp']
|       s19: Path s7.id : String'
|       s23: Path s7.last_name : String'
|       s20: Path s7.is_close : Boolean'

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2144a1ea
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|     value: StructNode : {s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}
|       s21: Path s29.first_name : String'
|       s26: Path s29.close_at : Option[java.sql.Timestamp']
|       s22: Path s29.create_at : java.sql.Timestamp'
|       s27: Path s29.password : String'
|       s25: Path s29.email_address : String'
|       s24: Path s29.modify_at : Option[java.sql.Timestamp']
|       s19: Path s29.id : String'
|       s23: Path s29.last_name : String'
|       s20: Path s29.is_close : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t28,s21) -> s21, (t28,s24) -> s24, (t28,s22) -> s22, (t28,s19) -> s19, (t28,s20) -> s20, (t28,s27) -> s27, (t28,s25) -> s25, (t28,s26) -> s26, (t28,s23) -> s23)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t28,s21),List(s21)), ((t28,s24),List(s24)), ((t28,s22),List(s22)), ((t28,s19),List(s19)), ((t28,s20),List(s20)), ((t28,s27),List(s27)), ((t28,s25),List(s25)), ((t28,s26),List(s26)), ((t28,s23),List(s23)))
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<{s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}>]
|       value: StructNode : {s21: String', s26: Option[java.sql.Timestamp'], s22: java.sql.Timestamp', s27: String', s25: String', s24: Option[java.sql.Timestamp'], s19: String', s23: String', s20: Boolean'}
|         s21: Path s29.first_name : String'
|         s26: Path s29.close_at : Option[java.sql.Timestamp']
|         s22: Path s29.create_at : java.sql.Timestamp'
|         s27: Path s29.password : String'
|         s25: Path s29.email_address : String'
|         s24: Path s29.modify_at : Option[java.sql.Timestamp']
|         s19: Path s29.id : String'
|         s23: Path s29.last_name : String'
|         s20: Path s29.is_close : Boolean'
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1ed91713
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s21 -> 1, s26 -> 8, s22 -> 6, s27 -> 4, s25 -> 3, s24 -> 7, s19 -> 0, s23 -> 2, s20 -> 5
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@258f4c88
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7ae7b06
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18._1 : String'
|       2: Path s18._2 : String'
|       3: Path s18._3 : String'
|       4: Path s18._4 : String'
|       5: Path s18._5 : String'
|       6: Path s18._6 : Boolean'
|       7: Path s18._7 : java.sql.Timestamp'
|       8: Path s18._8 : Option[java.sql.Timestamp']
|       9: Path s18._9 : Option[java.sql.Timestamp']

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s29.id : String'
|       2: Path s29.first_name : String'
|       3: Path s29.last_name : String'
|       4: Path s29.email_address : String'
|       5: Path s29.password : String'
|       6: Path s29.is_close : Boolean'
|       7: Path s29.create_at : java.sql.Timestamp'
|       8: Path s29.modify_at : Option[java.sql.Timestamp']
|       9: Path s29.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@361c1e8
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@55563f18
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@ae2c236
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7ee0ee27
date:2022-07-31 23:07:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|     6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|         6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   26.917916 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    2.386417 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    7.209750 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:  111.928500 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:   21.721542 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    8.732541 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    1.154500 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    5.521417 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   59.400625 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    2.029375 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    5.888292 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    2.758583 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.447167 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.961833 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    2.840333 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:   15.246625 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   31.702542 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    4.211000 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   68.631125 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    2.698500 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.717583 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   19.328542 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   48.249791 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  450.684499 ms
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: StreamingInvokerAction$HeadOptionAction [select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS']
date:2022-07-31 23:07:15	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1031281884 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1031281884 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------\
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1          | 2          | 3         | 4                | 5        | 6        | 7                    | 8         | 9        |
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id         | first_name | last_name | email_address    | password | is_close | create_at            | modify_at | close_at |
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------|
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | ZA91VCAsrS | asada      | guitar    | info@example.com | password | false    | 2022-07-31 22:02:... | NULL      | NULL     |
date:2022-07-31 23:07:16	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------/
date:2022-07-31 23:07:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 23:08:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 23:08:07	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 23:08:07	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Apply Function exists
|   0: Filter s2
|     from s2: TableExpansion
|       table s3: Table threads
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s3.id : String'
|           2: Path s3.user_id : String'
|           3: Path s3.title : String'
|           4: Path s3.is_close : Boolean'
|           5: Path s3.create_at : java.sql.Timestamp'
|           6: Path s3.modify_at : Option[java.sql.Timestamp']
|           7: Path s3.close_at : Option[java.sql.Timestamp']
|     where: Apply Function and
|       0: Apply Function =
|         0: Path s2.id : String'
|         1: LiteralNode tTU1iFCk87tO (volatileHint=false)
|       1: Apply Function not
|         0: Path s2.is_close : Boolean'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Apply Function exists
|   0: Filter s4
|     from s4: TableExpansion
|       table s5: Table threads
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.id : String'
|           2: Path s5.user_id : String'
|           3: Path s5.title : String'
|           4: Path s5.is_close : Boolean'
|           5: Path s5.create_at : java.sql.Timestamp'
|           6: Path s5.modify_at : Option[java.sql.Timestamp']
|           7: Path s5.close_at : Option[java.sql.Timestamp']
|     where: Apply Function and
|       0: Apply Function =
|         0: Path s4.id : String'
|         1: LiteralNode tTU1iFCk87tO (volatileHint=false)
|       1: Apply Function not
|         0: Path s4.is_close : Boolean'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.threads)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s7 for Filter s4
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s8 for Pure t9
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>>]
|             value: Ref s7 : @t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             value: StructNode : {user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}
|               user_id: Path s7.user_id : String'
|               is_close: Path s7.is_close : Boolean'
|               modify_at: Path s7.modify_at : Option[java.sql.Timestamp']
|               close_at: Path s7.close_at : Option[java.sql.Timestamp']
|               title: Path s7.title : String'
|               id: Path s7.id : String'
|               create_at: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode : ()

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(), UnassignedType)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t9
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols t10
| Path s4.id : String'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.is_close with symbols t10
| Path s4.is_close : Boolean'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.is_close to:
| Path s4.is_close

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t11
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.user_id with symbols t10
| Path s7.user_id : String'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.user_id to:
| Path s7.user_id

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols t10
| Path s7.is_close : Boolean'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols t10
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols t10
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.title with symbols t10
| Path s7.title : String'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.title to:
| Path s7.title

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols t10
| Path s7.id : String'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols t10
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   user_id: Path s7.user_id
|   is_close: Path s7.is_close
|   modify_at: Path s7.modify_at
|   close_at: Path s7.close_at
|   title: Path s7.title
|   id: Path s7.id
|   create_at: Path s7.create_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path user_id
| Path s7.user_id

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.user_id
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path is_close
| Path s7.is_close

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.is_close
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path modify_at
| Path s7.modify_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.modify_at
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path close_at
| Path s7.close_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.close_at
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path title
| Path s7.title

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.title
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s7.id

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.id
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path create_at
| Path s7.create_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s7.create_at
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t11: (HashMap(List(modify_at) -> s14, List(is_close) -> s13, List(title) -> s16, List(user_id) -> s12, List(id) -> s17, List(create_at) -> s18, List(close_at) -> s15), UnassignedType)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.user_id
|     s13: Path s7.is_close
|     s14: Path s7.modify_at
|     s15: Path s7.close_at
|     s16: Path s7.title
|     s17: Path s7.id
|     s18: Path s7.create_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s7: Filter s4
|       from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function and
|         0: Apply Function =
|           0: Path s4.id
|           1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|         1: Apply Function not
|           0: Path s4.is_close
|     select: Pure t11
|       value: StructNode
|         s12: Path s7.user_id
|         s13: Path s7.is_close
|         s14: Path s7.modify_at
|         s15: Path s7.close_at
|         s16: Path s7.title
|         s17: Path s7.id
|         s18: Path s7.create_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Apply Function exists
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t9: (Map(List() -> s19), UnassignedType)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t9
|   value: StructNode
|     s19: Apply Function exists
|       0: Bind
|         from s7: Filter s4
|           from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|           where: Apply Function and
|             0: Apply Function =
|               0: Path s4.id
|               1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|             1: Apply Function not
|               0: Path s4.is_close
|         select: Pure t11
|           value: StructNode
|             s12: Path s7.user_id
|             s13: Path s7.is_close
|             s14: Path s7.modify_at
|             s15: Path s7.close_at
|             s16: Path s7.title
|             s17: Path s7.id
|             s18: Path s7.create_at

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| First : t9<{s19: Boolean}>
|   0: Bind : Vector[t9<{s19: Boolean}>]
|     from s8: Pure t10 : Vector[t10<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s19: Boolean}>]
|       value: StructNode : {s19: Boolean}
|         s19: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s4.is_close : Boolean'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.is_close : Boolean'
|                 s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s15: Path s7.close_at : Option[java.sql.Timestamp']
|                 s16: Path s7.title : String'
|                 s17: Path s7.id : String'
|                 s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlining Pure 'from' in:
| Bind : Vector[t9<{s19: Boolean}>]
|   from s8: Pure t10 : Vector[t10<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s19: Boolean}>]
|     value: StructNode : {s19: Boolean}
|       s19: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.is_close : Boolean'
|               s14: Path s7.modify_at : Option[java.sql.Timestamp']
|               s15: Path s7.close_at : Option[java.sql.Timestamp']
|               s16: Path s7.title : String'
|               s17: Path s7.id : String'
|               s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlined Pure 'from' in:
| Bind : Vector[t9<{s19: Boolean}>]
|   from s8: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s19: Boolean}>]
|     value: StructNode : {s19: Boolean}
|       s19: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.is_close : Boolean'
|               s14: Path s7.modify_at : Option[java.sql.Timestamp']
|               s15: Path s7.close_at : Option[java.sql.Timestamp']
|               s16: Path s7.title : String'
|               s17: Path s7.id : String'
|               s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| First : t9<{s19: Boolean}>
|   0: Bind : Vector[t9<{s19: Boolean}>]
|     from s8: Pure t20 : Vector[t20<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s19: Boolean}>]
|       value: StructNode : {s19: Boolean}
|         s19: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s4.is_close : Boolean'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.is_close : Boolean'
|                 s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s15: Path s7.close_at : Option[java.sql.Timestamp']
|                 s16: Path s7.title : String'
|                 s17: Path s7.id : String'
|                 s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t11, t9, t20; Field refs: (@t6,title), (@t6,is_close), (@t6,id), (@t6,user_id), (@t6,close_at), (@t6,create_at), (@t6,modify_at)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t9<Boolean>
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: Bind : Vector[t9<{s19: Boolean}>]
|       from s8: Pure t20 : Vector[t20<{}>]
|         value: StructNode : {}
|       select: Pure t9 : Vector[t9<{s19: Boolean}>]
|         value: StructNode : {s19: Boolean}
|           s19: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s4.id : String'
|                     1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|                   1: Apply Function not : Boolean'
|                     0: Path s4.is_close : Boolean'
|               select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                   s12: Path s7.user_id : String'
|                   s13: Path s7.is_close : Boolean'
|                   s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s15: Path s7.close_at : Option[java.sql.Timestamp']
|                   s16: Path s7.title : String'
|                   s17: Path s7.id : String'
|                   s18: Path s7.create_at : java.sql.Timestamp'
|     map: Path s21.s19 : Boolean

date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:08:07	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Apply Function exists,s22))
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s21: Bind : Vector[t23<{s22: Boolean}>]
|     from s8: ...
|     select: Pure t23 : Vector[t23<{s22: Boolean}>]
|       value: StructNode : {s22: Boolean}
|         s22: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s4.is_close : Boolean'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.is_close : Boolean'
|                 s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s15: Path s7.close_at : Option[java.sql.Timestamp']
|                 s16: Path s7.title : String'
|                 s17: Path s7.id : String'
|                 s18: Path s7.create_at : java.sql.Timestamp'
|   map: Path s21.s22 : Boolean

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: Bind : Vector[t23<{s22: Boolean}>]
|       from s8: Pure t20 : Vector[t20<{}>]
|         value: StructNode : {}
|       select: Pure t23 : Vector[t23<{s22: Boolean}>]
|         value: StructNode : {s22: Boolean}
|           s22: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s4.id : String'
|                     1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|                   1: Apply Function not : Boolean'
|                     0: Path s4.is_close : Boolean'
|               select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                   s12: Path s7.user_id : String'
|                   s13: Path s7.is_close : Boolean'
|                   s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s15: Path s7.close_at : Option[java.sql.Timestamp']
|                   s16: Path s7.title : String'
|                   s17: Path s7.id : String'
|                   s18: Path s7.create_at : java.sql.Timestamp'
|     map: Path s21.s22 : Boolean

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from Pure:
| Pure t20 : Vector[t20<{}>]
|   value: StructNode : {}

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray()
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Pure t20 : Vector[t20<{}>]
|   value: StructNode : {}

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{}>]
|   from s24: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}
|   select: Pure t25 : Vector[t25<{}>]
|     value: StructNode : {}

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map()
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s22: Boolean}>]
|   from s8: ...
|   select: Pure t23 : Vector[t23<{s22: Boolean}>]
|     value: StructNode : {s22: Boolean}
|       s22: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.is_close : Boolean'
|               s14: Path s7.modify_at : Option[java.sql.Timestamp']
|               s15: Path s7.close_at : Option[java.sql.Timestamp']
|               s16: Path s7.title : String'
|               s17: Path s7.id : String'
|               s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<{s22: Boolean}>]
|   from s24: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}
|   select: Pure t23 : Vector[t23<{s22: Boolean}>]
|     value: StructNode : {s22: Boolean}
|       s22: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.is_close : Boolean'
|               s14: Path s7.modify_at : Option[java.sql.Timestamp']
|               s15: Path s7.close_at : Option[java.sql.Timestamp']
|               s16: Path s7.title : String'
|               s17: Path s7.id : String'
|               s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s22) -> s22)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s22),List(s22)))
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,is_close),List(is_close)), ((@t6,user_id),List(user_id)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,title),List(title)), ((@t6,create_at),List(create_at)))
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t27<{s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}>]
|   from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t27 : Vector[t27<{s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}>]
|     value: StructNode : {s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}
|       s28: Path s26.id : String'
|       s29: Path s26.is_close : Boolean'
|       s30: Path s26.user_id : String'
|       s31: Path s26.modify_at : Option[java.sql.Timestamp']
|       s32: Path s26.close_at : Option[java.sql.Timestamp']
|       s33: Path s26.title : String'
|       s34: Path s26.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,title) -> s33, (@t6,is_close) -> s29, (@t6,id) -> s28, (@t6,user_id) -> s30, (@t6,close_at) -> s32, (@t6,create_at) -> s34, (@t6,modify_at) -> s31)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s4.is_close : Boolean'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<{s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}>]
|   from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t27 : Vector[t27<{s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}>]
|     value: StructNode : {s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}
|       s28: Path s26.id : String'
|       s29: Path s26.is_close : Boolean'
|       s30: Path s26.user_id : String'
|       s31: Path s26.modify_at : Option[java.sql.Timestamp']
|       s32: Path s26.close_at : Option[java.sql.Timestamp']
|       s33: Path s26.title : String'
|       s34: Path s26.create_at : java.sql.Timestamp'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s26.id : String'
|       1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s26.is_close : Boolean'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|       s12: Path s7.user_id : String'
|       s13: Path s7.is_close : Boolean'
|       s14: Path s7.modify_at : Option[java.sql.Timestamp']
|       s15: Path s7.close_at : Option[java.sql.Timestamp']
|       s16: Path s7.title : String'
|       s17: Path s7.id : String'
|       s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|   from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|       s12: Path s26.user_id : String'
|       s13: Path s26.is_close : Boolean'
|       s14: Path s26.modify_at : Option[java.sql.Timestamp']
|       s15: Path s26.close_at : Option[java.sql.Timestamp']
|       s16: Path s26.title : String'
|       s17: Path s26.id : String'
|       s18: Path s26.create_at : java.sql.Timestamp'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s26.id : String'
|       1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s26.is_close : Boolean'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t11,s18) -> s18, (t11,s14) -> s14, (t11,s13) -> s13, (t11,s15) -> s15, (t11,s16) -> s16, (t11,s12) -> s12, (t11,s17) -> s17)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t11,s18),List(s18)), ((t11,s14),List(s14)), ((t11,s13),List(s13)), ((t11,s15),List(s15)), ((t11,s16),List(s16)), ((t11,s12),List(s12)), ((t11,s17),List(s17)))
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<{s22: Boolean}>]
|       from s24: Pure t20 : Vector[t20<{}>]
|         value: StructNode : {}
|       select: Pure t23 : Vector[t23<{s22: Boolean}>]
|         value: StructNode : {s22: Boolean}
|           s22: Apply Function exists : Boolean
|             0: Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                   s12: Path s26.user_id : String'
|                   s13: Path s26.is_close : Boolean'
|                   s14: Path s26.modify_at : Option[java.sql.Timestamp']
|                   s15: Path s26.close_at : Option[java.sql.Timestamp']
|                   s16: Path s26.title : String'
|                   s17: Path s26.id : String'
|                   s18: Path s26.create_at : java.sql.Timestamp'
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s26.id : String'
|                   1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s26.is_close : Boolean'
|     map: Path s21.s22 : Boolean

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s22 -> 0
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1d6b5221
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s21: Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<(Boolean)>]
|     from s24: Pure t20 : Vector[t20<()>]
|       value: ProductNode : ()
|     select: Pure t23 : Vector[t23<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|             from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             select: Pure t11 : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|               value: ProductNode : (String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')
|                 1: Path s26.user_id : String'
|                 2: Path s26.is_close : Boolean'
|                 3: Path s26.modify_at : Option[java.sql.Timestamp']
|                 4: Path s26.close_at : Option[java.sql.Timestamp']
|                 5: Path s26.title : String'
|                 6: Path s26.id : String'
|                 7: Path s26.create_at : java.sql.Timestamp'
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s26.id : String'
|                 1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s26.is_close : Boolean'
|   map: Path s21.s22 : Boolean

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<(Boolean)>]
|       from s24: Pure t20 : Vector[t20<()>]
|         value: ProductNode : ()
|       select: Pure t23 : Vector[t23<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|               from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|                 value: ProductNode : (String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')
|                   1: Path s26.user_id : String'
|                   2: Path s26.is_close : Boolean'
|                   3: Path s26.modify_at : Option[java.sql.Timestamp']
|                   4: Path s26.close_at : Option[java.sql.Timestamp']
|                   5: Path s26.title : String'
|                   6: Path s26.id : String'
|                   7: Path s26.create_at : java.sql.Timestamp'
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s26.id : String'
|                   1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s26.is_close : Boolean'
|     map: Path s21._1 : Boolean

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<(Boolean)>]
|   from s24: Pure t20 : Vector[t20<()>]
|     value: ProductNode : ()
|   select: Pure t23 : Vector[t23<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|           from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|           select: Pure t11 : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|             value: ProductNode : (String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')
|               1: Path s26.user_id : String'
|               2: Path s26.is_close : Boolean'
|               3: Path s26.modify_at : Option[java.sql.Timestamp']
|               4: Path s26.close_at : Option[java.sql.Timestamp']
|               5: Path s26.title : String'
|               6: Path s26.id : String'
|               7: Path s26.create_at : java.sql.Timestamp'
|           where: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s26.id : String'
|               1: LiteralNode tTU1iFCk87tO (volatileHint=false) : String'
|             1: Apply Function not : Boolean'
|               0: Path s26.is_close : Boolean'

date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@13acaffc
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'tTU1iFCk87tO') and (not "is_close"))" : Vector[t23<(Boolean)>]

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: CompiledStatement "select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'tTU1iFCk87tO') and (not "is_close"))" : Vector[t23<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.261542 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.080750 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    1.360333 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    7.807083 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    9.970583 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    0.220166 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.029458 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    4.876042 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   22.043667 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   11.181916 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.130709 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.093125 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.416666 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.259875 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.007125 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    1.967084 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   12.575083 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    1.166125 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   28.112958 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.310792 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.336834 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    8.454375 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   15.901666 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  131.563957 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'tTU1iFCk87tO') and (not "is_close"))]
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'tTU1iFCk87tO') and (not "is_close"))
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1492980104 wrapping select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'tTU1iFCk87tO') and (not "is_close"))
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1492980104 wrapping select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'tTU1iFCk87tO') and (not "is_close"))
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@17933951
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------\
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1      |
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | exists |
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------|
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | false  |
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------/
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.user_id : String'
|       3: Path s2.title : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.modify_at : Option[java.sql.Timestamp']
|       7: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5291a5c7
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.user_id : String'
|       3: Path s3.title : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.modify_at : Option[java.sql.Timestamp']
|       7: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.user_id : String'
|       3: Path s6.title : String'
|       4: Path s6.is_close : Boolean'
|       5: Path s6.create_at : java.sql.Timestamp'
|       6: Path s6.modify_at : Option[java.sql.Timestamp']
|       7: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn user_id : String'
|         0: Path s5._2 : String'
|       3: InsertColumn title : String'
|         0: Path s5._3 : String'
|       4: InsertColumn is_close : Boolean'
|         0: Path s5._4 : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._5 : java.sql.Timestamp'
|       6: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._6 : Option[java.sql.Timestamp']
|       7: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._7 : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.user_id : String'
|     3: Path s6.title : String'
|     4: Path s6.is_close : Boolean'
|     5: Path s6.create_at : java.sql.Timestamp'
|     6: Path s6.modify_at : Option[java.sql.Timestamp']
|     7: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@152c1fee
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@630991f8
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=7, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=8, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=15, name=id : String'
|     2: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=9, name=user_id : String'
|     3: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=title : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=title : String'
|     4: CompoundResultConverter
|       *: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|       -: BaseResultConverter$mcZ$sp idx=11, name=is_close : Boolean'
|     5: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=create_at : java.sql.Timestamp'
|     6: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=13 : java.sql.Timestamp'
|     7: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=14 : java.sql.Timestamp'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)" : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)" : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=7, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=8, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=15, name=id : String'
|         2: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=9, name=user_id : String'
|         3: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=title : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=title : String'
|         4: CompoundResultConverter
|           *: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|           -: BaseResultConverter$mcZ$sp idx=11, name=is_close : Boolean'
|         5: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=create_at : java.sql.Timestamp'
|         6: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=13 : java.sql.Timestamp'
|         7: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=14 : java.sql.Timestamp'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.518583 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.381125 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.916542 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   24.399708 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   30.215958 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.user_id : String'
|       3: Path s2.title : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.modify_at : Option[java.sql.Timestamp']
|       7: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6d5e7579
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.user_id : String'
|       3: Path s3.title : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.modify_at : Option[java.sql.Timestamp']
|       7: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String')]
|   from s5: Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String')
|     table s6: Table threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String')
|       1: Path s6.id : String'
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn user_id : String'
|       3: InsertColumn title : String'
|       4: InsertColumn is_close : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|       6: InsertColumn modify_at : Option[java.sql.Timestamp']
|       7: InsertColumn close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String')
|   table s6: Table threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String')
|     1: Path s6.id : String'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|     2: CompoundResultConverter
|     3: CompoundResultConverter
|     4: CompoundResultConverter
|     5: CompoundResultConverter
|     6: CompoundResultConverter
|     7: CompoundResultConverter

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select 1 from "threads" where "id"=?" : (String')

date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@32be5a88
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String')]
|   from s5: CompiledStatement "select 1 from "threads" where "id"=?" : (String')
|   map: CompiledMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|         2: CompoundResultConverter
|         3: CompoundResultConverter
|         4: CompoundResultConverter
|         5: CompoundResultConverter
|         6: CompoundResultConverter
|         7: CompoundResultConverter

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.800375 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.149833 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.833708 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.587084 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   11.371000 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.user_id : String'
|       3: Path s2.title : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.modify_at : Option[java.sql.Timestamp']
|       7: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.user_id : String'
|       3: Path s3.title : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.modify_at : Option[java.sql.Timestamp']
|       7: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.user_id : String'
|       3: Path s6.title : String'
|       4: Path s6.is_close : Boolean'
|       5: Path s6.create_at : java.sql.Timestamp'
|       6: Path s6.modify_at : Option[java.sql.Timestamp']
|       7: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn user_id : String'
|         0: Path s5._2 : String'
|       3: InsertColumn title : String'
|         0: Path s5._3 : String'
|       4: InsertColumn is_close : Boolean'
|         0: Path s5._4 : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._5 : java.sql.Timestamp'
|       6: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._6 : Option[java.sql.Timestamp']
|       7: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._7 : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.user_id : String'
|     3: Path s6.title : String'
|     4: Path s6.is_close : Boolean'
|     5: Path s6.create_at : java.sql.Timestamp'
|     6: Path s6.modify_at : Option[java.sql.Timestamp']
|     7: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4798e05e
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=7, name=id : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=title : String'
|     4: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|     7: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=7, name=id : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=title : String'
|         4: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|         7: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'

date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    0.604708 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.753000 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    1.685250 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    6.596959 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    9.639917 ms
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: InsertOrUpdateAction [update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)]
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@68312f04
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared update: HikariProxyPreparedStatement@1106316537 wrapping update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared update: HikariProxyPreparedStatement@1106316537 wrapping update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@765a7ac6
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: /------------+--------------+---------+-------------------------+-----------+-----------+--------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+--------------\
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | 1          | 2            | 3       | 4                       | 5         | 6         | 7            | 8            | 9          | 10           | 11      | 12                      | 13        | 14        | 15           |
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | String     | String       | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String       | String       | String     | String       | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String       |
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: |------------+--------------+---------+-------------------------+-----------+-----------+--------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+--------------|
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | ZA91VCAsrS | about scala. | false   | 2022-07-31 23:08:08.081 | NULL      | NULL      | tTU1iFCk87tO | tTU1iFCk87tO | ZA91VCAsrS | about scala. | false   | 2022-07-31 23:08:08.081 | NULL      | NULL      | tTU1iFCk87tO |
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: \------------+--------------+---------+-------------------------+-----------+-----------+--------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+--------------/
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@36f0049f
date:2022-07-31 23:08:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared update took 4ms
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@366a980f
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5742c8c9
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@726b14ad
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@44893283
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@26c170fd
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6704e06c
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4de05e5d
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@40f06048
date:2022-07-31 23:08:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:08:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:08:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:08:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:09:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:09:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:09:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:09:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:10:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:10:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:10:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:10:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:11:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:11:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:11:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:12:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 23:12:14	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 23:12:14	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 23:12:14	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table user_threads
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : Int'
|           2: Path s4.user_id : String'
|           3: Path s4.thread_id : String'
|           4: Path s4.is_close : Boolean'
|           5: Path s4.create_at : java.sql.Timestamp'
|           6: Path s4.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s3.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false)
|   select: Pure t5
|     value: Path s2.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table user_threads
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : Int'
|           2: Path s8.user_id : String'
|           3: Path s8.thread_id : String'
|           4: Path s8.is_close : Boolean'
|           5: Path s8.create_at : java.sql.Timestamp'
|           6: Path s8.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false)
|   select: Pure t10
|     value: Path s6.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.user_threads)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<String'>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<String'>]
|     value: Path s6.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t10<String'>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<String'>]
|     value: Path s6.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t10<String'>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<String'>]
|     value: Path s6.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t10<String'>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<String'>]
|     value: Path s6.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.user_id with symbols 
| Path s7.user_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.user_id to:
| Path s7.user_id

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.thread_id with symbols 
| Path s6.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.thread_id to:
| Path s6.thread_id

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Path s6.thread_id

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s6.thread_id
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List() -> s11), UnassignedType)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s11: Path s6.thread_id

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t10<{s11: String'}>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<{s11: String'}>]
|     value: StructNode : {s11: String'}
|       s11: Path s6.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t10; Field refs: (@t9,user_id), (@t9,thread_id)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t10<String'>
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s12: Bind : Vector[t10<{s11: String'}>]
|     from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|       from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.user_id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s11: String'}>]
|       value: StructNode : {s11: String'}
|         s11: Path s6.thread_id : String'
|   map: Path s12.s11 : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.thread_id,s13))
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s12: Bind : Vector[t14<{s13: String'}>]
|     from s6: ...
|     select: Pure t14 : Vector[t14<{s13: String'}>]
|       value: StructNode : {s13: String'}
|         s13: Path s6.thread_id : String'
|   map: Path s12.s13 : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[String']
|   from s12: Bind : Vector[t14<{s13: String'}>]
|     from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|       from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.user_id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t14 : Vector[t14<{s13: String'}>]
|       value: StructNode : {s13: String'}
|         s13: Path s6.thread_id : String'
|   map: Path s12.s13 : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,user_id),List(user_id)), ((@t9,thread_id),List(thread_id)))
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s15, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s17: String', s18: String'}>]
|   from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   select: Pure t16 : Vector[t16<{s17: String', s18: String'}>]
|     value: StructNode : {s17: String', s18: String'}
|       s17: Path s15.user_id : String'
|       s18: Path s15.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,user_id) -> s17, (@t9,thread_id) -> s18)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.user_id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t16<{s17: String', s18: String'}>]
|   from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   select: Pure t16 : Vector[t16<{s17: String', s18: String'}>]
|     value: StructNode : {s17: String', s18: String'}
|       s17: Path s15.user_id : String'
|       s18: Path s15.thread_id : String'
|   where: Apply Function = : Boolean
|     0: Path s15.user_id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t14<{s13: String'}>]
|   from s6: ...
|   select: Pure t14 : Vector[t14<{s13: String'}>]
|     value: StructNode : {s13: String'}
|       s13: Path s6.thread_id : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<{s13: String'}>]
|   from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   select: Pure t14 : Vector[t14<{s13: String'}>]
|     value: StructNode : {s13: String'}
|       s13: Path s15.thread_id : String'
|   where: Apply Function = : Boolean
|     0: Path s15.user_id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t14,s13) -> s13)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t14,s13),List(s13)))
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[String']
|   from s12: Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<{s13: String'}>]
|     from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     select: Pure t14 : Vector[t14<{s13: String'}>]
|       value: StructNode : {s13: String'}
|         s13: Path s15.thread_id : String'
|     where: Apply Function = : Boolean
|       0: Path s15.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: Path s12.s13 : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s13 -> 0
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s12: Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<(String')>]
|     from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     select: Pure t14 : Vector[t14<(String')>]
|       value: ProductNode : (String')
|         1: Path s15.thread_id : String'
|     where: Apply Function = : Boolean
|       0: Path s15.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: Path s12.s13 : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[String']
|   from s12: Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<(String')>]
|     from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     select: Pure t14 : Vector[t14<(String')>]
|       value: ProductNode : (String')
|         1: Path s15.thread_id : String'
|     where: Apply Function = : Boolean
|       0: Path s15.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: Path s12._1 : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<(String')>]
|   from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   select: Pure t14 : Vector[t14<(String')>]
|     value: ProductNode : (String')
|       1: Path s15.thread_id : String'
|   where: Apply Function = : Boolean
|     0: Path s15.user_id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'" : Vector[t14<(String')>]

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[String']
|   from s12: CompiledStatement "select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'" : Vector[t14<(String')>]
|   map: CompiledMapping : String'
|     converter: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.292042 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.258500 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.791000 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    3.169125 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    3.195458 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.278000 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.022333 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    3.028666 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:    7.178000 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    0.301333 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.075291 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.144916 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.162417 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.050583 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    0.229625 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    1.271833 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    1.958916 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.065458 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   10.671166 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.066458 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.020250 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    1.410667 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    2.548167 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   39.190204 ms
date:2022-07-31 23:12:14	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS']
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@77d621a2
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1818636324 wrapping select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1818636324 wrapping select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /-----------\
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1         |
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | thread_id |
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |-----------|
date:2022-07-31 23:12:15	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \-----------/
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=1, active=0, idle=1, waiting=0)
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7911c128
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7d2e4ad2
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@382ccb13
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7eb12685
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@95eb0fa
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@62903d9
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5803345c
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2f71a4d7
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@53d418a3
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1d2deecb
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5c4d88e6
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7eb8c8a4
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@d5ac6d0
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7ff32a06
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4fc987a6
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@770c8b13
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2cbbbf64
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4a7e03ef
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@490949b1
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:12:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:12:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:12:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:12:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:13:04	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 23:13:13	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 23:13:14	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 23:14:42	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 23:14:42	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Apply Function exists
|   0: Filter s2
|     from s2: TableExpansion
|       table s3: Table threads
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s3.id : String'
|           2: Path s3.user_id : String'
|           3: Path s3.title : String'
|           4: Path s3.is_close : Boolean'
|           5: Path s3.create_at : java.sql.Timestamp'
|           6: Path s3.modify_at : Option[java.sql.Timestamp']
|           7: Path s3.close_at : Option[java.sql.Timestamp']
|     where: Apply Function and
|       0: Apply Function =
|         0: Path s2.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false)
|       1: Apply Function not
|         0: Path s2.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Apply Function exists
|   0: Filter s4
|     from s4: TableExpansion
|       table s5: Table threads
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.id : String'
|           2: Path s5.user_id : String'
|           3: Path s5.title : String'
|           4: Path s5.is_close : Boolean'
|           5: Path s5.create_at : java.sql.Timestamp'
|           6: Path s5.modify_at : Option[java.sql.Timestamp']
|           7: Path s5.close_at : Option[java.sql.Timestamp']
|     where: Apply Function and
|       0: Apply Function =
|         0: Path s4.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false)
|       1: Apply Function not
|         0: Path s4.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.threads)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s7 for Filter s4
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s8 for Pure t9
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>>]
|             value: Ref s7 : @t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             value: StructNode : {user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}
|               user_id: Path s7.user_id : String'
|               is_close: Path s7.is_close : Boolean'
|               modify_at: Path s7.modify_at : Option[java.sql.Timestamp']
|               close_at: Path s7.close_at : Option[java.sql.Timestamp']
|               title: Path s7.title : String'
|               id: Path s7.id : String'
|               create_at: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode : ()

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(), UnassignedType)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t9
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols t10
| Path s4.id : String'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.is_close with symbols t10
| Path s4.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.is_close to:
| Path s4.is_close

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t11
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.user_id with symbols t10
| Path s7.user_id : String'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.user_id to:
| Path s7.user_id

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols t10
| Path s7.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols t10
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols t10
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.title with symbols t10
| Path s7.title : String'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.title to:
| Path s7.title

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols t10
| Path s7.id : String'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols t10
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   user_id: Path s7.user_id
|   is_close: Path s7.is_close
|   modify_at: Path s7.modify_at
|   close_at: Path s7.close_at
|   title: Path s7.title
|   id: Path s7.id
|   create_at: Path s7.create_at

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path user_id
| Path s7.user_id

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.user_id
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path is_close
| Path s7.is_close

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.is_close
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path modify_at
| Path s7.modify_at

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.modify_at
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5f954f96
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path close_at
| Path s7.close_at

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.close_at
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path title
| Path s7.title

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.title
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s7.id

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.id
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path create_at
| Path s7.create_at

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s7.create_at
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t11: (HashMap(List(modify_at) -> s14, List(is_close) -> s13, List(title) -> s16, List(user_id) -> s12, List(id) -> s17, List(create_at) -> s18, List(close_at) -> s15), UnassignedType)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.user_id
|     s13: Path s7.is_close
|     s14: Path s7.modify_at
|     s15: Path s7.close_at
|     s16: Path s7.title
|     s17: Path s7.id
|     s18: Path s7.create_at

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s7: Filter s4
|       from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function and
|         0: Apply Function =
|           0: Path s4.id
|           1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|         1: Apply Function not
|           0: Path s4.is_close
|     select: Pure t11
|       value: StructNode
|         s12: Path s7.user_id
|         s13: Path s7.is_close
|         s14: Path s7.modify_at
|         s15: Path s7.close_at
|         s16: Path s7.title
|         s17: Path s7.id
|         s18: Path s7.create_at

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@13c5db86
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Apply Function exists
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t9: (Map(List() -> s19), UnassignedType)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t9
|   value: StructNode
|     s19: Apply Function exists
|       0: Bind
|         from s7: Filter s4
|           from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|           where: Apply Function and
|             0: Apply Function =
|               0: Path s4.id
|               1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|             1: Apply Function not
|               0: Path s4.is_close
|         select: Pure t11
|           value: StructNode
|             s12: Path s7.user_id
|             s13: Path s7.is_close
|             s14: Path s7.modify_at
|             s15: Path s7.close_at
|             s16: Path s7.title
|             s17: Path s7.id
|             s18: Path s7.create_at

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@338ec3b1
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| First : t9<{s19: Boolean}>
|   0: Bind : Vector[t9<{s19: Boolean}>]
|     from s8: Pure t10 : Vector[t10<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s19: Boolean}>]
|       value: StructNode : {s19: Boolean}
|         s19: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s4.is_close : Boolean'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.is_close : Boolean'
|                 s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s15: Path s7.close_at : Option[java.sql.Timestamp']
|                 s16: Path s7.title : String'
|                 s17: Path s7.id : String'
|                 s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1f6c65b9
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlining Pure 'from' in:
| Bind : Vector[t9<{s19: Boolean}>]
|   from s8: Pure t10 : Vector[t10<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s19: Boolean}>]
|     value: StructNode : {s19: Boolean}
|       s19: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.is_close : Boolean'
|               s14: Path s7.modify_at : Option[java.sql.Timestamp']
|               s15: Path s7.close_at : Option[java.sql.Timestamp']
|               s16: Path s7.title : String'
|               s17: Path s7.id : String'
|               s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6a70703d
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlined Pure 'from' in:
| Bind : Vector[t9<{s19: Boolean}>]
|   from s8: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s19: Boolean}>]
|     value: StructNode : {s19: Boolean}
|       s19: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.is_close : Boolean'
|               s14: Path s7.modify_at : Option[java.sql.Timestamp']
|               s15: Path s7.close_at : Option[java.sql.Timestamp']
|               s16: Path s7.title : String'
|               s17: Path s7.id : String'
|               s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| First : t9<{s19: Boolean}>
|   0: Bind : Vector[t9<{s19: Boolean}>]
|     from s8: Pure t20 : Vector[t20<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s19: Boolean}>]
|       value: StructNode : {s19: Boolean}
|         s19: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s4.is_close : Boolean'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.is_close : Boolean'
|                 s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s15: Path s7.close_at : Option[java.sql.Timestamp']
|                 s16: Path s7.title : String'
|                 s17: Path s7.id : String'
|                 s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@57549f1e
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t9, t11, t20; Field refs: (@t6,id), (@t6,user_id), (@t6,modify_at), (@t6,title), (@t6,close_at), (@t6,create_at), (@t6,is_close)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t9<Boolean>
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@12825d0e
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6ebfa34a
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: Bind : Vector[t9<{s19: Boolean}>]
|       from s8: Pure t20 : Vector[t20<{}>]
|         value: StructNode : {}
|       select: Pure t9 : Vector[t9<{s19: Boolean}>]
|         value: StructNode : {s19: Boolean}
|           s19: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s4.id : String'
|                     1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|                   1: Apply Function not : Boolean'
|                     0: Path s4.is_close : Boolean'
|               select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                   s12: Path s7.user_id : String'
|                   s13: Path s7.is_close : Boolean'
|                   s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s15: Path s7.close_at : Option[java.sql.Timestamp']
|                   s16: Path s7.title : String'
|                   s17: Path s7.id : String'
|                   s18: Path s7.create_at : java.sql.Timestamp'
|     map: Path s21.s19 : Boolean

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@727d738
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Apply Function exists,s22))
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@74f804ad
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s21: Bind : Vector[t23<{s22: Boolean}>]
|     from s8: ...
|     select: Pure t23 : Vector[t23<{s22: Boolean}>]
|       value: StructNode : {s22: Boolean}
|         s22: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s4.is_close : Boolean'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.is_close : Boolean'
|                 s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s15: Path s7.close_at : Option[java.sql.Timestamp']
|                 s16: Path s7.title : String'
|                 s17: Path s7.id : String'
|                 s18: Path s7.create_at : java.sql.Timestamp'
|   map: Path s21.s22 : Boolean

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: Bind : Vector[t23<{s22: Boolean}>]
|       from s8: Pure t20 : Vector[t20<{}>]
|         value: StructNode : {}
|       select: Pure t23 : Vector[t23<{s22: Boolean}>]
|         value: StructNode : {s22: Boolean}
|           s22: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s4.id : String'
|                     1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|                   1: Apply Function not : Boolean'
|                     0: Path s4.is_close : Boolean'
|               select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                   s12: Path s7.user_id : String'
|                   s13: Path s7.is_close : Boolean'
|                   s14: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s15: Path s7.close_at : Option[java.sql.Timestamp']
|                   s16: Path s7.title : String'
|                   s17: Path s7.id : String'
|                   s18: Path s7.create_at : java.sql.Timestamp'
|     map: Path s21.s22 : Boolean

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@74125d11
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from Pure:
| Pure t20 : Vector[t20<{}>]
|   value: StructNode : {}

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray()
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Pure t20 : Vector[t20<{}>]
|   value: StructNode : {}

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@67a4052a
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{}>]
|   from s24: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}
|   select: Pure t25 : Vector[t25<{}>]
|     value: StructNode : {}

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map()
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s22: Boolean}>]
|   from s8: ...
|   select: Pure t23 : Vector[t23<{s22: Boolean}>]
|     value: StructNode : {s22: Boolean}
|       s22: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.is_close : Boolean'
|               s14: Path s7.modify_at : Option[java.sql.Timestamp']
|               s15: Path s7.close_at : Option[java.sql.Timestamp']
|               s16: Path s7.title : String'
|               s17: Path s7.id : String'
|               s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5e8380f1
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<{s22: Boolean}>]
|   from s24: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}
|   select: Pure t23 : Vector[t23<{s22: Boolean}>]
|     value: StructNode : {s22: Boolean}
|       s22: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s4.is_close : Boolean'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.is_close : Boolean'
|               s14: Path s7.modify_at : Option[java.sql.Timestamp']
|               s15: Path s7.close_at : Option[java.sql.Timestamp']
|               s16: Path s7.title : String'
|               s17: Path s7.id : String'
|               s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s22) -> s22)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s22),List(s22)))
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,is_close),List(is_close)), ((@t6,user_id),List(user_id)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,title),List(title)), ((@t6,create_at),List(create_at)))
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6a6a2ae0
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t27<{s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}>]
|   from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t27 : Vector[t27<{s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}>]
|     value: StructNode : {s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}
|       s28: Path s26.id : String'
|       s29: Path s26.is_close : Boolean'
|       s30: Path s26.user_id : String'
|       s31: Path s26.modify_at : Option[java.sql.Timestamp']
|       s32: Path s26.close_at : Option[java.sql.Timestamp']
|       s33: Path s26.title : String'
|       s34: Path s26.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,id) -> s28, (@t6,user_id) -> s30, (@t6,modify_at) -> s31, (@t6,title) -> s33, (@t6,close_at) -> s32, (@t6,create_at) -> s34, (@t6,is_close) -> s29)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s4.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@c761869
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<{s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}>]
|   from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t27 : Vector[t27<{s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}>]
|     value: StructNode : {s28: String', s29: Boolean', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: java.sql.Timestamp'}
|       s28: Path s26.id : String'
|       s29: Path s26.is_close : Boolean'
|       s30: Path s26.user_id : String'
|       s31: Path s26.modify_at : Option[java.sql.Timestamp']
|       s32: Path s26.close_at : Option[java.sql.Timestamp']
|       s33: Path s26.title : String'
|       s34: Path s26.create_at : java.sql.Timestamp'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s26.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s26.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4bbcc198
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|       s12: Path s7.user_id : String'
|       s13: Path s7.is_close : Boolean'
|       s14: Path s7.modify_at : Option[java.sql.Timestamp']
|       s15: Path s7.close_at : Option[java.sql.Timestamp']
|       s16: Path s7.title : String'
|       s17: Path s7.id : String'
|       s18: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|   from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|       s12: Path s26.user_id : String'
|       s13: Path s26.is_close : Boolean'
|       s14: Path s26.modify_at : Option[java.sql.Timestamp']
|       s15: Path s26.close_at : Option[java.sql.Timestamp']
|       s16: Path s26.title : String'
|       s17: Path s26.id : String'
|       s18: Path s26.create_at : java.sql.Timestamp'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s26.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s26.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@9fa4416
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t11,s13) -> s13, (t11,s16) -> s16, (t11,s12) -> s12, (t11,s18) -> s18, (t11,s17) -> s17, (t11,s14) -> s14, (t11,s15) -> s15)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t11,s13),List(s13)), ((t11,s16),List(s16)), ((t11,s12),List(s12)), ((t11,s18),List(s18)), ((t11,s17),List(s17)), ((t11,s14),List(s14)), ((t11,s15),List(s15)))
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<{s22: Boolean}>]
|       from s24: Pure t20 : Vector[t20<{}>]
|         value: StructNode : {}
|       select: Pure t23 : Vector[t23<{s22: Boolean}>]
|         value: StructNode : {s22: Boolean}
|           s22: Apply Function exists : Boolean
|             0: Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|               from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<{s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Boolean', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp'], s16: String', s17: String', s18: java.sql.Timestamp'}
|                   s12: Path s26.user_id : String'
|                   s13: Path s26.is_close : Boolean'
|                   s14: Path s26.modify_at : Option[java.sql.Timestamp']
|                   s15: Path s26.close_at : Option[java.sql.Timestamp']
|                   s16: Path s26.title : String'
|                   s17: Path s26.id : String'
|                   s18: Path s26.create_at : java.sql.Timestamp'
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s26.id : String'
|                   1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s26.is_close : Boolean'
|     map: Path s21.s22 : Boolean

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@327c42e3
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s22 -> 0
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@e75a195
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s21: Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<(Boolean)>]
|     from s24: Pure t20 : Vector[t20<()>]
|       value: ProductNode : ()
|     select: Pure t23 : Vector[t23<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|             from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|             select: Pure t11 : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|               value: ProductNode : (String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')
|                 1: Path s26.user_id : String'
|                 2: Path s26.is_close : Boolean'
|                 3: Path s26.modify_at : Option[java.sql.Timestamp']
|                 4: Path s26.close_at : Option[java.sql.Timestamp']
|                 5: Path s26.title : String'
|                 6: Path s26.id : String'
|                 7: Path s26.create_at : java.sql.Timestamp'
|             where: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s26.id : String'
|                 1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|               1: Apply Function not : Boolean'
|                 0: Path s26.is_close : Boolean'
|   map: Path s21.s22 : Boolean

date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@236801c2
date:2022-07-31 23:14:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<(Boolean)>]
|       from s24: Pure t20 : Vector[t20<()>]
|         value: ProductNode : ()
|       select: Pure t23 : Vector[t23<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|               from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|                 value: ProductNode : (String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')
|                   1: Path s26.user_id : String'
|                   2: Path s26.is_close : Boolean'
|                   3: Path s26.modify_at : Option[java.sql.Timestamp']
|                   4: Path s26.close_at : Option[java.sql.Timestamp']
|                   5: Path s26.title : String'
|                   6: Path s26.id : String'
|                   7: Path s26.create_at : java.sql.Timestamp'
|               where: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s26.id : String'
|                   1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|                 1: Apply Function not : Boolean'
|                   0: Path s26.is_close : Boolean'
|     map: Path s21._1 : Boolean

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t23<(Boolean)>]
|   from s24: Pure t20 : Vector[t20<()>]
|     value: ProductNode : ()
|   select: Pure t23 : Vector[t23<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s26, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|           from s26: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|           select: Pure t11 : Vector[t11<(String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')>]
|             value: ProductNode : (String', Boolean', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', String', java.sql.Timestamp')
|               1: Path s26.user_id : String'
|               2: Path s26.is_close : Boolean'
|               3: Path s26.modify_at : Option[java.sql.Timestamp']
|               4: Path s26.close_at : Option[java.sql.Timestamp']
|               5: Path s26.title : String'
|               6: Path s26.id : String'
|               7: Path s26.create_at : java.sql.Timestamp'
|           where: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s26.id : String'
|               1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|             1: Apply Function not : Boolean'
|               0: Path s26.is_close : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close"))" : Vector[t23<(Boolean)>]

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s21: CompiledStatement "select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close"))" : Vector[t23<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   17.073333 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    1.586750 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:   72.885417 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   49.088333 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:   17.282959 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    3.490125 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.328458 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:   15.444791 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   72.730833 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   19.437208 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.028959 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.326292 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.615708 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.007792 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.358875 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:   24.393667 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   23.405500 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    4.324917 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   89.379750 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.710542 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.304792 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   21.569959 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   43.915958 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  485.690918 ms
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close"))]
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close"))
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1746497026 wrapping select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close"))
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1746497026 wrapping select exists(select "user_id", "is_close", "modify_at", "close_at", "title", "id", "create_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close"))
date:2022-07-31 23:14:42	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------\
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1      |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | exists |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------|
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | false  |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------/
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.user_id : String'
|       3: Path s2.title : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.modify_at : Option[java.sql.Timestamp']
|       7: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.user_id : String'
|       3: Path s3.title : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.modify_at : Option[java.sql.Timestamp']
|       7: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.user_id : String'
|       3: Path s6.title : String'
|       4: Path s6.is_close : Boolean'
|       5: Path s6.create_at : java.sql.Timestamp'
|       6: Path s6.modify_at : Option[java.sql.Timestamp']
|       7: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn user_id : String'
|         0: Path s5._2 : String'
|       3: InsertColumn title : String'
|         0: Path s5._3 : String'
|       4: InsertColumn is_close : Boolean'
|         0: Path s5._4 : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._5 : java.sql.Timestamp'
|       6: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._6 : Option[java.sql.Timestamp']
|       7: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._7 : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.user_id : String'
|     3: Path s6.title : String'
|     4: Path s6.is_close : Boolean'
|     5: Path s6.create_at : java.sql.Timestamp'
|     6: Path s6.modify_at : Option[java.sql.Timestamp']
|     7: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=7, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=8, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=15, name=id : String'
|     2: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=9, name=user_id : String'
|     3: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=title : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=title : String'
|     4: CompoundResultConverter
|       *: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|       -: BaseResultConverter$mcZ$sp idx=11, name=is_close : Boolean'
|     5: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=create_at : java.sql.Timestamp'
|     6: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=13 : java.sql.Timestamp'
|     7: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=14 : java.sql.Timestamp'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)" : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)" : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=7, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=8, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=15, name=id : String'
|         2: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=9, name=user_id : String'
|         3: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=title : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=title : String'
|         4: CompoundResultConverter
|           *: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|           -: BaseResultConverter$mcZ$sp idx=11, name=is_close : Boolean'
|         5: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=create_at : java.sql.Timestamp'
|         6: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=13 : java.sql.Timestamp'
|         7: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=14 : java.sql.Timestamp'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    6.043542 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.620875 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    5.022792 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   27.874042 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   39.561251 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.user_id : String'
|       3: Path s2.title : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.modify_at : Option[java.sql.Timestamp']
|       7: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.user_id : String'
|       3: Path s3.title : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.modify_at : Option[java.sql.Timestamp']
|       7: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String')]
|   from s5: Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String')
|     table s6: Table threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String')
|       1: Path s6.id : String'
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn user_id : String'
|       3: InsertColumn title : String'
|       4: InsertColumn is_close : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|       6: InsertColumn modify_at : Option[java.sql.Timestamp']
|       7: InsertColumn close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String')
|   table s6: Table threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String')
|     1: Path s6.id : String'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|     2: CompoundResultConverter
|     3: CompoundResultConverter
|     4: CompoundResultConverter
|     5: CompoundResultConverter
|     6: CompoundResultConverter
|     7: CompoundResultConverter

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select 1 from "threads" where "id"=?" : (String')

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String')]
|   from s5: CompiledStatement "select 1 from "threads" where "id"=?" : (String')
|   map: CompiledMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|         2: CompoundResultConverter
|         3: CompoundResultConverter
|         4: CompoundResultConverter
|         5: CompoundResultConverter
|         6: CompoundResultConverter
|         7: CompoundResultConverter

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.016583 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.133958 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.341917 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    3.129833 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    7.622291 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.user_id : String'
|       3: Path s2.title : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.modify_at : Option[java.sql.Timestamp']
|       7: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.user_id : String'
|       3: Path s3.title : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.modify_at : Option[java.sql.Timestamp']
|       7: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.user_id : String'
|       3: Path s6.title : String'
|       4: Path s6.is_close : Boolean'
|       5: Path s6.create_at : java.sql.Timestamp'
|       6: Path s6.modify_at : Option[java.sql.Timestamp']
|       7: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn user_id : String'
|         0: Path s5._2 : String'
|       3: InsertColumn title : String'
|         0: Path s5._3 : String'
|       4: InsertColumn is_close : Boolean'
|         0: Path s5._4 : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._5 : java.sql.Timestamp'
|       6: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._6 : Option[java.sql.Timestamp']
|       7: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._7 : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, title, is_close, create_at, modify_at, close_at] : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.user_id : String'
|     3: Path s6.title : String'
|     4: Path s6.is_close : Boolean'
|     5: Path s6.create_at : java.sql.Timestamp'
|     6: Path s6.modify_at : Option[java.sql.Timestamp']
|     7: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=7, name=id : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=title : String'
|     4: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|     7: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=7, name=id : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=title : String'
|         4: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|         7: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    0.971708 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.146333 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.943000 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    2.522250 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    6.583291 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: InsertOrUpdateAction [update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)]
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared update: HikariProxyPreparedStatement@1650087941 wrapping update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared update: HikariProxyPreparedStatement@1650087941 wrapping update "threads" set "user_id"=?,"title"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "threads" ("id","user_id","title","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,? where not exists (select 1 from "threads" where "id"=?)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: /------------+--------------+---------+-------------------------+-----------+-----------+--------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+--------------\
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | 1          | 2            | 3       | 4                       | 5         | 6         | 7            | 8            | 9          | 10           | 11      | 12                      | 13        | 14        | 15           |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | String     | String       | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String       | String       | String     | String       | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String       |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: |------------+--------------+---------+-------------------------+-----------+-----------+--------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+--------------|
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | ZA91VCAsrS | about scala. | false   | 2022-07-31 23:14:43.044 | NULL      | NULL      | kHhsGFih4Va4 | kHhsGFih4Va4 | ZA91VCAsrS | about scala. | false   | 2022-07-31 23:14:43.044 | NULL      | NULL      | kHhsGFih4Va4 |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: \------------+--------------+---------+-------------------------+-----------+-----------+--------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+--------------/
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared update took 4ms
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 23:14:43	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 23:14:43	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table user_threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : Int'
|       2: Path s2.user_id : String'
|       3: Path s2.thread_id : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table user_threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : Int'
|       2: Path s3.user_id : String'
|       3: Path s3.thread_id : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, user_id, thread_id, is_close, create_at, close_at] : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|     table s6: Table user_threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|       1: Path s6.id : Int'
|       2: Path s6.user_id : String'
|       3: Path s6.thread_id : String'
|       4: Path s6.is_close : Boolean'
|       5: Path s6.create_at : java.sql.Timestamp'
|       6: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|     0: ProductNode : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|       1: InsertColumn id : Int'
|         0: Path s5._1 : Int'
|       2: InsertColumn user_id : String'
|         0: Path s5._2 : String'
|       3: InsertColumn thread_id : String'
|         0: Path s5._3 : String'
|       4: InsertColumn is_close : Boolean'
|         0: Path s5._4 : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._5 : java.sql.Timestamp'
|       6: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._6 : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, thread_id, is_close, create_at, close_at] : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|   table s6: Table user_threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|     1: Path s6.id : Int'
|     2: Path s6.user_id : String'
|     3: Path s6.thread_id : String'
|     4: Path s6.is_close : Boolean'
|     5: Path s6.create_at : java.sql.Timestamp'
|     6: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|       *: BaseResultConverter$mcI$sp idx=6, name=id : Int'
|       -: BaseResultConverter$mcI$sp idx=12, name=id : Int'
|     2: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=7, name=user_id : String'
|     3: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=thread_id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=8, name=thread_id : String'
|     4: CompoundResultConverter
|       *: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|       -: BaseResultConverter$mcZ$sp idx=9, name=is_close : Boolean'
|     5: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=create_at : java.sql.Timestamp'
|     6: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=11 : java.sql.Timestamp'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "user_threads" set "user_id"=?,"thread_id"=?,"is_close"=?,"create_at"=?,"close_at"=? where "id"=?; insert into "user_threads" ("user_id","thread_id","is_close","create_at","close_at") select ?,?,?,?,? where not exists (select 1 from "user_threads" where "id"=?)" : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "user_threads" set "user_id"=?,"thread_id"=?,"is_close"=?,"create_at"=?,"close_at"=? where "id"=?; insert into "user_threads" ("user_id","thread_id","is_close","create_at","close_at") select ?,?,?,?,? where not exists (select 1 from "user_threads" where "id"=?)" : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|           *: BaseResultConverter$mcI$sp idx=6, name=id : Int'
|           -: BaseResultConverter$mcI$sp idx=12, name=id : Int'
|         2: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=7, name=user_id : String'
|         3: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=thread_id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=8, name=thread_id : String'
|         4: CompoundResultConverter
|           *: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|           -: BaseResultConverter$mcZ$sp idx=9, name=is_close : Boolean'
|         5: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=create_at : java.sql.Timestamp'
|         6: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=11 : java.sql.Timestamp'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    0.718666 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.350625 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    4.320500 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.875875 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   11.265666 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table user_threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : Int'
|       2: Path s2.user_id : String'
|       3: Path s2.thread_id : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table user_threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : Int'
|       2: Path s3.user_id : String'
|       3: Path s3.thread_id : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(Int')]
|   from s5: Insert allFields=[id, user_id, thread_id, is_close, create_at, close_at] : (Int')
|     table s6: Table user_threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (Int')
|       1: Path s6.id : Int'
|   map: TypeMapping : Mapped[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|     0: ProductNode : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|       1: InsertColumn id : Int'
|         0: Path s5._1 : Int'
|       2: InsertColumn user_id : String'
|       3: InsertColumn thread_id : String'
|       4: InsertColumn is_close : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|       6: InsertColumn close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, thread_id, is_close, create_at, close_at] : (Int')
|   table s6: Table user_threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (Int')
|     1: Path s6.id : Int'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: BaseResultConverter$mcI$sp idx=1, name=id : Int'
|     2: CompoundResultConverter
|     3: CompoundResultConverter
|     4: CompoundResultConverter
|     5: CompoundResultConverter
|     6: CompoundResultConverter

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select 1 from "user_threads" where "id"=?" : (Int')

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(Int')]
|   from s5: CompiledStatement "select 1 from "user_threads" where "id"=?" : (Int')
|   map: CompiledMapping : Mapped[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: BaseResultConverter$mcI$sp idx=1, name=id : Int'
|         2: CompoundResultConverter
|         3: CompoundResultConverter
|         4: CompoundResultConverter
|         5: CompoundResultConverter
|         6: CompoundResultConverter

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.321500 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.146667 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    1.745583 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    3.724458 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    6.938208 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table user_threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : Int'
|       2: Path s2.user_id : String'
|       3: Path s2.thread_id : String'
|       4: Path s2.is_close : Boolean'
|       5: Path s2.create_at : java.sql.Timestamp'
|       6: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table user_threads
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : Int'
|       2: Path s3.user_id : String'
|       3: Path s3.thread_id : String'
|       4: Path s3.is_close : Boolean'
|       5: Path s3.create_at : java.sql.Timestamp'
|       6: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, user_id, thread_id, is_close, create_at, close_at] : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|     table s6: Table user_threads : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|       1: Path s6.id : Int'
|       2: Path s6.user_id : String'
|       3: Path s6.thread_id : String'
|       4: Path s6.is_close : Boolean'
|       5: Path s6.create_at : java.sql.Timestamp'
|       6: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|     0: ProductNode : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|       1: InsertColumn id : Int'
|         0: Path s5._1 : Int'
|       2: InsertColumn user_id : String'
|         0: Path s5._2 : String'
|       3: InsertColumn thread_id : String'
|         0: Path s5._3 : String'
|       4: InsertColumn is_close : Boolean'
|         0: Path s5._4 : Boolean'
|       5: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._5 : java.sql.Timestamp'
|       6: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._6 : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, user_id, thread_id, is_close, create_at, close_at] : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|   table s6: Table user_threads : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|     1: Path s6.id : Int'
|     2: Path s6.user_id : String'
|     3: Path s6.thread_id : String'
|     4: Path s6.is_close : Boolean'
|     5: Path s6.create_at : java.sql.Timestamp'
|     6: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: BaseResultConverter$mcI$sp idx=6, name=id : Int'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=thread_id : String'
|     4: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "user_threads" set "user_id"=?,"thread_id"=?,"is_close"=?,"create_at"=?,"close_at"=? where "id"=?" : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "user_threads" set "user_id"=?,"thread_id"=?,"is_close"=?,"create_at"=?,"close_at"=? where "id"=?" : (Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(Int', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: BaseResultConverter$mcI$sp idx=6, name=id : Int'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=user_id : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=thread_id : String'
|         4: BaseResultConverter$mcZ$sp idx=3, name=is_close : Boolean'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=create_at : java.sql.Timestamp'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'

date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    0.658042 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.843500 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.483875 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    2.560334 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    6.545751 ms
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: InsertOrUpdateAction [update "user_threads" set "user_id"=?,"thread_id"=?,"is_close"=?,"create_at"=?,"close_at"=? where "id"=?; insert into "user_threads" ("user_id","thread_id","is_close","create_at","close_at") select ?,?,?,?,? where not exists (select 1 from "user_threads" where "id"=?)]
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: update "user_threads" set "user_id"=?,"thread_id"=?,"is_close"=?,"create_at"=?,"close_at"=? where "id"=?; insert into "user_threads" ("user_id","thread_id","is_close","create_at","close_at") select ?,?,?,?,? where not exists (select 1 from "user_threads" where "id"=?)
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1cd911f
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared update: HikariProxyPreparedStatement@569514808 wrapping update "user_threads" set "user_id"=?,"thread_id"=?,"is_close"=?,"create_at"=?,"close_at"=? where "id"=?; insert into "user_threads" ("user_id","thread_id","is_close","create_at","close_at") select ?,?,?,?,? where not exists (select 1 from "user_threads" where "id"=?)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared update: HikariProxyPreparedStatement@569514808 wrapping update "user_threads" set "user_id"=?,"thread_id"=?,"is_close"=?,"create_at"=?,"close_at"=? where "id"=?; insert into "user_threads" ("user_id","thread_id","is_close","create_at","close_at") select ?,?,?,?,? where not exists (select 1 from "user_threads" where "id"=?)
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: /------------+--------------+---------+-------------------------+-----------+-----+------------+--------------+---------+-------------------------+-----------+-----\
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | 1          | 2            | 3       | 4                       | 5         | 6   | 7          | 8            | 9       | 10                      | 11        | 12  |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | String     | String       | Boolean | Timestamp               | TIMESTAMP | Int | String     | String       | Boolean | Timestamp               | TIMESTAMP | Int |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: |------------+--------------+---------+-------------------------+-----------+-----+------------+--------------+---------+-------------------------+-----------+-----|
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | ZA91VCAsrS | kHhsGFih4Va4 | false   | 2022-07-31 23:14:43.158 | NULL      | 0   | ZA91VCAsrS | kHhsGFih4Va4 | false   | 2022-07-31 23:14:43.158 | NULL      | 0   |
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: \------------+--------------+---------+-------------------------+-----------+-----+------------+--------------+---------+-------------------------+-----------+-----/
date:2022-07-31 23:14:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared update took 9ms
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=1, active=0, idle=1, waiting=0)
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@f0a7f56
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@b35fa6f
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4e37756d
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@239f50dd
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7f337b37
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5b71003c
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2e188a22
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@77583e84
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@13d6099b
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@40758b3d
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2a56508b
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1ccce75b
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3f75af88
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@53b5e738
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4bff27cd
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3072e7d6
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@22e907bf
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5e19b8fd
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6c6a2dbc
date:2022-07-31 23:14:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:15:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:15:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:15:16	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table user_threads
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : Int'
|           2: Path s4.user_id : String'
|           3: Path s4.thread_id : String'
|           4: Path s4.is_close : Boolean'
|           5: Path s4.create_at : java.sql.Timestamp'
|           6: Path s4.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s3.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false)
|   select: Pure t5
|     value: Path s2.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table user_threads
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : Int'
|           2: Path s8.user_id : String'
|           3: Path s8.thread_id : String'
|           4: Path s8.is_close : Boolean'
|           5: Path s8.create_at : java.sql.Timestamp'
|           6: Path s8.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false)
|   select: Pure t10
|     value: Path s6.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.user_threads)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<String'>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<String'>]
|     value: Path s6.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t10<String'>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<String'>]
|     value: Path s6.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t10<String'>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<String'>]
|     value: Path s6.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t10<String'>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<String'>]
|     value: Path s6.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.user_id with symbols 
| Path s7.user_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.user_id to:
| Path s7.user_id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.thread_id with symbols 
| Path s6.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.thread_id to:
| Path s6.thread_id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Path s6.thread_id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s6.thread_id
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List() -> s11), UnassignedType)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s11: Path s6.thread_id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t10<{s11: String'}>]
|   from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<{s11: String'}>]
|     value: StructNode : {s11: String'}
|       s11: Path s6.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t10; Field refs: (@t9,user_id), (@t9,thread_id)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t10<String'>
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s12: Bind : Vector[t10<{s11: String'}>]
|     from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|       from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.user_id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s11: String'}>]
|       value: StructNode : {s11: String'}
|         s11: Path s6.thread_id : String'
|   map: Path s12.s11 : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.thread_id,s13))
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s12: Bind : Vector[t14<{s13: String'}>]
|     from s6: ...
|     select: Pure t14 : Vector[t14<{s13: String'}>]
|       value: StructNode : {s13: String'}
|         s13: Path s6.thread_id : String'
|   map: Path s12.s13 : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[String']
|   from s12: Bind : Vector[t14<{s13: String'}>]
|     from s6: Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|       from s7: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.user_id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t14 : Vector[t14<{s13: String'}>]
|       value: StructNode : {s13: String'}
|         s13: Path s6.thread_id : String'
|   map: Path s12.s13 : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,user_id),List(user_id)), ((@t9,thread_id),List(thread_id)))
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s15, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s17: String', s18: String'}>]
|   from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   select: Pure t16 : Vector[t16<{s17: String', s18: String'}>]
|     value: StructNode : {s17: String', s18: String'}
|       s17: Path s15.user_id : String'
|       s18: Path s15.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,user_id) -> s17, (@t9,thread_id) -> s18)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.user_id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t16<{s17: String', s18: String'}>]
|   from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   select: Pure t16 : Vector[t16<{s17: String', s18: String'}>]
|     value: StructNode : {s17: String', s18: String'}
|       s17: Path s15.user_id : String'
|       s18: Path s15.thread_id : String'
|   where: Apply Function = : Boolean
|     0: Path s15.user_id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t14<{s13: String'}>]
|   from s6: ...
|   select: Pure t14 : Vector[t14<{s13: String'}>]
|     value: StructNode : {s13: String'}
|       s13: Path s6.thread_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<{s13: String'}>]
|   from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   select: Pure t14 : Vector[t14<{s13: String'}>]
|     value: StructNode : {s13: String'}
|       s13: Path s15.thread_id : String'
|   where: Apply Function = : Boolean
|     0: Path s15.user_id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t14,s13) -> s13)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t14,s13),List(s13)))
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[String']
|   from s12: Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<{s13: String'}>]
|     from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     select: Pure t14 : Vector[t14<{s13: String'}>]
|       value: StructNode : {s13: String'}
|         s13: Path s15.thread_id : String'
|     where: Apply Function = : Boolean
|       0: Path s15.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: Path s12.s13 : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s13 -> 0
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s12: Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<(String')>]
|     from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     select: Pure t14 : Vector[t14<(String')>]
|       value: ProductNode : (String')
|         1: Path s15.thread_id : String'
|     where: Apply Function = : Boolean
|       0: Path s15.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: Path s12.s13 : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[String']
|   from s12: Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<(String')>]
|     from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|     select: Pure t14 : Vector[t14<(String')>]
|       value: ProductNode : (String')
|         1: Path s15.thread_id : String'
|     where: Apply Function = : Boolean
|       0: Path s15.user_id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: Path s12._1 : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s15, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t14<(String')>]
|   from s15: Table user_threads : Vector[@t9<{user_id: String', close_at: Option[java.sql.Timestamp'], is_close: Boolean', thread_id: String', id: Int', create_at: java.sql.Timestamp'}>]
|   select: Pure t14 : Vector[t14<(String')>]
|     value: ProductNode : (String')
|       1: Path s15.thread_id : String'
|   where: Apply Function = : Boolean
|     0: Path s15.user_id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'" : Vector[t14<(String')>]

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[String']
|   from s12: CompiledStatement "select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'" : Vector[t14<(String')>]
|   map: CompiledMapping : String'
|     converter: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.691708 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.138250 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.320709 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    8.308417 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    1.304042 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.318959 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.265292 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    1.124625 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:    3.027000 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    0.094708 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.083000 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.042083 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.022334 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.041417 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    2.414125 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    1.230042 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    1.765500 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.068958 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   10.070167 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.378417 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.174875 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    3.274625 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    6.096167 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   44.255420 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS']
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@706003292 wrapping select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@706003292 wrapping select "thread_id" from "user_threads" where "user_id" = 'ZA91VCAsrS'
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------------\
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1            |
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | thread_id    |
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------------|
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | kHhsGFih4Va4 |
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------------/
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table threads
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.user_id : String'
|         3: Path s3.title : String'
|         4: Path s3.is_close : Boolean'
|         5: Path s3.create_at : java.sql.Timestamp'
|         6: Path s3.modify_at : Option[java.sql.Timestamp']
|         7: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function and
|     0: Apply Function =
|       0: Path s2.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false)
|     1: Apply Function not
|       0: Path s2.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table threads
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.user_id : String'
|         3: Path s5.title : String'
|         4: Path s5.is_close : Boolean'
|         5: Path s5.create_at : java.sql.Timestamp'
|         6: Path s5.modify_at : Option[java.sql.Timestamp']
|         7: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function and
|     0: Apply Function =
|       0: Path s4.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false)
|     1: Apply Function not
|       0: Path s4.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.threads)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s4.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.user_id : String'
|         3: Path s7.title : String'
|         4: Path s7.is_close : Boolean'
|         5: Path s7.create_at : java.sql.Timestamp'
|         6: Path s7.modify_at : Option[java.sql.Timestamp']
|         7: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.user_id : String'
|         3: Path s7.title : String'
|         4: Path s7.is_close : Boolean'
|         5: Path s7.create_at : java.sql.Timestamp'
|         6: Path s7.modify_at : Option[java.sql.Timestamp']
|         7: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'
|   select: Pure t8 : Vector[t8<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.user_id : String'
|       3: Path s7.title : String'
|       4: Path s7.is_close : Boolean'
|       5: Path s7.create_at : java.sql.Timestamp'
|       6: Path s7.modify_at : Option[java.sql.Timestamp']
|       7: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'
|   select: Pure t8 : Vector[t8<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.user_id : String'
|       3: Path s7.title : String'
|       4: Path s7.is_close : Boolean'
|       5: Path s7.create_at : java.sql.Timestamp'
|       6: Path s7.modify_at : Option[java.sql.Timestamp']
|       7: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols 
| Path s4.id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.is_close with symbols 
| Path s4.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.is_close to:
| Path s4.is_close

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.user_id with symbols 
| Path s7.user_id : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.user_id to:
| Path s7.user_id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.title with symbols 
| Path s7.title : String'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.title to:
| Path s7.title

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.user_id
|   3: Path s7.title
|   4: Path s7.is_close
|   5: Path s7.create_at
|   6: Path s7.modify_at
|   7: Path s7.close_at

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.user_id

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.user_id
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.title

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.title
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.is_close

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.is_close
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.create_at

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.create_at
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.modify_at

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.modify_at
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.close_at

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.close_at
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_7) -> s15, List(_6) -> s14, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11), UnassignedType)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.user_id
|     s11: Path s7.title
|     s12: Path s7.is_close
|     s13: Path s7.create_at
|     s14: Path s7.modify_at
|     s15: Path s7.close_at

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: Boolean', s13: java.sql.Timestamp', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s4.is_close : Boolean'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: Boolean', s13: java.sql.Timestamp', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: Boolean', s13: java.sql.Timestamp', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.user_id : String'
|       s11: Path s7.title : String'
|       s12: Path s7.is_close : Boolean'
|       s13: Path s7.create_at : java.sql.Timestamp'
|       s14: Path s7.modify_at : Option[java.sql.Timestamp']
|       s15: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,create_at), (@t6,close_at), (@t6,id), (@t6,user_id), (@t6,modify_at), (@t6,title), (@t6,is_close)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s16: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: Boolean', s13: java.sql.Timestamp', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s4.id : String'
|           1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|         1: Apply Function not : Boolean'
|           0: Path s4.is_close : Boolean'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: Boolean', s13: java.sql.Timestamp', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: Boolean', s13: java.sql.Timestamp', s14: Option[java.sql.Timestamp'], s15: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.user_id : String'
|         s11: Path s7.title : String'
|         s12: Path s7.is_close : Boolean'
|         s13: Path s7.create_at : java.sql.Timestamp'
|         s14: Path s7.modify_at : Option[java.sql.Timestamp']
|         s15: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s16.s9 : String'
|       2: Path s16.s10 : String'
|       3: Path s16.s11 : String'
|       4: Path s16.s12 : Boolean'
|       5: Path s16.s13 : java.sql.Timestamp'
|       6: Path s16.s14 : Option[java.sql.Timestamp']
|       7: Path s16.s15 : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s17), 5 -> (Path s7.modify_at,s18), 1 -> (Path s7.user_id,s19), 6 -> (Path s7.close_at,s20), 2 -> (Path s7.title,s21), 3 -> (Path s7.is_close,s22), 4 -> (Path s7.create_at,s23))
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s16: Bind : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|     from s7: ...
|     select: Pure t24 : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|       value: StructNode : {s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}
|         s18: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.id : String'
|         s22: Path s7.is_close : Boolean'
|         s20: Path s7.close_at : Option[java.sql.Timestamp']
|         s19: Path s7.user_id : String'
|         s21: Path s7.title : String'
|         s23: Path s7.create_at : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s16.s17 : String'
|       2: Path s16.s19 : String'
|       3: Path s16.s21 : String'
|       4: Path s16.s22 : Boolean'
|       5: Path s16.s23 : java.sql.Timestamp'
|       6: Path s16.s18 : Option[java.sql.Timestamp']
|       7: Path s16.s20 : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s16: Bind : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|     from s7: Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s4.id : String'
|           1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|         1: Apply Function not : Boolean'
|           0: Path s4.is_close : Boolean'
|     select: Pure t24 : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|       value: StructNode : {s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}
|         s18: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.id : String'
|         s22: Path s7.is_close : Boolean'
|         s20: Path s7.close_at : Option[java.sql.Timestamp']
|         s19: Path s7.user_id : String'
|         s21: Path s7.title : String'
|         s23: Path s7.create_at : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s16.s17 : String'
|       2: Path s16.s19 : String'
|       3: Path s16.s21 : String'
|       4: Path s16.s22 : Boolean'
|       5: Path s16.s23 : java.sql.Timestamp'
|       6: Path s16.s18 : Option[java.sql.Timestamp']
|       7: Path s16.s20 : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,is_close),List(is_close)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,user_id),List(user_id)), ((@t6,title),List(title)), ((@t6,create_at),List(create_at)))
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s25, None, None, ConstArray(), None, None, None, None, false : Vector[t26<{s27: String', s28: Boolean', s29: Option[java.sql.Timestamp'], s30: Option[java.sql.Timestamp'], s31: String', s32: String', s33: java.sql.Timestamp'}>]
|   from s25: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t26 : Vector[t26<{s27: String', s28: Boolean', s29: Option[java.sql.Timestamp'], s30: Option[java.sql.Timestamp'], s31: String', s32: String', s33: java.sql.Timestamp'}>]
|     value: StructNode : {s27: String', s28: Boolean', s29: Option[java.sql.Timestamp'], s30: Option[java.sql.Timestamp'], s31: String', s32: String', s33: java.sql.Timestamp'}
|       s27: Path s25.id : String'
|       s28: Path s25.is_close : Boolean'
|       s29: Path s25.modify_at : Option[java.sql.Timestamp']
|       s30: Path s25.close_at : Option[java.sql.Timestamp']
|       s31: Path s25.user_id : String'
|       s32: Path s25.title : String'
|       s33: Path s25.create_at : java.sql.Timestamp'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,create_at) -> s33, (@t6,close_at) -> s30, (@t6,id) -> s27, (@t6,user_id) -> s31, (@t6,modify_at) -> s29, (@t6,title) -> s32, (@t6,is_close) -> s28)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s4.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s25, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t26<{s27: String', s28: Boolean', s29: Option[java.sql.Timestamp'], s30: Option[java.sql.Timestamp'], s31: String', s32: String', s33: java.sql.Timestamp'}>]
|   from s25: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t26 : Vector[t26<{s27: String', s28: Boolean', s29: Option[java.sql.Timestamp'], s30: Option[java.sql.Timestamp'], s31: String', s32: String', s33: java.sql.Timestamp'}>]
|     value: StructNode : {s27: String', s28: Boolean', s29: Option[java.sql.Timestamp'], s30: Option[java.sql.Timestamp'], s31: String', s32: String', s33: java.sql.Timestamp'}
|       s27: Path s25.id : String'
|       s28: Path s25.is_close : Boolean'
|       s29: Path s25.modify_at : Option[java.sql.Timestamp']
|       s30: Path s25.close_at : Option[java.sql.Timestamp']
|       s31: Path s25.user_id : String'
|       s32: Path s25.title : String'
|       s33: Path s25.create_at : java.sql.Timestamp'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s25.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s25.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t24 : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|     value: StructNode : {s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}
|       s18: Path s7.modify_at : Option[java.sql.Timestamp']
|       s17: Path s7.id : String'
|       s22: Path s7.is_close : Boolean'
|       s20: Path s7.close_at : Option[java.sql.Timestamp']
|       s19: Path s7.user_id : String'
|       s21: Path s7.title : String'
|       s23: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s25, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|   from s25: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t24 : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|     value: StructNode : {s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}
|       s18: Path s25.modify_at : Option[java.sql.Timestamp']
|       s17: Path s25.id : String'
|       s22: Path s25.is_close : Boolean'
|       s20: Path s25.close_at : Option[java.sql.Timestamp']
|       s19: Path s25.user_id : String'
|       s21: Path s25.title : String'
|       s23: Path s25.create_at : java.sql.Timestamp'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s25.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s25.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t24,s18) -> s18, (t24,s17) -> s17, (t24,s21) -> s21, (t24,s20) -> s20, (t24,s23) -> s23, (t24,s22) -> s22, (t24,s19) -> s19)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t24,s18),List(s18)), ((t24,s17),List(s17)), ((t24,s21),List(s21)), ((t24,s20),List(s20)), ((t24,s23),List(s23)), ((t24,s22),List(s22)), ((t24,s19),List(s19)))
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s16: Comprehension s25, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|     from s25: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t24 : Vector[t24<{s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}>]
|       value: StructNode : {s18: Option[java.sql.Timestamp'], s17: String', s22: Boolean', s20: Option[java.sql.Timestamp'], s19: String', s21: String', s23: java.sql.Timestamp'}
|         s18: Path s25.modify_at : Option[java.sql.Timestamp']
|         s17: Path s25.id : String'
|         s22: Path s25.is_close : Boolean'
|         s20: Path s25.close_at : Option[java.sql.Timestamp']
|         s19: Path s25.user_id : String'
|         s21: Path s25.title : String'
|         s23: Path s25.create_at : java.sql.Timestamp'
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s25.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s25.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s16.s17 : String'
|       2: Path s16.s19 : String'
|       3: Path s16.s21 : String'
|       4: Path s16.s22 : Boolean'
|       5: Path s16.s23 : java.sql.Timestamp'
|       6: Path s16.s18 : Option[java.sql.Timestamp']
|       7: Path s16.s20 : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s18 -> 5, s17 -> 0, s22 -> 3, s20 -> 6, s19 -> 1, s21 -> 2, s23 -> 4
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s16: Comprehension s25, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t24<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s25: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t24 : Vector[t24<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s25.id : String'
|         2: Path s25.user_id : String'
|         3: Path s25.title : String'
|         4: Path s25.is_close : Boolean'
|         5: Path s25.create_at : java.sql.Timestamp'
|         6: Path s25.modify_at : Option[java.sql.Timestamp']
|         7: Path s25.close_at : Option[java.sql.Timestamp']
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s25.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s25.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s16.s17 : String'
|       2: Path s16.s19 : String'
|       3: Path s16.s21 : String'
|       4: Path s16.s22 : Boolean'
|       5: Path s16.s23 : java.sql.Timestamp'
|       6: Path s16.s18 : Option[java.sql.Timestamp']
|       7: Path s16.s20 : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s16: Comprehension s25, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t24<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s25: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t24 : Vector[t24<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s25.id : String'
|         2: Path s25.user_id : String'
|         3: Path s25.title : String'
|         4: Path s25.is_close : Boolean'
|         5: Path s25.create_at : java.sql.Timestamp'
|         6: Path s25.modify_at : Option[java.sql.Timestamp']
|         7: Path s25.close_at : Option[java.sql.Timestamp']
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s25.id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|       1: Apply Function not : Boolean'
|         0: Path s25.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s16._1 : String'
|       2: Path s16._2 : String'
|       3: Path s16._3 : String'
|       4: Path s16._4 : Boolean'
|       5: Path s16._5 : java.sql.Timestamp'
|       6: Path s16._6 : Option[java.sql.Timestamp']
|       7: Path s16._7 : Option[java.sql.Timestamp']

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s25, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t24<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s25: Table threads : Vector[@t6<{user_id: String', is_close: Boolean', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], title: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t24 : Vector[t24<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s25.id : String'
|       2: Path s25.user_id : String'
|       3: Path s25.title : String'
|       4: Path s25.is_close : Boolean'
|       5: Path s25.create_at : java.sql.Timestamp'
|       6: Path s25.modify_at : Option[java.sql.Timestamp']
|       7: Path s25.close_at : Option[java.sql.Timestamp']
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s25.id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     1: Apply Function not : Boolean'
|       0: Path s25.is_close : Boolean'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: BaseResultConverter$mcZ$sp idx=4, name=<computed> : Boolean'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : java.sql.Timestamp'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "user_id", "title", "is_close", "create_at", "modify_at", "close_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close")" : Vector[t24<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s16: CompiledStatement "select "id", "user_id", "title", "is_close", "create_at", "modify_at", "close_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close")" : Vector[t24<(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: BaseResultConverter$mcZ$sp idx=4, name=<computed> : Boolean'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : java.sql.Timestamp'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'

date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.396458 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.094292 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    1.472125 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    4.348916 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    1.287875 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    3.933333 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.024084 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    1.070500 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:    4.912125 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    0.087583 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.059625 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.041084 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.013917 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.047875 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    0.237833 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    6.038333 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    5.883125 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.116958 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   12.445500 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.501583 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.014875 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   11.413042 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    4.167333 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   59.608374 ms
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: StreamingInvokerAction$HeadOptionAction [select "id", "user_id", "title", "is_close", "create_at", "modify_at", "close_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close")]
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "user_id", "title", "is_close", "create_at", "modify_at", "close_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close")
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@966971786 wrapping select "id", "user_id", "title", "is_close", "create_at", "modify_at", "close_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close")
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@966971786 wrapping select "id", "user_id", "title", "is_close", "create_at", "modify_at", "close_at" from "threads" where ("id" = 'kHhsGFih4Va4') and (not "is_close")
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 607µs
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------------+------------+--------------+----------+----------------------+-----------+----------\
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1            | 2          | 3            | 4        | 5                    | 6         | 7        |
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id           | user_id    | title        | is_close | create_at            | modify_at | close_at |
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------------+------------+--------------+----------+----------------------+-----------+----------|
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | kHhsGFih4Va4 | ZA91VCAsrS | about scala. | false    | 2022-07-31 23:14:... | NULL      | NULL     |
date:2022-07-31 23:15:17	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------------+------------+--------------+----------+----------------------+-----------+----------/
date:2022-07-31 23:15:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:15:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:16:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:16:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:16:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:16:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:17:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:17:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:17:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:18:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:18:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:18:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:18:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:19:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:19:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:19:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:19:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:20:05	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 23:20:12	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 23:20:12	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 23:20:39	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 23:20:48	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 23:20:48	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 23:21:52	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 23:21:52	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Apply Function exists
|   0: Filter s2
|     from s2: TableExpansion
|       table s3: Table messages
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s3.id : String'
|           2: Path s3.thread_id : String'
|           3: Path s3.user_id : String'
|           4: Path s3.text : String'
|           5: Path s3.is_close : Boolean'
|           6: Path s3.create_at : java.sql.Timestamp'
|           7: Path s3.modify_at : Option[java.sql.Timestamp']
|           8: Path s3.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s2.id : String'
|       1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false)

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Apply Function exists
|   0: Filter s4
|     from s4: TableExpansion
|       table s5: Table messages
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.id : String'
|           2: Path s5.thread_id : String'
|           3: Path s5.user_id : String'
|           4: Path s5.text : String'
|           5: Path s5.is_close : Boolean'
|           6: Path s5.create_at : java.sql.Timestamp'
|           7: Path s5.modify_at : Option[java.sql.Timestamp']
|           8: Path s5.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s4.id : String'
|       1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false)

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.messages)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s7 for Filter s4
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s8 for Pure t9
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>>]
|             value: Ref s7 : @t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             value: StructNode : {user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}
|               user_id: Path s7.user_id : String'
|               modify_at: Path s7.modify_at : Option[java.sql.Timestamp']
|               close_at: Path s7.close_at : Option[java.sql.Timestamp']
|               text: Path s7.text : String'
|               is_close: Path s7.is_close : Boolean'
|               thread_id: Path s7.thread_id : String'
|               id: Path s7.id : String'
|               create_at: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode : ()

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(), UnassignedType)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t9
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols t10
| Path s4.id : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t11
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.user_id with symbols t10
| Path s7.user_id : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.user_id to:
| Path s7.user_id

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols t10
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols t10
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.text with symbols t10
| Path s7.text : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.text to:
| Path s7.text

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols t10
| Path s7.is_close : Boolean'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.thread_id with symbols t10
| Path s7.thread_id : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.thread_id to:
| Path s7.thread_id

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols t10
| Path s7.id : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols t10
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   user_id: Path s7.user_id
|   modify_at: Path s7.modify_at
|   close_at: Path s7.close_at
|   text: Path s7.text
|   is_close: Path s7.is_close
|   thread_id: Path s7.thread_id
|   id: Path s7.id
|   create_at: Path s7.create_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path user_id
| Path s7.user_id

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.user_id
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path modify_at
| Path s7.modify_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.modify_at
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path close_at
| Path s7.close_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.close_at
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path text
| Path s7.text

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.text
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@69555667
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path is_close
| Path s7.is_close

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.is_close
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path thread_id
| Path s7.thread_id

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.thread_id
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s7.id

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s7.id
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path create_at
| Path s7.create_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s7.create_at
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t11: (HashMap(List(modify_at) -> s13, List(id) -> s18, List(create_at) -> s19, List(close_at) -> s14, List(text) -> s15, List(is_close) -> s16, List(thread_id) -> s17, List(user_id) -> s12), UnassignedType)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.user_id
|     s13: Path s7.modify_at
|     s14: Path s7.close_at
|     s15: Path s7.text
|     s16: Path s7.is_close
|     s17: Path s7.thread_id
|     s18: Path s7.id
|     s19: Path s7.create_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s7: Filter s4
|       from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function =
|         0: Path s4.id
|         1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|     select: Pure t11
|       value: StructNode
|         s12: Path s7.user_id
|         s13: Path s7.modify_at
|         s14: Path s7.close_at
|         s15: Path s7.text
|         s16: Path s7.is_close
|         s17: Path s7.thread_id
|         s18: Path s7.id
|         s19: Path s7.create_at

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Apply Function exists
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t9: (Map(List() -> s20), UnassignedType)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t9
|   value: StructNode
|     s20: Apply Function exists
|       0: Bind
|         from s7: Filter s4
|           from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|           where: Apply Function =
|             0: Path s4.id
|             1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|         select: Pure t11
|           value: StructNode
|             s12: Path s7.user_id
|             s13: Path s7.modify_at
|             s14: Path s7.close_at
|             s15: Path s7.text
|             s16: Path s7.is_close
|             s17: Path s7.thread_id
|             s18: Path s7.id
|             s19: Path s7.create_at

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7c73f9d1
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| First : t9<{s20: Boolean}>
|   0: Bind : Vector[t9<{s20: Boolean}>]
|     from s8: Pure t10 : Vector[t10<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s20: Boolean}>]
|       value: StructNode : {s20: Boolean}
|         s20: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s14: Path s7.close_at : Option[java.sql.Timestamp']
|                 s15: Path s7.text : String'
|                 s16: Path s7.is_close : Boolean'
|                 s17: Path s7.thread_id : String'
|                 s18: Path s7.id : String'
|                 s19: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7d763dea
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@65bef131
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlining Pure 'from' in:
| Bind : Vector[t9<{s20: Boolean}>]
|   from s8: Pure t10 : Vector[t10<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s20: Boolean}>]
|     value: StructNode : {s20: Boolean}
|       s20: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.modify_at : Option[java.sql.Timestamp']
|               s14: Path s7.close_at : Option[java.sql.Timestamp']
|               s15: Path s7.text : String'
|               s16: Path s7.is_close : Boolean'
|               s17: Path s7.thread_id : String'
|               s18: Path s7.id : String'
|               s19: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlined Pure 'from' in:
| Bind : Vector[t9<{s20: Boolean}>]
|   from s8: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s20: Boolean}>]
|     value: StructNode : {s20: Boolean}
|       s20: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.modify_at : Option[java.sql.Timestamp']
|               s14: Path s7.close_at : Option[java.sql.Timestamp']
|               s15: Path s7.text : String'
|               s16: Path s7.is_close : Boolean'
|               s17: Path s7.thread_id : String'
|               s18: Path s7.id : String'
|               s19: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| First : t9<{s20: Boolean}>
|   0: Bind : Vector[t9<{s20: Boolean}>]
|     from s8: Pure t21 : Vector[t21<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s20: Boolean}>]
|       value: StructNode : {s20: Boolean}
|         s20: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s14: Path s7.close_at : Option[java.sql.Timestamp']
|                 s15: Path s7.text : String'
|                 s16: Path s7.is_close : Boolean'
|                 s17: Path s7.thread_id : String'
|                 s18: Path s7.id : String'
|                 s19: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@269b658f
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t11, t9, t21; Field refs: (@t6,create_at), (@t6,is_close), (@t6,modify_at), (@t6,id), (@t6,thread_id), (@t6,text), (@t6,close_at), (@t6,user_id)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@45c5adfc
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t9<Boolean>
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s22: Bind : Vector[t9<{s20: Boolean}>]
|       from s8: Pure t21 : Vector[t21<{}>]
|         value: StructNode : {}
|       select: Pure t9 : Vector[t9<{s20: Boolean}>]
|         value: StructNode : {s20: Boolean}
|           s20: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|                   s12: Path s7.user_id : String'
|                   s13: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s14: Path s7.close_at : Option[java.sql.Timestamp']
|                   s15: Path s7.text : String'
|                   s16: Path s7.is_close : Boolean'
|                   s17: Path s7.thread_id : String'
|                   s18: Path s7.id : String'
|                   s19: Path s7.create_at : java.sql.Timestamp'
|     map: Path s22.s20 : Boolean

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@99041c3
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Apply Function exists,s23))
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1bb50eb9
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s22: Bind : Vector[t24<{s23: Boolean}>]
|     from s8: ...
|     select: Pure t24 : Vector[t24<{s23: Boolean}>]
|       value: StructNode : {s23: Boolean}
|         s23: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|                 s12: Path s7.user_id : String'
|                 s13: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s14: Path s7.close_at : Option[java.sql.Timestamp']
|                 s15: Path s7.text : String'
|                 s16: Path s7.is_close : Boolean'
|                 s17: Path s7.thread_id : String'
|                 s18: Path s7.id : String'
|                 s19: Path s7.create_at : java.sql.Timestamp'
|   map: Path s22.s23 : Boolean

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@66ffa75d
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s22: Bind : Vector[t24<{s23: Boolean}>]
|       from s8: Pure t21 : Vector[t21<{}>]
|         value: StructNode : {}
|       select: Pure t24 : Vector[t24<{s23: Boolean}>]
|         value: StructNode : {s23: Boolean}
|           s23: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|                   s12: Path s7.user_id : String'
|                   s13: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s14: Path s7.close_at : Option[java.sql.Timestamp']
|                   s15: Path s7.text : String'
|                   s16: Path s7.is_close : Boolean'
|                   s17: Path s7.thread_id : String'
|                   s18: Path s7.id : String'
|                   s19: Path s7.create_at : java.sql.Timestamp'
|     map: Path s22.s23 : Boolean

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@ebd5c33
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from Pure:
| Pure t21 : Vector[t21<{}>]
|   value: StructNode : {}

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray()
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Pure t21 : Vector[t21<{}>]
|   value: StructNode : {}

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5a89a7e
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s25, None, None, ConstArray(), None, None, None, None, false : Vector[t26<{}>]
|   from s25: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}
|   select: Pure t26 : Vector[t26<{}>]
|     value: StructNode : {}

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map()
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t24<{s23: Boolean}>]
|   from s8: ...
|   select: Pure t24 : Vector[t24<{s23: Boolean}>]
|     value: StructNode : {s23: Boolean}
|       s23: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.modify_at : Option[java.sql.Timestamp']
|               s14: Path s7.close_at : Option[java.sql.Timestamp']
|               s15: Path s7.text : String'
|               s16: Path s7.is_close : Boolean'
|               s17: Path s7.thread_id : String'
|               s18: Path s7.id : String'
|               s19: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s25, None, None, ConstArray(), None, None, None, None, false : Vector[t24<{s23: Boolean}>]
|   from s25: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}
|   select: Pure t24 : Vector[t24<{s23: Boolean}>]
|     value: StructNode : {s23: Boolean}
|       s23: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|               s12: Path s7.user_id : String'
|               s13: Path s7.modify_at : Option[java.sql.Timestamp']
|               s14: Path s7.close_at : Option[java.sql.Timestamp']
|               s15: Path s7.text : String'
|               s16: Path s7.is_close : Boolean'
|               s17: Path s7.thread_id : String'
|               s18: Path s7.id : String'
|               s19: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t24,s23) -> s23)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t24,s23),List(s23)))
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@36db8cb4
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,user_id),List(user_id)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,text),List(text)), ((@t6,is_close),List(is_close)), ((@t6,thread_id),List(thread_id)), ((@t6,create_at),List(create_at)))
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2d05007d
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s27, None, None, ConstArray(), None, None, None, None, false : Vector[t28<{s29: String', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: Boolean', s35: String', s36: java.sql.Timestamp'}>]
|   from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s29: String', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: Boolean', s35: String', s36: java.sql.Timestamp'}>]
|     value: StructNode : {s29: String', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: Boolean', s35: String', s36: java.sql.Timestamp'}
|       s29: Path s27.id : String'
|       s30: Path s27.user_id : String'
|       s31: Path s27.modify_at : Option[java.sql.Timestamp']
|       s32: Path s27.close_at : Option[java.sql.Timestamp']
|       s33: Path s27.text : String'
|       s34: Path s27.is_close : Boolean'
|       s35: Path s27.thread_id : String'
|       s36: Path s27.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,create_at) -> s36, (@t6,is_close) -> s34, (@t6,modify_at) -> s31, (@t6,id) -> s29, (@t6,thread_id) -> s35, (@t6,text) -> s33, (@t6,close_at) -> s32, (@t6,user_id) -> s30)
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@49bd9d2a
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s29: String', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: Boolean', s35: String', s36: java.sql.Timestamp'}>]
|   from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s29: String', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: Boolean', s35: String', s36: java.sql.Timestamp'}>]
|     value: StructNode : {s29: String', s30: String', s31: Option[java.sql.Timestamp'], s32: Option[java.sql.Timestamp'], s33: String', s34: Boolean', s35: String', s36: java.sql.Timestamp'}
|       s29: Path s27.id : String'
|       s30: Path s27.user_id : String'
|       s31: Path s27.modify_at : Option[java.sql.Timestamp']
|       s32: Path s27.close_at : Option[java.sql.Timestamp']
|       s33: Path s27.text : String'
|       s34: Path s27.is_close : Boolean'
|       s35: Path s27.thread_id : String'
|       s36: Path s27.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s27.id : String'
|     1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|       s12: Path s7.user_id : String'
|       s13: Path s7.modify_at : Option[java.sql.Timestamp']
|       s14: Path s7.close_at : Option[java.sql.Timestamp']
|       s15: Path s7.text : String'
|       s16: Path s7.is_close : Boolean'
|       s17: Path s7.thread_id : String'
|       s18: Path s7.id : String'
|       s19: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@8079509
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|   from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|       s12: Path s27.user_id : String'
|       s13: Path s27.modify_at : Option[java.sql.Timestamp']
|       s14: Path s27.close_at : Option[java.sql.Timestamp']
|       s15: Path s27.text : String'
|       s16: Path s27.is_close : Boolean'
|       s17: Path s27.thread_id : String'
|       s18: Path s27.id : String'
|       s19: Path s27.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s27.id : String'
|     1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t11,s18) -> s18, (t11,s17) -> s17, (t11,s13) -> s13, (t11,s15) -> s15, (t11,s16) -> s16, (t11,s12) -> s12, (t11,s14) -> s14, (t11,s19) -> s19)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t11,s18),List(s18)), ((t11,s17),List(s17)), ((t11,s13),List(s13)), ((t11,s15),List(s15)), ((t11,s16),List(s16)), ((t11,s12),List(s12)), ((t11,s14),List(s14)), ((t11,s19),List(s19)))
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@62530691
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s22: Comprehension s25, None, None, ConstArray(), None, None, None, None, false : Vector[t24<{s23: Boolean}>]
|       from s25: Pure t21 : Vector[t21<{}>]
|         value: StructNode : {}
|       select: Pure t24 : Vector[t24<{s23: Boolean}>]
|         value: StructNode : {s23: Boolean}
|           s23: Apply Function exists : Boolean
|             0: Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|               from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<{s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: Option[java.sql.Timestamp'], s14: Option[java.sql.Timestamp'], s15: String', s16: Boolean', s17: String', s18: String', s19: java.sql.Timestamp'}
|                   s12: Path s27.user_id : String'
|                   s13: Path s27.modify_at : Option[java.sql.Timestamp']
|                   s14: Path s27.close_at : Option[java.sql.Timestamp']
|                   s15: Path s27.text : String'
|                   s16: Path s27.is_close : Boolean'
|                   s17: Path s27.thread_id : String'
|                   s18: Path s27.id : String'
|                   s19: Path s27.create_at : java.sql.Timestamp'
|               where: Apply Function = : Boolean
|                 0: Path s27.id : String'
|                 1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|     map: Path s22.s23 : Boolean

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s23 -> 0
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6750f44e
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s22: Comprehension s25, None, None, ConstArray(), None, None, None, None, false : Vector[t24<(Boolean)>]
|     from s25: Pure t21 : Vector[t21<()>]
|       value: ProductNode : ()
|     select: Pure t24 : Vector[t24<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')>]
|             from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|             select: Pure t11 : Vector[t11<(String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')>]
|               value: ProductNode : (String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')
|                 1: Path s27.user_id : String'
|                 2: Path s27.modify_at : Option[java.sql.Timestamp']
|                 3: Path s27.close_at : Option[java.sql.Timestamp']
|                 4: Path s27.text : String'
|                 5: Path s27.is_close : Boolean'
|                 6: Path s27.thread_id : String'
|                 7: Path s27.id : String'
|                 8: Path s27.create_at : java.sql.Timestamp'
|             where: Apply Function = : Boolean
|               0: Path s27.id : String'
|               1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|   map: Path s22.s23 : Boolean

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s22: Comprehension s25, None, None, ConstArray(), None, None, None, None, false : Vector[t24<(Boolean)>]
|       from s25: Pure t21 : Vector[t21<()>]
|         value: ProductNode : ()
|       select: Pure t24 : Vector[t24<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')>]
|               from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<(String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')>]
|                 value: ProductNode : (String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')
|                   1: Path s27.user_id : String'
|                   2: Path s27.modify_at : Option[java.sql.Timestamp']
|                   3: Path s27.close_at : Option[java.sql.Timestamp']
|                   4: Path s27.text : String'
|                   5: Path s27.is_close : Boolean'
|                   6: Path s27.thread_id : String'
|                   7: Path s27.id : String'
|                   8: Path s27.create_at : java.sql.Timestamp'
|               where: Apply Function = : Boolean
|                 0: Path s27.id : String'
|                 1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'
|     map: Path s22._1 : Boolean

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@42217143
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s25, None, None, ConstArray(), None, None, None, None, false : Vector[t24<(Boolean)>]
|   from s25: Pure t21 : Vector[t21<()>]
|     value: ProductNode : ()
|   select: Pure t24 : Vector[t24<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')>]
|           from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|           select: Pure t11 : Vector[t11<(String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')>]
|             value: ProductNode : (String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', Boolean', String', String', java.sql.Timestamp')
|               1: Path s27.user_id : String'
|               2: Path s27.modify_at : Option[java.sql.Timestamp']
|               3: Path s27.close_at : Option[java.sql.Timestamp']
|               4: Path s27.text : String'
|               5: Path s27.is_close : Boolean'
|               6: Path s27.thread_id : String'
|               7: Path s27.id : String'
|               8: Path s27.create_at : java.sql.Timestamp'
|           where: Apply Function = : Boolean
|             0: Path s27.id : String'
|             1: LiteralNode q4gOp9lFM8GoH7H (volatileHint=false) : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@76ba1bd3
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@ca7ec1b
date:2022-07-31 23:21:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select exists(select "user_id", "modify_at", "close_at", "text", "is_close", "thread_id", "id", "create_at" from "messages" where "id" = 'q4gOp9lFM8GoH7H')" : Vector[t24<(Boolean)>]

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s22: CompiledStatement "select exists(select "user_id", "modify_at", "close_at", "text", "is_close", "thread_id", "id", "create_at" from "messages" where "id" = 'q4gOp9lFM8GoH7H')" : Vector[t24<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   19.673125 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    2.330625 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:   10.527375 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   30.587084 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    8.017791 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.956083 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.296125 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:   12.184833 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:  140.098167 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   29.428500 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.218208 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.643958 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.930167 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.805250 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.325958 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    7.388666 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   32.456458 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    4.125750 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   79.104334 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    2.566042 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.282625 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   14.506083 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   56.057500 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  460.510707 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select exists(select "user_id", "modify_at", "close_at", "text", "is_close", "thread_id", "id", "create_at" from "messages" where "id" = 'q4gOp9lFM8GoH7H')]
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select exists(select "user_id", "modify_at", "close_at", "text", "is_close", "thread_id", "id", "create_at" from "messages" where "id" = 'q4gOp9lFM8GoH7H')
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1011441494 wrapping select exists(select "user_id", "modify_at", "close_at", "text", "is_close", "thread_id", "id", "create_at" from "messages" where "id" = 'q4gOp9lFM8GoH7H')
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1011441494 wrapping select exists(select "user_id", "modify_at", "close_at", "text", "is_close", "thread_id", "id", "create_at" from "messages" where "id" = 'q4gOp9lFM8GoH7H')
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------\
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1      |
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | exists |
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------|
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | false  |
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------/
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table messages
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.thread_id : String'
|       3: Path s2.user_id : String'
|       4: Path s2.text : String'
|       5: Path s2.is_close : Boolean'
|       6: Path s2.create_at : java.sql.Timestamp'
|       7: Path s2.modify_at : Option[java.sql.Timestamp']
|       8: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table messages
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.thread_id : String'
|       3: Path s3.user_id : String'
|       4: Path s3.text : String'
|       5: Path s3.is_close : Boolean'
|       6: Path s3.create_at : java.sql.Timestamp'
|       7: Path s3.modify_at : Option[java.sql.Timestamp']
|       8: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, thread_id, user_id, text, is_close, create_at, modify_at, close_at] : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table messages : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.thread_id : String'
|       3: Path s6.user_id : String'
|       4: Path s6.text : String'
|       5: Path s6.is_close : Boolean'
|       6: Path s6.create_at : java.sql.Timestamp'
|       7: Path s6.modify_at : Option[java.sql.Timestamp']
|       8: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn thread_id : String'
|         0: Path s5._2 : String'
|       3: InsertColumn user_id : String'
|         0: Path s5._3 : String'
|       4: InsertColumn text : String'
|         0: Path s5._4 : String'
|       5: InsertColumn is_close : Boolean'
|         0: Path s5._5 : Boolean'
|       6: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._6 : java.sql.Timestamp'
|       7: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._7 : Option[java.sql.Timestamp']
|       8: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._8 : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, thread_id, user_id, text, is_close, create_at, modify_at, close_at] : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table messages : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.thread_id : String'
|     3: Path s6.user_id : String'
|     4: Path s6.text : String'
|     5: Path s6.is_close : Boolean'
|     6: Path s6.create_at : java.sql.Timestamp'
|     7: Path s6.modify_at : Option[java.sql.Timestamp']
|     8: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=8, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=17, name=id : String'
|     2: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=thread_id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=thread_id : String'
|     3: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=user_id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=user_id : String'
|     4: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=text : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=text : String'
|     5: CompoundResultConverter
|       *: BaseResultConverter$mcZ$sp idx=4, name=is_close : Boolean'
|       -: BaseResultConverter$mcZ$sp idx=13, name=is_close : Boolean'
|     6: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=5, name=create_at : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=create_at : java.sql.Timestamp'
|     7: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=15 : java.sql.Timestamp'
|     8: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=16 : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "messages" set "thread_id"=?,"user_id"=?,"text"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "messages" ("id","thread_id","user_id","text","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,? where not exists (select 1 from "messages" where "id"=?)" : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "messages" set "thread_id"=?,"user_id"=?,"text"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "messages" ("id","thread_id","user_id","text","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,? where not exists (select 1 from "messages" where "id"=?)" : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=8, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=17, name=id : String'
|         2: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=thread_id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=thread_id : String'
|         3: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=user_id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=user_id : String'
|         4: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=text : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=text : String'
|         5: CompoundResultConverter
|           *: BaseResultConverter$mcZ$sp idx=4, name=is_close : Boolean'
|           -: BaseResultConverter$mcZ$sp idx=13, name=is_close : Boolean'
|         6: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=5, name=create_at : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=create_at : java.sql.Timestamp'
|         7: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=15 : java.sql.Timestamp'
|         8: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=16 : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.791917 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.223792 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    8.169959 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   21.168667 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   32.354335 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table messages
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.thread_id : String'
|       3: Path s2.user_id : String'
|       4: Path s2.text : String'
|       5: Path s2.is_close : Boolean'
|       6: Path s2.create_at : java.sql.Timestamp'
|       7: Path s2.modify_at : Option[java.sql.Timestamp']
|       8: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table messages
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.thread_id : String'
|       3: Path s3.user_id : String'
|       4: Path s3.text : String'
|       5: Path s3.is_close : Boolean'
|       6: Path s3.create_at : java.sql.Timestamp'
|       7: Path s3.modify_at : Option[java.sql.Timestamp']
|       8: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String')]
|   from s5: Insert allFields=[id, thread_id, user_id, text, is_close, create_at, modify_at, close_at] : (String')
|     table s6: Table messages : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String')
|       1: Path s6.id : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn thread_id : String'
|       3: InsertColumn user_id : String'
|       4: InsertColumn text : String'
|       5: InsertColumn is_close : Boolean'
|       6: InsertColumn create_at : java.sql.Timestamp'
|       7: InsertColumn modify_at : Option[java.sql.Timestamp']
|       8: InsertColumn close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, thread_id, user_id, text, is_close, create_at, modify_at, close_at] : (String')
|   table s6: Table messages : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String')
|     1: Path s6.id : String'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|     2: CompoundResultConverter
|     3: CompoundResultConverter
|     4: CompoundResultConverter
|     5: CompoundResultConverter
|     6: CompoundResultConverter
|     7: CompoundResultConverter
|     8: CompoundResultConverter

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select 1 from "messages" where "id"=?" : (String')

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String')]
|   from s5: CompiledStatement "select 1 from "messages" where "id"=?" : (String')
|   map: CompiledMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|         2: CompoundResultConverter
|         3: CompoundResultConverter
|         4: CompoundResultConverter
|         5: CompoundResultConverter
|         6: CompoundResultConverter
|         7: CompoundResultConverter
|         8: CompoundResultConverter

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.435500 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.126084 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.286125 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.279000 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    9.126709 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table messages
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.thread_id : String'
|       3: Path s2.user_id : String'
|       4: Path s2.text : String'
|       5: Path s2.is_close : Boolean'
|       6: Path s2.create_at : java.sql.Timestamp'
|       7: Path s2.modify_at : Option[java.sql.Timestamp']
|       8: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table messages
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.thread_id : String'
|       3: Path s3.user_id : String'
|       4: Path s3.text : String'
|       5: Path s3.is_close : Boolean'
|       6: Path s3.create_at : java.sql.Timestamp'
|       7: Path s3.modify_at : Option[java.sql.Timestamp']
|       8: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, thread_id, user_id, text, is_close, create_at, modify_at, close_at] : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table messages : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.thread_id : String'
|       3: Path s6.user_id : String'
|       4: Path s6.text : String'
|       5: Path s6.is_close : Boolean'
|       6: Path s6.create_at : java.sql.Timestamp'
|       7: Path s6.modify_at : Option[java.sql.Timestamp']
|       8: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn thread_id : String'
|         0: Path s5._2 : String'
|       3: InsertColumn user_id : String'
|         0: Path s5._3 : String'
|       4: InsertColumn text : String'
|         0: Path s5._4 : String'
|       5: InsertColumn is_close : Boolean'
|         0: Path s5._5 : Boolean'
|       6: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._6 : java.sql.Timestamp'
|       7: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._7 : Option[java.sql.Timestamp']
|       8: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._8 : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, thread_id, user_id, text, is_close, create_at, modify_at, close_at] : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table messages : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.thread_id : String'
|     3: Path s6.user_id : String'
|     4: Path s6.text : String'
|     5: Path s6.is_close : Boolean'
|     6: Path s6.create_at : java.sql.Timestamp'
|     7: Path s6.modify_at : Option[java.sql.Timestamp']
|     8: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=8, name=id : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=thread_id : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=user_id : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=3, name=text : String'
|     5: BaseResultConverter$mcZ$sp idx=4, name=is_close : Boolean'
|     6: SpecializedJdbcResultConverter$$anon$1 idx=5, name=create_at : java.sql.Timestamp'
|     7: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "messages" set "thread_id"=?,"user_id"=?,"text"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "messages" set "thread_id"=?,"user_id"=?,"text"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=8, name=id : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=thread_id : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=user_id : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=3, name=text : String'
|         5: BaseResultConverter$mcZ$sp idx=4, name=is_close : Boolean'
|         6: SpecializedJdbcResultConverter$$anon$1 idx=5, name=create_at : java.sql.Timestamp'
|         7: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'

date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    0.679167 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.130000 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    4.194208 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.469542 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   10.472917 ms
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: InsertOrUpdateAction [update "messages" set "thread_id"=?,"user_id"=?,"text"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "messages" ("id","thread_id","user_id","text","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,? where not exists (select 1 from "messages" where "id"=?)]
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: update "messages" set "thread_id"=?,"user_id"=?,"text"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "messages" ("id","thread_id","user_id","text","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,? where not exists (select 1 from "messages" where "id"=?)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared update: HikariProxyPreparedStatement@294342171 wrapping update "messages" set "thread_id"=?,"user_id"=?,"text"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "messages" ("id","thread_id","user_id","text","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,? where not exists (select 1 from "messages" where "id"=?)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared update: HikariProxyPreparedStatement@294342171 wrapping update "messages" set "thread_id"=?,"user_id"=?,"text"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "messages" ("id","thread_id","user_id","text","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,? where not exists (select 1 from "messages" where "id"=?)
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: /--------------+------------+--------------+---------+-------------------------+-----------+-----------+-----------------+-----------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+-----------------\
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | 1            | 2          | 3            | 4       | 5                       | 6         | 7         | 8               | 9               | 10           | 11         | 12           | 13      | 14                      | 15        | 16        | 17              |
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | String       | String     | String       | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String          | String          | String       | String     | String       | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String          |
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: |--------------+------------+--------------+---------+-------------------------+-----------+-----------+-----------------+-----------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+-----------------|
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | kHhsGFih4Va4 | ZA91VCAsrS | hello world. | false   | 2022-07-31 23:21:52.819 | NULL      | NULL      | q4gOp9lFM8GoH7H | q4gOp9lFM8GoH7H | kHhsGFih4Va4 | ZA91VCAsrS | hello world. | false   | 2022-07-31 23:21:52.819 | NULL      | NULL      | q4gOp9lFM8GoH7H |
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: \--------------+------------+--------------+---------+-------------------------+-----------+-----------+-----------------+-----------------+--------------+------------+--------------+---------+-------------------------+-----------+-----------+-----------------/
date:2022-07-31 23:21:52	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared update took 4ms
date:2022-07-31 23:22:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:22:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:23:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:23:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table messages
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.thread_id : String'
|         3: Path s3.user_id : String'
|         4: Path s3.text : String'
|         5: Path s3.is_close : Boolean'
|         6: Path s3.create_at : java.sql.Timestamp'
|         7: Path s3.modify_at : Option[java.sql.Timestamp']
|         8: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s2.thread_id : String'
|     1: LiteralNode kHhsGFih4Va4 (volatileHint=false)

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table messages
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.thread_id : String'
|         3: Path s5.user_id : String'
|         4: Path s5.text : String'
|         5: Path s5.is_close : Boolean'
|         6: Path s5.create_at : java.sql.Timestamp'
|         7: Path s5.modify_at : Option[java.sql.Timestamp']
|         8: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s4.thread_id : String'
|     1: LiteralNode kHhsGFih4Va4 (volatileHint=false)

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.messages)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.thread_id : String'
|     1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.thread_id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.thread_id : String'
|         3: Path s7.user_id : String'
|         4: Path s7.text : String'
|         5: Path s7.is_close : Boolean'
|         6: Path s7.create_at : java.sql.Timestamp'
|         7: Path s7.modify_at : Option[java.sql.Timestamp']
|         8: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.thread_id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.thread_id : String'
|         3: Path s7.user_id : String'
|         4: Path s7.text : String'
|         5: Path s7.is_close : Boolean'
|         6: Path s7.create_at : java.sql.Timestamp'
|         7: Path s7.modify_at : Option[java.sql.Timestamp']
|         8: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.thread_id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.thread_id : String'
|       3: Path s7.user_id : String'
|       4: Path s7.text : String'
|       5: Path s7.is_close : Boolean'
|       6: Path s7.create_at : java.sql.Timestamp'
|       7: Path s7.modify_at : Option[java.sql.Timestamp']
|       8: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.thread_id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.thread_id : String'
|       3: Path s7.user_id : String'
|       4: Path s7.text : String'
|       5: Path s7.is_close : Boolean'
|       6: Path s7.create_at : java.sql.Timestamp'
|       7: Path s7.modify_at : Option[java.sql.Timestamp']
|       8: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.thread_id with symbols 
| Path s4.thread_id : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.thread_id to:
| Path s4.thread_id

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.thread_id with symbols 
| Path s7.thread_id : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.thread_id to:
| Path s7.thread_id

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.user_id with symbols 
| Path s7.user_id : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.user_id to:
| Path s7.user_id

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.text with symbols 
| Path s7.text : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.text to:
| Path s7.text

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.thread_id
|   3: Path s7.user_id
|   4: Path s7.text
|   5: Path s7.is_close
|   6: Path s7.create_at
|   7: Path s7.modify_at
|   8: Path s7.close_at

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.thread_id

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.thread_id
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.user_id

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.user_id
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.text

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.text
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.is_close

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.is_close
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.create_at

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.create_at
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.modify_at

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.modify_at
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _8
| Path s7.close_at

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.close_at
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_7) -> s15, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11, List(_8) -> s16, List(_6) -> s14), UnassignedType)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.thread_id
|     s11: Path s7.user_id
|     s12: Path s7.text
|     s13: Path s7.is_close
|     s14: Path s7.create_at
|     s15: Path s7.modify_at
|     s16: Path s7.close_at

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: Boolean', s14: java.sql.Timestamp', s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.thread_id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: Boolean', s14: java.sql.Timestamp', s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: Boolean', s14: java.sql.Timestamp', s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.thread_id : String'
|       s11: Path s7.user_id : String'
|       s12: Path s7.text : String'
|       s13: Path s7.is_close : Boolean'
|       s14: Path s7.create_at : java.sql.Timestamp'
|       s15: Path s7.modify_at : Option[java.sql.Timestamp']
|       s16: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,modify_at), (@t6,thread_id), (@t6,text), (@t6,is_close), (@t6,id), (@t6,create_at), (@t6,user_id), (@t6,close_at)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s17: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: Boolean', s14: java.sql.Timestamp', s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.thread_id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: Boolean', s14: java.sql.Timestamp', s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: Boolean', s14: java.sql.Timestamp', s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.thread_id : String'
|         s11: Path s7.user_id : String'
|         s12: Path s7.text : String'
|         s13: Path s7.is_close : Boolean'
|         s14: Path s7.create_at : java.sql.Timestamp'
|         s15: Path s7.modify_at : Option[java.sql.Timestamp']
|         s16: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s17.s9 : String'
|       2: Path s17.s10 : String'
|       3: Path s17.s11 : String'
|       4: Path s17.s12 : String'
|       5: Path s17.s13 : Boolean'
|       6: Path s17.s14 : java.sql.Timestamp'
|       7: Path s17.s15 : Option[java.sql.Timestamp']
|       8: Path s17.s16 : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s18), 5 -> (Path s7.create_at,s19), 1 -> (Path s7.thread_id,s20), 6 -> (Path s7.modify_at,s21), 2 -> (Path s7.user_id,s22), 7 -> (Path s7.close_at,s23), 3 -> (Path s7.text,s24), 4 -> (Path s7.is_close,s25))
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s17: Bind : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|     from s7: ...
|     select: Pure t26 : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|       value: StructNode : {s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}
|         s20: Path s7.thread_id : String'
|         s18: Path s7.id : String'
|         s25: Path s7.is_close : Boolean'
|         s22: Path s7.user_id : String'
|         s21: Path s7.modify_at : Option[java.sql.Timestamp']
|         s24: Path s7.text : String'
|         s23: Path s7.close_at : Option[java.sql.Timestamp']
|         s19: Path s7.create_at : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s17.s18 : String'
|       2: Path s17.s20 : String'
|       3: Path s17.s22 : String'
|       4: Path s17.s24 : String'
|       5: Path s17.s25 : Boolean'
|       6: Path s17.s19 : java.sql.Timestamp'
|       7: Path s17.s21 : Option[java.sql.Timestamp']
|       8: Path s17.s23 : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s17: Bind : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|     from s7: Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.thread_id : String'
|         1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|     select: Pure t26 : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|       value: StructNode : {s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}
|         s20: Path s7.thread_id : String'
|         s18: Path s7.id : String'
|         s25: Path s7.is_close : Boolean'
|         s22: Path s7.user_id : String'
|         s21: Path s7.modify_at : Option[java.sql.Timestamp']
|         s24: Path s7.text : String'
|         s23: Path s7.close_at : Option[java.sql.Timestamp']
|         s19: Path s7.create_at : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s17.s18 : String'
|       2: Path s17.s20 : String'
|       3: Path s17.s22 : String'
|       4: Path s17.s24 : String'
|       5: Path s17.s25 : Boolean'
|       6: Path s17.s19 : java.sql.Timestamp'
|       7: Path s17.s21 : Option[java.sql.Timestamp']
|       8: Path s17.s23 : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,thread_id),List(thread_id)), ((@t6,id),List(id)), ((@t6,is_close),List(is_close)), ((@t6,user_id),List(user_id)), ((@t6,modify_at),List(modify_at)), ((@t6,text),List(text)), ((@t6,close_at),List(close_at)), ((@t6,create_at),List(create_at)))
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s27, None, None, ConstArray(), None, None, None, None, false : Vector[t28<{s29: String', s30: String', s31: Boolean', s32: String', s33: Option[java.sql.Timestamp'], s34: String', s35: Option[java.sql.Timestamp'], s36: java.sql.Timestamp'}>]
|   from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s29: String', s30: String', s31: Boolean', s32: String', s33: Option[java.sql.Timestamp'], s34: String', s35: Option[java.sql.Timestamp'], s36: java.sql.Timestamp'}>]
|     value: StructNode : {s29: String', s30: String', s31: Boolean', s32: String', s33: Option[java.sql.Timestamp'], s34: String', s35: Option[java.sql.Timestamp'], s36: java.sql.Timestamp'}
|       s29: Path s27.thread_id : String'
|       s30: Path s27.id : String'
|       s31: Path s27.is_close : Boolean'
|       s32: Path s27.user_id : String'
|       s33: Path s27.modify_at : Option[java.sql.Timestamp']
|       s34: Path s27.text : String'
|       s35: Path s27.close_at : Option[java.sql.Timestamp']
|       s36: Path s27.create_at : java.sql.Timestamp'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,modify_at) -> s33, (@t6,thread_id) -> s29, (@t6,text) -> s34, (@t6,is_close) -> s31, (@t6,id) -> s30, (@t6,create_at) -> s36, (@t6,user_id) -> s32, (@t6,close_at) -> s35)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.thread_id : String'
|     1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s29: String', s30: String', s31: Boolean', s32: String', s33: Option[java.sql.Timestamp'], s34: String', s35: Option[java.sql.Timestamp'], s36: java.sql.Timestamp'}>]
|   from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s29: String', s30: String', s31: Boolean', s32: String', s33: Option[java.sql.Timestamp'], s34: String', s35: Option[java.sql.Timestamp'], s36: java.sql.Timestamp'}>]
|     value: StructNode : {s29: String', s30: String', s31: Boolean', s32: String', s33: Option[java.sql.Timestamp'], s34: String', s35: Option[java.sql.Timestamp'], s36: java.sql.Timestamp'}
|       s29: Path s27.thread_id : String'
|       s30: Path s27.id : String'
|       s31: Path s27.is_close : Boolean'
|       s32: Path s27.user_id : String'
|       s33: Path s27.modify_at : Option[java.sql.Timestamp']
|       s34: Path s27.text : String'
|       s35: Path s27.close_at : Option[java.sql.Timestamp']
|       s36: Path s27.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s27.thread_id : String'
|     1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t26 : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|     value: StructNode : {s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}
|       s20: Path s7.thread_id : String'
|       s18: Path s7.id : String'
|       s25: Path s7.is_close : Boolean'
|       s22: Path s7.user_id : String'
|       s21: Path s7.modify_at : Option[java.sql.Timestamp']
|       s24: Path s7.text : String'
|       s23: Path s7.close_at : Option[java.sql.Timestamp']
|       s19: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|   from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t26 : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|     value: StructNode : {s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}
|       s20: Path s27.thread_id : String'
|       s18: Path s27.id : String'
|       s25: Path s27.is_close : Boolean'
|       s22: Path s27.user_id : String'
|       s21: Path s27.modify_at : Option[java.sql.Timestamp']
|       s24: Path s27.text : String'
|       s23: Path s27.close_at : Option[java.sql.Timestamp']
|       s19: Path s27.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s27.thread_id : String'
|     1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t26,s22) -> s22, (t26,s21) -> s21, (t26,s24) -> s24, (t26,s18) -> s18, (t26,s25) -> s25, (t26,s19) -> s19, (t26,s23) -> s23, (t26,s20) -> s20)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t26,s22),List(s22)), ((t26,s21),List(s21)), ((t26,s24),List(s24)), ((t26,s18),List(s18)), ((t26,s25),List(s25)), ((t26,s19),List(s19)), ((t26,s23),List(s23)), ((t26,s20),List(s20)))
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s17: Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|     from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t26 : Vector[t26<{s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}>]
|       value: StructNode : {s20: String', s18: String', s25: Boolean', s22: String', s21: Option[java.sql.Timestamp'], s24: String', s23: Option[java.sql.Timestamp'], s19: java.sql.Timestamp'}
|         s20: Path s27.thread_id : String'
|         s18: Path s27.id : String'
|         s25: Path s27.is_close : Boolean'
|         s22: Path s27.user_id : String'
|         s21: Path s27.modify_at : Option[java.sql.Timestamp']
|         s24: Path s27.text : String'
|         s23: Path s27.close_at : Option[java.sql.Timestamp']
|         s19: Path s27.create_at : java.sql.Timestamp'
|     where: Apply Function = : Boolean
|       0: Path s27.thread_id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s17.s18 : String'
|       2: Path s17.s20 : String'
|       3: Path s17.s22 : String'
|       4: Path s17.s24 : String'
|       5: Path s17.s25 : Boolean'
|       6: Path s17.s19 : java.sql.Timestamp'
|       7: Path s17.s21 : Option[java.sql.Timestamp']
|       8: Path s17.s23 : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 1, s18 -> 0, s25 -> 4, s22 -> 2, s21 -> 6, s24 -> 3, s23 -> 7, s19 -> 5
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t26<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t26 : Vector[t26<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s27.id : String'
|         2: Path s27.thread_id : String'
|         3: Path s27.user_id : String'
|         4: Path s27.text : String'
|         5: Path s27.is_close : Boolean'
|         6: Path s27.create_at : java.sql.Timestamp'
|         7: Path s27.modify_at : Option[java.sql.Timestamp']
|         8: Path s27.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s27.thread_id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s17.s18 : String'
|       2: Path s17.s20 : String'
|       3: Path s17.s22 : String'
|       4: Path s17.s24 : String'
|       5: Path s17.s25 : Boolean'
|       6: Path s17.s19 : java.sql.Timestamp'
|       7: Path s17.s21 : Option[java.sql.Timestamp']
|       8: Path s17.s23 : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s17: Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t26<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t26 : Vector[t26<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s27.id : String'
|         2: Path s27.thread_id : String'
|         3: Path s27.user_id : String'
|         4: Path s27.text : String'
|         5: Path s27.is_close : Boolean'
|         6: Path s27.create_at : java.sql.Timestamp'
|         7: Path s27.modify_at : Option[java.sql.Timestamp']
|         8: Path s27.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s27.thread_id : String'
|       1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s17._1 : String'
|       2: Path s17._2 : String'
|       3: Path s17._3 : String'
|       4: Path s17._4 : String'
|       5: Path s17._5 : Boolean'
|       6: Path s17._6 : java.sql.Timestamp'
|       7: Path s17._7 : Option[java.sql.Timestamp']
|       8: Path s17._8 : Option[java.sql.Timestamp']

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s27, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t26<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s27: Table messages : Vector[@t6<{user_id: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], text: String', is_close: Boolean', thread_id: String', id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t26 : Vector[t26<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s27.id : String'
|       2: Path s27.thread_id : String'
|       3: Path s27.user_id : String'
|       4: Path s27.text : String'
|       5: Path s27.is_close : Boolean'
|       6: Path s27.create_at : java.sql.Timestamp'
|       7: Path s27.modify_at : Option[java.sql.Timestamp']
|       8: Path s27.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s27.thread_id : String'
|     1: LiteralNode kHhsGFih4Va4 (volatileHint=false) : String'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: BaseResultConverter$mcZ$sp idx=5, name=<computed> : Boolean'
|     6: SpecializedJdbcResultConverter$$anon$1 idx=6, name=<computed> : java.sql.Timestamp'
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "thread_id", "user_id", "text", "is_close", "create_at", "modify_at", "close_at" from "messages" where "thread_id" = 'kHhsGFih4Va4'" : Vector[t26<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s17: CompiledStatement "select "id", "thread_id", "user_id", "text", "is_close", "create_at", "modify_at", "close_at" from "messages" where "thread_id" = 'kHhsGFih4Va4'" : Vector[t26<(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: BaseResultConverter$mcZ$sp idx=5, name=<computed> : Boolean'
|         6: SpecializedJdbcResultConverter$$anon$1 idx=6, name=<computed> : java.sql.Timestamp'
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'

date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.188417 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.098541 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.783750 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   10.751125 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    2.738459 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.875084 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.043792 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    1.792125 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:    8.347500 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    0.540875 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.705417 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.092875 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.025666 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.068458 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    2.247875 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    2.988667 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    8.793875 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.778291 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:    8.876917 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.620791 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.031542 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    8.571959 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    4.692916 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   67.654917 ms
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "thread_id", "user_id", "text", "is_close", "create_at", "modify_at", "close_at" from "messages" where "thread_id" = 'kHhsGFih4Va4']
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "thread_id", "user_id", "text", "is_close", "create_at", "modify_at", "close_at" from "messages" where "thread_id" = 'kHhsGFih4Va4'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1124982559 wrapping select "id", "thread_id", "user_id", "text", "is_close", "create_at", "modify_at", "close_at" from "messages" where "thread_id" = 'kHhsGFih4Va4'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1124982559 wrapping select "id", "thread_id", "user_id", "text", "is_close", "create_at", "modify_at", "close_at" from "messages" where "thread_id" = 'kHhsGFih4Va4'
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 715µs
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /-----------------+--------------+------------+--------------+----------+----------------------+-----------+----------\
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1               | 2            | 3          | 4            | 5        | 6                    | 7         | 8        |
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id              | thread_id    | user_id    | text         | is_close | create_at            | modify_at | close_at |
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |-----------------+--------------+------------+--------------+----------+----------------------+-----------+----------|
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | q4gOp9lFM8GoH7H | kHhsGFih4Va4 | ZA91VCAsrS | hello world. | false    | 2022-07-31 23:21:... | NULL      | NULL     |
date:2022-07-31 23:24:04	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \-----------------+--------------+------------+--------------+----------+----------------------+-----------+----------/
date:2022-07-31 23:24:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:24:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:25:22	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:25:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:26:04	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 23:26:10	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 23:26:10	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 23:27:10	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 23:27:10	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.first_name : String'
|         3: Path s3.last_name : String'
|         4: Path s3.email_address : String'
|         5: Path s3.password : String'
|         6: Path s3.is_close : Boolean'
|         7: Path s3.create_at : java.sql.Timestamp'
|         8: Path s3.modify_at : Option[java.sql.Timestamp']
|         9: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s2.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.first_name : String'
|         3: Path s5.last_name : String'
|         4: Path s5.email_address : String'
|         5: Path s5.password : String'
|         6: Path s5.is_close : Boolean'
|         7: Path s5.create_at : java.sql.Timestamp'
|         8: Path s5.modify_at : Option[java.sql.Timestamp']
|         9: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false)

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@73758b6
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols 
| Path s4.id : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols 
| Path s7.first_name : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols 
| Path s7.last_name : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols 
| Path s7.email_address : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols 
| Path s7.password : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.first_name
|   3: Path s7.last_name
|   4: Path s7.email_address
|   5: Path s7.password
|   6: Path s7.is_close
|   7: Path s7.create_at
|   8: Path s7.modify_at
|   9: Path s7.close_at

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.first_name

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.first_name
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.last_name

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.last_name
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.email_address

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.email_address
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.password

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2d2f63c1
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.password
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.is_close

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.create_at

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.create_at
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _8
| Path s7.modify_at

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.modify_at
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _9
| Path s7.close_at

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.close_at
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_9) -> s17, List(_7) -> s15, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11, List(_8) -> s16, List(_6) -> s14), UnassignedType)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.first_name
|     s11: Path s7.last_name
|     s12: Path s7.email_address
|     s13: Path s7.password
|     s14: Path s7.is_close
|     s15: Path s7.create_at
|     s16: Path s7.modify_at
|     s17: Path s7.close_at

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@77fbe93a
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@64f926e6
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.first_name : String'
|       s11: Path s7.last_name : String'
|       s12: Path s7.email_address : String'
|       s13: Path s7.password : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.create_at : java.sql.Timestamp'
|       s16: Path s7.modify_at : Option[java.sql.Timestamp']
|       s17: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,last_name), (@t6,close_at), (@t6,create_at), (@t6,is_close), (@t6,modify_at), (@t6,email_address), (@t6,first_name), (@t6,password), (@t6,id)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@59b62027
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.first_name : String'
|         s11: Path s7.last_name : String'
|         s12: Path s7.email_address : String'
|         s13: Path s7.password : String'
|         s14: Path s7.is_close : Boolean'
|         s15: Path s7.create_at : java.sql.Timestamp'
|         s16: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s9 : String'
|       2: Path s18.s10 : String'
|       3: Path s18.s11 : String'
|       4: Path s18.s12 : String'
|       5: Path s18.s13 : String'
|       6: Path s18.s14 : Boolean'
|       7: Path s18.s15 : java.sql.Timestamp'
|       8: Path s18.s16 : Option[java.sql.Timestamp']
|       9: Path s18.s17 : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@fd171bb
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s19), 5 -> (Path s7.is_close,s20), 1 -> (Path s7.first_name,s21), 6 -> (Path s7.create_at,s22), 2 -> (Path s7.last_name,s23), 7 -> (Path s7.modify_at,s24), 3 -> (Path s7.email_address,s25), 8 -> (Path s7.close_at,s26), 4 -> (Path s7.password,s27))
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@27cbfb42
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|     from s7: ...
|     select: Pure t28 : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|       value: StructNode : {s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}
|         s25: Path s7.email_address : String'
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s23: Path s7.last_name : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s21: Path s7.first_name : String'
|         s27: Path s7.password : String'
|         s19: Path s7.id : String'
|         s20: Path s7.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|     select: Pure t28 : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|       value: StructNode : {s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}
|         s25: Path s7.email_address : String'
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s23: Path s7.last_name : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s21: Path s7.first_name : String'
|         s27: Path s7.password : String'
|         s19: Path s7.id : String'
|         s20: Path s7.is_close : Boolean'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@a28374b
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@62778931
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,email_address),List(email_address)), ((@t6,create_at),List(create_at)), ((@t6,close_at),List(close_at)), ((@t6,last_name),List(last_name)), ((@t6,modify_at),List(modify_at)), ((@t6,first_name),List(first_name)), ((@t6,password),List(password)), ((@t6,is_close),List(is_close)))
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@66af706d
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: java.sql.Timestamp', s34: Option[java.sql.Timestamp'], s35: String', s36: Option[java.sql.Timestamp'], s37: String', s38: String', s39: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: java.sql.Timestamp', s34: Option[java.sql.Timestamp'], s35: String', s36: Option[java.sql.Timestamp'], s37: String', s38: String', s39: Boolean'}>]
|     value: StructNode : {s31: String', s32: String', s33: java.sql.Timestamp', s34: Option[java.sql.Timestamp'], s35: String', s36: Option[java.sql.Timestamp'], s37: String', s38: String', s39: Boolean'}
|       s31: Path s29.id : String'
|       s32: Path s29.email_address : String'
|       s33: Path s29.create_at : java.sql.Timestamp'
|       s34: Path s29.close_at : Option[java.sql.Timestamp']
|       s35: Path s29.last_name : String'
|       s36: Path s29.modify_at : Option[java.sql.Timestamp']
|       s37: Path s29.first_name : String'
|       s38: Path s29.password : String'
|       s39: Path s29.is_close : Boolean'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,last_name) -> s35, (@t6,close_at) -> s34, (@t6,create_at) -> s33, (@t6,is_close) -> s39, (@t6,modify_at) -> s36, (@t6,email_address) -> s32, (@t6,first_name) -> s37, (@t6,password) -> s38, (@t6,id) -> s31)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1e469611
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: java.sql.Timestamp', s34: Option[java.sql.Timestamp'], s35: String', s36: Option[java.sql.Timestamp'], s37: String', s38: String', s39: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: java.sql.Timestamp', s34: Option[java.sql.Timestamp'], s35: String', s36: Option[java.sql.Timestamp'], s37: String', s38: String', s39: Boolean'}>]
|     value: StructNode : {s31: String', s32: String', s33: java.sql.Timestamp', s34: Option[java.sql.Timestamp'], s35: String', s36: Option[java.sql.Timestamp'], s37: String', s38: String', s39: Boolean'}
|       s31: Path s29.id : String'
|       s32: Path s29.email_address : String'
|       s33: Path s29.create_at : java.sql.Timestamp'
|       s34: Path s29.close_at : Option[java.sql.Timestamp']
|       s35: Path s29.last_name : String'
|       s36: Path s29.modify_at : Option[java.sql.Timestamp']
|       s37: Path s29.first_name : String'
|       s38: Path s29.password : String'
|       s39: Path s29.is_close : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|   from s7: ...
|   select: Pure t28 : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|     value: StructNode : {s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}
|       s25: Path s7.email_address : String'
|       s22: Path s7.create_at : java.sql.Timestamp'
|       s26: Path s7.close_at : Option[java.sql.Timestamp']
|       s23: Path s7.last_name : String'
|       s24: Path s7.modify_at : Option[java.sql.Timestamp']
|       s21: Path s7.first_name : String'
|       s27: Path s7.password : String'
|       s19: Path s7.id : String'
|       s20: Path s7.is_close : Boolean'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|     value: StructNode : {s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}
|       s25: Path s29.email_address : String'
|       s22: Path s29.create_at : java.sql.Timestamp'
|       s26: Path s29.close_at : Option[java.sql.Timestamp']
|       s23: Path s29.last_name : String'
|       s24: Path s29.modify_at : Option[java.sql.Timestamp']
|       s21: Path s29.first_name : String'
|       s27: Path s29.password : String'
|       s19: Path s29.id : String'
|       s20: Path s29.is_close : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t28,s25) -> s25, (t28,s24) -> s24, (t28,s22) -> s22, (t28,s27) -> s27, (t28,s20) -> s20, (t28,s21) -> s21, (t28,s23) -> s23, (t28,s26) -> s26, (t28,s19) -> s19)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t28,s25),List(s25)), ((t28,s24),List(s24)), ((t28,s22),List(s22)), ((t28,s27),List(s27)), ((t28,s20),List(s20)), ((t28,s21),List(s21)), ((t28,s23),List(s23)), ((t28,s26),List(s26)), ((t28,s19),List(s19)))
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@551f68fd
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<{s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}>]
|       value: StructNode : {s25: String', s22: java.sql.Timestamp', s26: Option[java.sql.Timestamp'], s23: String', s24: Option[java.sql.Timestamp'], s21: String', s27: String', s19: String', s20: Boolean'}
|         s25: Path s29.email_address : String'
|         s22: Path s29.create_at : java.sql.Timestamp'
|         s26: Path s29.close_at : Option[java.sql.Timestamp']
|         s23: Path s29.last_name : String'
|         s24: Path s29.modify_at : Option[java.sql.Timestamp']
|         s21: Path s29.first_name : String'
|         s27: Path s29.password : String'
|         s19: Path s29.id : String'
|         s20: Path s29.is_close : Boolean'
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s25 -> 3, s22 -> 6, s26 -> 8, s23 -> 2, s24 -> 7, s21 -> 1, s27 -> 4, s19 -> 0, s20 -> 5
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@bff4d6e
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@164e7864
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18._1 : String'
|       2: Path s18._2 : String'
|       3: Path s18._3 : String'
|       4: Path s18._4 : String'
|       5: Path s18._5 : String'
|       6: Path s18._6 : Boolean'
|       7: Path s18._7 : java.sql.Timestamp'
|       8: Path s18._8 : Option[java.sql.Timestamp']
|       9: Path s18._9 : Option[java.sql.Timestamp']

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3c9282a2
date:2022-07-31 23:27:10	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s29.id : String'
|       2: Path s29.first_name : String'
|       3: Path s29.last_name : String'
|       4: Path s29.email_address : String'
|       5: Path s29.password : String'
|       6: Path s29.is_close : Boolean'
|       7: Path s29.create_at : java.sql.Timestamp'
|       8: Path s29.modify_at : Option[java.sql.Timestamp']
|       9: Path s29.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode ZA91VCAsrS (volatileHint=false) : String'

date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@12e44d4d
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6381f642
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6e92f0e
date:2022-07-31 23:27:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2e462ae3
date:2022-07-31 23:27:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1e789443
date:2022-07-31 23:27:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|     6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|         6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   23.442500 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    9.560959 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    5.999625 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   40.042958 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:   17.336916 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:   16.041916 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    1.147333 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    8.899166 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:  118.382458 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    3.761666 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    2.169291 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.187458 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.595375 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.460791 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.847000 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:   12.466000 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   27.535583 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    3.156958 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   51.805333 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.976708 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.407333 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   21.394583 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   63.378958 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  435.996868 ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: StreamingInvokerAction$HeadOptionAction [select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS']
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@572005923 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@572005923 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'ZA91VCAsrS'
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------\
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1          | 2          | 3         | 4                | 5        | 6        | 7                    | 8         | 9        |
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id         | first_name | last_name | email_address    | password | is_close | create_at            | modify_at | close_at |
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------|
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | ZA91VCAsrS | asada      | guitar    | info@example.com | password | false    | 2022-07-31 22:02:... | NULL      | NULL     |
date:2022-07-31 23:27:11	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------/
date:2022-07-31 23:27:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:28:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:28:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:29:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:29:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:30:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:30:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:31:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:31:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:32:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:32:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:33:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:33:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:34:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:34:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:35:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:35:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:36:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:36:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:37:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:37:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:38:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:38:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:39:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:39:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:40:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:40:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:41:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:41:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:42:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:42:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:43:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:43:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:44:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:44:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:45:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:45:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:46:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:46:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:47:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:47:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:48:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:48:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:49:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:49:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:50:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:50:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:51:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:51:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:52:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:52:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:53:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:54:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:54:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:55:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:55:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:56:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:56:27	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@2d2f63c1: (connection has passed maxLifetime)
date:2022-07-31 23:56:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@25f587ce
date:2022-07-31 23:56:28	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@6381f642: (connection has passed maxLifetime)
date:2022-07-31 23:56:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2b326d00
date:2022-07-31 23:56:30	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@66af706d: (connection has passed maxLifetime)
date:2022-07-31 23:56:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2f0decbe
date:2022-07-31 23:56:33	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@fd171bb: (connection has passed maxLifetime)
date:2022-07-31 23:56:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6a0f673b
date:2022-07-31 23:56:34	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@164e7864: (connection has passed maxLifetime)
date:2022-07-31 23:56:34	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@63cd5643
date:2022-07-31 23:56:34	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@6e92f0e: (connection has passed maxLifetime)
date:2022-07-31 23:56:34	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5b2f6d57
date:2022-07-31 23:56:36	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@551f68fd: (connection has passed maxLifetime)
date:2022-07-31 23:56:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1b070290
date:2022-07-31 23:56:37	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@27cbfb42: (connection has passed maxLifetime)
date:2022-07-31 23:56:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@a209874
date:2022-07-31 23:56:39	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@a28374b: (connection has passed maxLifetime)
date:2022-07-31 23:56:39	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@356b83d
date:2022-07-31 23:56:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:56:42	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@3c9282a2: (connection has passed maxLifetime)
date:2022-07-31 23:56:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@23b338d5
date:2022-07-31 23:56:43	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@12e44d4d: (connection has passed maxLifetime)
date:2022-07-31 23:56:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3adb1
date:2022-07-31 23:56:44	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@73758b6: (connection has passed maxLifetime)
date:2022-07-31 23:56:44	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@e6e66fd
date:2022-07-31 23:56:44	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@77fbe93a: (connection has passed maxLifetime)
date:2022-07-31 23:56:44	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@38cfa05d
date:2022-07-31 23:56:51	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@2e462ae3: (connection has passed maxLifetime)
date:2022-07-31 23:56:51	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@363902dd
date:2022-07-31 23:56:53	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@1e789443: (connection has passed maxLifetime)
date:2022-07-31 23:56:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@38feea6a
date:2022-07-31 23:56:57	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@64f926e6: (connection has passed maxLifetime)
date:2022-07-31 23:56:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3cc169ad
date:2022-07-31 23:57:01	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@59b62027: (connection has passed maxLifetime)
date:2022-07-31 23:57:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@79c3e051
date:2022-07-31 23:57:04	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@62778931: (connection has passed maxLifetime)
date:2022-07-31 23:57:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7922a5e
date:2022-07-31 23:57:05	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@bff4d6e: (connection has passed maxLifetime)
date:2022-07-31 23:57:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@48f03d7c
date:2022-07-31 23:57:10	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@1e469611: (connection has passed maxLifetime)
date:2022-07-31 23:57:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@f5d996b
date:2022-07-31 23:57:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:57:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:58:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:58:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:59:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 23:59:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
