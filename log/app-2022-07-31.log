date:2022-07-31 18:10:44	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:10:44	level: WARN 	logger: akka.util.ManifestInfo                          	message: You are using version 2.6.19 of Akka, but it appears you (perhaps indirectly) also depend on older versions of related artifacts. You can solve this by adding an explicit dependency on version 2.6.19 of the [akka-protobuf-v3, akka-stream] artifacts to your project. Here's a complete collection of detected artifacts: (2.6.16, [akka-protobuf-v3, akka-stream]), (2.6.19, [akka-actor, akka-actor-typed, akka-slf4j]). See also: https://doc.akka.io/docs/akka/current/common/binary-compatibility-rules.html#mixed-versioning-is-not-allowed
date:2022-07-31 18:10:44	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [ActorSystemTerminateReason]
date:2022-07-31 18:12:47	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:12:47	level: WARN 	logger: akka.util.ManifestInfo                          	message: You are using version 2.6.19 of Akka, but it appears you (perhaps indirectly) also depend on older versions of related artifacts. You can solve this by adding an explicit dependency on version 2.6.19 of the [akka-stream] artifacts to your project. Here's a complete collection of detected artifacts: (2.6.16, [akka-stream]), (2.6.19, [akka-actor, akka-actor-typed, akka-protobuf-v3, akka-slf4j]). See also: https://doc.akka.io/docs/akka/current/common/binary-compatibility-rules.html#mixed-versioning-is-not-allowed
date:2022-07-31 18:12:47	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [ActorSystemTerminateReason]
date:2022-07-31 18:15:05	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:16:29	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:18:23	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:18:23	level: WARN 	logger: slick.basic.DatabaseConfig                      	message: Use `db.slick.profile` instead of `db.slick.driver`. The latter is deprecated since Slick 3.2 and will be removed.
date:2022-07-31 18:19:14	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:19:14	level: WARN 	logger: slick.basic.DatabaseConfig                      	message: Use `db.slick.profile` instead of `db.slick.driver`. The latter is deprecated since Slick 3.2 and will be removed.
date:2022-07-31 18:22:05	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:22:05	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 18:24:28	level: ERROR	logger: akka.actor.ActorSystemImpl                      	message: Uncaught error from thread [bbsApplication-akka.actor.default-dispatcher-9]: null, shutting down JVM since 'akka.jvm-exit-on-fatal-error' is enabled for ActorSystem[bbsApplication]
java.lang.ExceptionInInitializerError: null
	at com.github.asadaGuitar.bbs.interfaces.controllers.validations.Validations$.validateEmailAddress(Validations.scala:41)
	at com.github.asadaGuitar.bbs.interfaces.controllers.validations.Validations$.validateSignupRequestForm(Validations.scala:55)
	at com.github.asadaGuitar.bbs.interfaces.controllers.validations.ValidationDirectives.validateSignupRequestForm(ValidationDirectives.scala:27)
	at com.github.asadaGuitar.bbs.interfaces.controllers.validations.ValidationDirectives.validateSignupRequestForm$(ValidationDirectives.scala:26)
	at com.github.asadaGuitar.bbs.interfaces.controllers.UsersController.validateSignupRequestForm(UsersController.scala:19)
	at com.github.asadaGuitar.bbs.interfaces.controllers.UsersController.$anonfun$signupRouter$4(UsersController.scala:32)
	at akka.http.scaladsl.server.util.ApplyConverterInstances$$anon$1.$anonfun$apply$1(ApplyConverterInstances.scala:14)
	at akka.http.scaladsl.server.ConjunctionMagnet$$anon$2.$anonfun$apply$3(Directive.scala:234)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$mapRouteResult$2(BasicDirectives.scala:68)
	at akka.http.scaladsl.server.directives.FutureDirectives.$anonfun$onComplete$3(FutureDirectives.scala:37)
	at akka.http.scaladsl.util.FastFuture$.$anonfun$transformWith$1(FastFuture.scala:36)
	at akka.http.scaladsl.util.FastFuture$.strictTransform$1(FastFuture.scala:40)
	at akka.http.scaladsl.util.FastFuture$.transformWith$extension(FastFuture.scala:44)
	at akka.http.scaladsl.util.FastFuture$.transformWith$extension(FastFuture.scala:36)
	at akka.http.scaladsl.server.directives.FutureDirectives.$anonfun$onComplete$2(FutureDirectives.scala:37)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$textract$2(BasicDirectives.scala:161)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$mapRouteResult$2(BasicDirectives.scala:68)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$textract$2(BasicDirectives.scala:161)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$mapRequestContext$2(BasicDirectives.scala:45)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$textract$2(BasicDirectives.scala:161)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$mapRequestContext$2(BasicDirectives.scala:45)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$textract$2(BasicDirectives.scala:161)
	at akka.http.scaladsl.server.RouteConcatenation$RouteWithConcatenation.$anonfun$$tilde$2(RouteConcatenation.scala:47)
	at akka.http.scaladsl.util.FastFuture$.strictTransform$1(FastFuture.scala:40)
	at akka.http.scaladsl.util.FastFuture$.transformWith$extension(FastFuture.scala:44)
	at akka.http.scaladsl.util.FastFuture$.flatMap$extension(FastFuture.scala:25)
	at akka.http.scaladsl.server.RouteConcatenation$RouteWithConcatenation.$anonfun$$tilde$1(RouteConcatenation.scala:44)
	at akka.http.scaladsl.server.RouteConcatenation$RouteWithConcatenation.$anonfun$$tilde$1(RouteConcatenation.scala:44)
	at akka.http.scaladsl.server.RouteConcatenation$RouteWithConcatenation.$anonfun$$tilde$1(RouteConcatenation.scala:44)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$mapRouteResultWith$2(BasicDirectives.scala:74)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$textract$2(BasicDirectives.scala:161)
	at akka.http.scaladsl.server.directives.ExecutionDirectives.$anonfun$handleExceptions$2(ExecutionDirectives.scala:32)
	at akka.http.scaladsl.server.Route$.$anonfun$createAsyncHandler$1(Route.scala:110)
	at akka.http.impl.engine.http2.Http2Ext.$anonfun$handleUpgradeRequests$1(Http2.scala:179)
	at akka.stream.impl.fusing.MapAsyncUnordered$$anon$31.onPush(Ops.scala:1428)
	at akka.stream.impl.fusing.GraphInterpreter.processPush(GraphInterpreter.scala:542)
	at akka.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:423)
	at akka.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:650)
	at akka.stream.impl.fusing.GraphInterpreterShell$AsyncInput.execute(ActorGraphInterpreter.scala:521)
	at akka.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:625)
	at akka.stream.impl.fusing.ActorGraphInterpreter.akka$stream$impl$fusing$ActorGraphInterpreter$$processEvent(ActorGraphInterpreter.scala:800)
	at akka.stream.impl.fusing.ActorGraphInterpreter.akka$stream$impl$fusing$ActorGraphInterpreter$$shortCircuitBatch(ActorGraphInterpreter.scala:787)
	at akka.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:819)
	at akka.actor.Actor.aroundReceive(Actor.scala:537)
	at akka.actor.Actor.aroundReceive$(Actor.scala:535)
	at akka.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:716)
	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:580)
	at akka.actor.ActorCell.invoke(ActorCell.scala:548)
	at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:270)
	at akka.dispatch.Mailbox.run(Mailbox.scala:231)
	at akka.dispatch.Mailbox.exec(Mailbox.scala:243)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
Caused by: com.typesafe.config.ConfigException$Missing: merge of system properties,reference.conf @ jar:file:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-actor-typed_2.13/2.6.19/akka-actor-typed_2.13-2.6.19.jar!/reference.conf: 1,reference.conf @ jar:file:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-actor_2.13/2.6.19/akka-actor_2.13-2.6.19.jar!/reference.conf: 1,reference.conf @ jar:file:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-http-core_2.13/10.2.9/akka-http-core_2.13-10.2.9.jar!/reference.conf: 1,reference.conf @ jar:file:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-http_2.13/10.2.9/akka-http_2.13-10.2.9.jar!/reference.conf: 1,reference.conf @ jar:file:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-stream_2.13/2.6.19/akka-stream_2.13-2.6.19.jar!/reference.conf: 1,reference.conf @ jar:file:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/slick/slick_2.13/3.3.3/slick_2.13-3.3.3.jar!/reference.conf: 1,reference.conf @ jar:file:/Users/peace/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/ssl-config-core_2.13/0.4.3/ssl-config-core_2.13-0.4.3.jar!/reference.conf: 1: No configuration setting found for key '3'
	at com.typesafe.config.impl.SimpleConfig.findKeyOrNull(SimpleConfig.java:157)
	at com.typesafe.config.impl.SimpleConfig.findOrNull(SimpleConfig.java:175)
	at com.typesafe.config.impl.SimpleConfig.find(SimpleConfig.java:189)
	at com.typesafe.config.impl.SimpleConfig.find(SimpleConfig.java:194)
	at com.typesafe.config.impl.SimpleConfig.getString(SimpleConfig.java:251)
	at com.github.asadaGuitar.bbs.interfaces.controllers.models.ErrorResponse$.getErrorResponseByCode(ErrorResponse.scala:11)
	at com.github.asadaGuitar.bbs.interfaces.controllers.models.ErrorResponse$.<clinit>(ErrorResponse.scala:13)
	... 56 common frames omitted
date:2022-07-31 18:24:28	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 18:24:33	level: WARN 	logger: akka.actor.CoordinatedShutdown                  	message: Coordinated shutdown phase [service-requests-done] timed out after 5000 milliseconds
date:2022-07-31 18:27:21	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:27:22	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 18:27:30	level: ERROR	logger: akka.actor.ActorSystemImpl                      	message: Error during processing of request: 'Unhandled rejection: ValidationErrorRejection(NonEmptyList(ErrorResponse(1111,error)))'. Completing with 500 Internal Server Error response. To change default exception handling behavior, provide a custom ExceptionHandler.
java.lang.RuntimeException: Unhandled rejection: ValidationErrorRejection(NonEmptyList(ErrorResponse(1111,error)))
	at scala.sys.package$.error(package.scala:27)
	at akka.http.scaladsl.server.RejectionHandler$$anonfun$19.applyOrElse(RejectionHandler.scala:289)
	at akka.http.scaladsl.server.RejectionHandler$$anonfun$19.applyOrElse(RejectionHandler.scala:289)
	at scala.collection.IterableOnceOps.collectFirst(IterableOnce.scala:1079)
	at scala.collection.IterableOnceOps.collectFirst$(IterableOnce.scala:1071)
	at scala.collection.AbstractIterable.collectFirst(Iterable.scala:926)
	at akka.http.scaladsl.server.RejectionHandler$BuiltRejectionHandler.rec$1(RejectionHandler.scala:138)
	at akka.http.scaladsl.server.RejectionHandler$BuiltRejectionHandler.apply(RejectionHandler.scala:145)
	at akka.http.scaladsl.server.RejectionHandler$BuiltRejectionHandler.apply(RejectionHandler.scala:128)
	at akka.http.scaladsl.server.directives.ExecutionDirectives.handle$1(ExecutionDirectives.scala:50)
	at akka.http.scaladsl.server.directives.ExecutionDirectives.$anonfun$handleRejections$4(ExecutionDirectives.scala:60)
	at akka.http.scaladsl.server.directives.BasicDirectives$$anonfun$recoverRejectionsWith$1.applyOrElse(BasicDirectives.scala:98)
	at akka.http.scaladsl.server.directives.BasicDirectives$$anonfun$recoverRejectionsWith$1.applyOrElse(BasicDirectives.scala:98)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$mapRouteResultWithPF$1(BasicDirectives.scala:86)
	at akka.http.scaladsl.util.FastFuture$.strictTransform$1(FastFuture.scala:40)
	at akka.http.scaladsl.util.FastFuture$.transformWith$extension(FastFuture.scala:44)
	at akka.http.scaladsl.util.FastFuture$.flatMap$extension(FastFuture.scala:25)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$mapRouteResultWith$2(BasicDirectives.scala:74)
	at akka.http.scaladsl.server.directives.BasicDirectives.$anonfun$textract$2(BasicDirectives.scala:161)
	at akka.http.scaladsl.server.directives.ExecutionDirectives.$anonfun$handleExceptions$2(ExecutionDirectives.scala:32)
	at akka.http.scaladsl.server.Route$.$anonfun$createAsyncHandler$1(Route.scala:110)
	at akka.http.impl.engine.http2.Http2Ext.$anonfun$handleUpgradeRequests$1(Http2.scala:179)
	at akka.stream.impl.fusing.MapAsyncUnordered$$anon$31.onPush(Ops.scala:1428)
	at akka.stream.impl.fusing.GraphInterpreter.processPush(GraphInterpreter.scala:542)
	at akka.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:423)
	at akka.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:650)
	at akka.stream.impl.fusing.GraphInterpreterShell$AsyncInput.execute(ActorGraphInterpreter.scala:521)
	at akka.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:625)
	at akka.stream.impl.fusing.ActorGraphInterpreter.akka$stream$impl$fusing$ActorGraphInterpreter$$processEvent(ActorGraphInterpreter.scala:800)
	at akka.stream.impl.fusing.ActorGraphInterpreter.akka$stream$impl$fusing$ActorGraphInterpreter$$shortCircuitBatch(ActorGraphInterpreter.scala:787)
	at akka.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:819)
	at akka.actor.Actor.aroundReceive(Actor.scala:537)
	at akka.actor.Actor.aroundReceive$(Actor.scala:535)
	at akka.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:716)
	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:580)
	at akka.actor.ActorCell.invoke(ActorCell.scala:548)
	at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:270)
	at akka.dispatch.Mailbox.run(Mailbox.scala:231)
	at akka.dispatch.Mailbox.exec(Mailbox.scala:243)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
date:2022-07-31 18:29:33	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 18:29:39	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:29:40	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 18:30:35	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 18:30:41	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:30:42	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bbs
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 18:30:58	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 18:30:58	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 18:30:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Apply Function exists
|   0: Filter s2
|     from s2: TableExpansion
|       table s3: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s3.id : String'
|           2: Path s3.first_name : String'
|           3: Path s3.last_name : String'
|           4: Path s3.email_address : String'
|           5: Path s3.password : String'
|           6: Path s3.is_close : Boolean'
|           7: Path s3.create_at : java.sql.Date'
|           8: Path s3.modify_at : Option[java.sql.Date']
|           9: Path s3.close_at : Option[java.sql.Date']
|     where: Apply Function =
|       0: Path s2.id : String'
|       1: LiteralNode aG5A43gzGL (volatileHint=false)

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Apply Function exists
|   0: Filter s4
|     from s4: TableExpansion
|       table s5: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.id : String'
|           2: Path s5.first_name : String'
|           3: Path s5.last_name : String'
|           4: Path s5.email_address : String'
|           5: Path s5.password : String'
|           6: Path s5.is_close : Boolean'
|           7: Path s5.create_at : java.sql.Date'
|           8: Path s5.modify_at : Option[java.sql.Date']
|           9: Path s5.close_at : Option[java.sql.Date']
|     where: Apply Function =
|       0: Path s4.id : String'
|       1: LiteralNode aG5A43gzGL (volatileHint=false)

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode aG5A43gzGL (volatileHint=false) : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 18:30:59	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Failed to create/setup connection: FATAL: database "bbs" does not exist
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode aG5A43gzGL (volatileHint=false) : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s7 for Filter s4
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s8 for Pure t9
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>>]
|             value: Ref s7 : @t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             value: StructNode : {password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}
|               password: Path s7.password : String'
|               email_address: Path s7.email_address : String'
|               is_close: Path s7.is_close : Boolean'
|               last_name: Path s7.last_name : String'
|               first_name: Path s7.first_name : String'
|               modify_at: Path s7.modify_at : Option[java.sql.Date']
|               close_at: Path s7.close_at : Option[java.sql.Date']
|               id: Path s7.id : String'
|               create_at: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode : ()

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(), UnassignedType)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t9
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols t10
| Path s4.id : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t11
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols t10
| Path s7.password : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols t10
| Path s7.email_address : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols t10
| Path s7.is_close : Boolean'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols t10
| Path s7.last_name : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols t10
| Path s7.first_name : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols t10
| Path s7.modify_at : Option[java.sql.Date']

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols t10
| Path s7.close_at : Option[java.sql.Date']

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols t10
| Path s7.id : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols t10
| Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   password: Path s7.password
|   email_address: Path s7.email_address
|   is_close: Path s7.is_close
|   last_name: Path s7.last_name
|   first_name: Path s7.first_name
|   modify_at: Path s7.modify_at
|   close_at: Path s7.close_at
|   id: Path s7.id
|   create_at: Path s7.create_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path password
| Path s7.password

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.password
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path email_address
| Path s7.email_address

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.email_address
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path is_close
| Path s7.is_close

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path last_name
| Path s7.last_name

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.last_name
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path first_name
| Path s7.first_name

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.first_name
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path modify_at
| Path s7.modify_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.modify_at
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path close_at
| Path s7.close_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s7.close_at
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s7.id

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s7.id
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path create_at
| Path s7.create_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Path s7.create_at
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t11: (HashMap(List(modify_at) -> s17, List(is_close) -> s14, List(last_name) -> s15, List(password) -> s12, List(email_address) -> s13, List(create_at) -> s20, List(close_at) -> s18, List(id) -> s19, List(first_name) -> s16), UnassignedType)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.password
|     s13: Path s7.email_address
|     s14: Path s7.is_close
|     s15: Path s7.last_name
|     s16: Path s7.first_name
|     s17: Path s7.modify_at
|     s18: Path s7.close_at
|     s19: Path s7.id
|     s20: Path s7.create_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s7: Filter s4
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|       where: Apply Function =
|         0: Path s4.id
|         1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|     select: Pure t11
|       value: StructNode
|         s12: Path s7.password
|         s13: Path s7.email_address
|         s14: Path s7.is_close
|         s15: Path s7.last_name
|         s16: Path s7.first_name
|         s17: Path s7.modify_at
|         s18: Path s7.close_at
|         s19: Path s7.id
|         s20: Path s7.create_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s21 -> Apply Function exists
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t9: (Map(List() -> s21), UnassignedType)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t9
|   value: StructNode
|     s21: Apply Function exists
|       0: Bind
|         from s7: Filter s4
|           from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|           where: Apply Function =
|             0: Path s4.id
|             1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|         select: Pure t11
|           value: StructNode
|             s12: Path s7.password
|             s13: Path s7.email_address
|             s14: Path s7.is_close
|             s15: Path s7.last_name
|             s16: Path s7.first_name
|             s17: Path s7.modify_at
|             s18: Path s7.close_at
|             s19: Path s7.id
|             s20: Path s7.create_at

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t10 : Vector[t10<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Date']
|                 s18: Path s7.close_at : Option[java.sql.Date']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlining Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t10 : Vector[t10<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Date']
|               s18: Path s7.close_at : Option[java.sql.Date']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlined Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Date']
|               s18: Path s7.close_at : Option[java.sql.Date']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t22 : Vector[t22<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Date']
|                 s18: Path s7.close_at : Option[java.sql.Date']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t22, t11, t9; Field refs: (@t6,password), (@t6,create_at), (@t6,id), (@t6,email_address), (@t6,modify_at), (@t6,first_name), (@t6,close_at), (@t6,last_name), (@t6,is_close)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t9<Boolean>
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t9<{s21: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t9 : Vector[t9<{s21: Boolean}>]
|         value: StructNode : {s21: Boolean}
|           s21: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Date']
|                   s18: Path s7.close_at : Option[java.sql.Date']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Date'
|     map: Path s23.s21 : Boolean

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Apply Function exists,s24))
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s23: Bind : Vector[t25<{s24: Boolean}>]
|     from s8: ...
|     select: Pure t25 : Vector[t25<{s24: Boolean}>]
|       value: StructNode : {s24: Boolean}
|         s24: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Date']
|                 s18: Path s7.close_at : Option[java.sql.Date']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Date'
|   map: Path s23.s24 : Boolean

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t25<{s24: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Date']
|                   s18: Path s7.close_at : Option[java.sql.Date']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Date'
|     map: Path s23.s24 : Boolean

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from Pure:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray()
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t27<{}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t27 : Vector[t27<{}>]
|     value: StructNode : {}

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map()
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s24: Boolean}>]
|   from s8: ...
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Date']
|               s18: Path s7.close_at : Option[java.sql.Date']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Date']
|               s18: Path s7.close_at : Option[java.sql.Date']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t25,s24) -> s24)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t25,s24),List(s24)))
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,password),List(password)), ((@t6,email_address),List(email_address)), ((@t6,is_close),List(is_close)), ((@t6,last_name),List(last_name)), ((@t6,first_name),List(first_name)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,create_at),List(create_at)))
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s28, None, None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Date']
|       s37: Path s28.close_at : Option[java.sql.Date']
|       s38: Path s28.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,password) -> s31, (@t6,create_at) -> s38, (@t6,id) -> s30, (@t6,email_address) -> s32, (@t6,modify_at) -> s36, (@t6,first_name) -> s35, (@t6,close_at) -> s37, (@t6,last_name) -> s34, (@t6,is_close) -> s33)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode aG5A43gzGL (volatileHint=false) : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Date']
|       s37: Path s28.close_at : Option[java.sql.Date']
|       s38: Path s28.create_at : java.sql.Date'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode aG5A43gzGL (volatileHint=false) : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|   from s7: ...
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|       s12: Path s7.password : String'
|       s13: Path s7.email_address : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.last_name : String'
|       s16: Path s7.first_name : String'
|       s17: Path s7.modify_at : Option[java.sql.Date']
|       s18: Path s7.close_at : Option[java.sql.Date']
|       s19: Path s7.id : String'
|       s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|       s12: Path s28.password : String'
|       s13: Path s28.email_address : String'
|       s14: Path s28.is_close : Boolean'
|       s15: Path s28.last_name : String'
|       s16: Path s28.first_name : String'
|       s17: Path s28.modify_at : Option[java.sql.Date']
|       s18: Path s28.close_at : Option[java.sql.Date']
|       s19: Path s28.id : String'
|       s20: Path s28.create_at : java.sql.Date'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode aG5A43gzGL (volatileHint=false) : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t11,s15) -> s15, (t11,s16) -> s16, (t11,s13) -> s13, (t11,s19) -> s19, (t11,s18) -> s18, (t11,s20) -> s20, (t11,s12) -> s12, (t11,s14) -> s14, (t11,s17) -> s17)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t11,s15),List(s15)), ((t11,s16),List(s16)), ((t11,s13),List(s13)), ((t11,s19),List(s19)), ((t11,s18),List(s18)), ((t11,s20),List(s20)), ((t11,s12),List(s12)), ((t11,s14),List(s14)), ((t11,s17),List(s17)))
date:2022-07-31 18:30:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|       from s26: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                   s12: Path s28.password : String'
|                   s13: Path s28.email_address : String'
|                   s14: Path s28.is_close : Boolean'
|                   s15: Path s28.last_name : String'
|                   s16: Path s28.first_name : String'
|                   s17: Path s28.modify_at : Option[java.sql.Date']
|                   s18: Path s28.close_at : Option[java.sql.Date']
|                   s19: Path s28.id : String'
|                   s20: Path s28.create_at : java.sql.Date'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|     map: Path s23.s24 : Boolean

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s24 -> 0
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|     from s26: Pure t22 : Vector[t22<()>]
|       value: ProductNode : ()
|     select: Pure t25 : Vector[t25<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|             from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|               value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')
|                 1: Path s28.password : String'
|                 2: Path s28.email_address : String'
|                 3: Path s28.is_close : Boolean'
|                 4: Path s28.last_name : String'
|                 5: Path s28.first_name : String'
|                 6: Path s28.modify_at : Option[java.sql.Date']
|                 7: Path s28.close_at : Option[java.sql.Date']
|                 8: Path s28.id : String'
|                 9: Path s28.create_at : java.sql.Date'
|             where: Apply Function = : Boolean
|               0: Path s28.id : String'
|               1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|   map: Path s23.s24 : Boolean

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|       from s26: Pure t22 : Vector[t22<()>]
|         value: ProductNode : ()
|       select: Pure t25 : Vector[t25<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|                 value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')
|                   1: Path s28.password : String'
|                   2: Path s28.email_address : String'
|                   3: Path s28.is_close : Boolean'
|                   4: Path s28.last_name : String'
|                   5: Path s28.first_name : String'
|                   6: Path s28.modify_at : Option[java.sql.Date']
|                   7: Path s28.close_at : Option[java.sql.Date']
|                   8: Path s28.id : String'
|                   9: Path s28.create_at : java.sql.Date'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode aG5A43gzGL (volatileHint=false) : String'
|     map: Path s23._1 : Boolean

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|   from s26: Pure t22 : Vector[t22<()>]
|     value: ProductNode : ()
|   select: Pure t25 : Vector[t25<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|           from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|           select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|             value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')
|               1: Path s28.password : String'
|               2: Path s28.email_address : String'
|               3: Path s28.is_close : Boolean'
|               4: Path s28.last_name : String'
|               5: Path s28.first_name : String'
|               6: Path s28.modify_at : Option[java.sql.Date']
|               7: Path s28.close_at : Option[java.sql.Date']
|               8: Path s28.id : String'
|               9: Path s28.create_at : java.sql.Date'
|           where: Apply Function = : Boolean
|             0: Path s28.id : String'
|             1: LiteralNode aG5A43gzGL (volatileHint=false) : String'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'aG5A43gzGL')" : Vector[t25<(Boolean)>]

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'aG5A43gzGL')" : Vector[t25<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   22.238083 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    2.460084 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:   13.315583 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   93.357084 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    6.353125 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    3.946208 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.715500 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    7.176750 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   72.106708 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   62.074541 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.422000 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    2.111334 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.539292 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.543959 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    5.674791 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    7.453917 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   23.996875 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    4.292875 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   78.212709 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.650083 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.653125 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   10.125708 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   34.897500 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  456.317834 ms
date:2022-07-31 18:30:59	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'aG5A43gzGL')]
date:2022-07-31 18:30:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:31:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:31:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:31:02	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:31:04	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:31:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:31:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:31:18	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "bbs" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2787)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:173)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:290)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:402)
	at org.postgresql.Driver.connect(Driver.java:261)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-07-31 18:31:18	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Request timeout encountered for request [POST /signup Strict(103 bytes)]
date:2022-07-31 18:31:24	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 18:31:27	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 18:31:28	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 18:31:32	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 18:31:32	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 18:31:32	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Apply Function exists
|   0: Filter s2
|     from s2: TableExpansion
|       table s3: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s3.id : String'
|           2: Path s3.first_name : String'
|           3: Path s3.last_name : String'
|           4: Path s3.email_address : String'
|           5: Path s3.password : String'
|           6: Path s3.is_close : Boolean'
|           7: Path s3.create_at : java.sql.Date'
|           8: Path s3.modify_at : Option[java.sql.Date']
|           9: Path s3.close_at : Option[java.sql.Date']
|     where: Apply Function =
|       0: Path s2.id : String'
|       1: LiteralNode BzXlT1Cpjd (volatileHint=false)

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Apply Function exists
|   0: Filter s4
|     from s4: TableExpansion
|       table s5: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.id : String'
|           2: Path s5.first_name : String'
|           3: Path s5.last_name : String'
|           4: Path s5.email_address : String'
|           5: Path s5.password : String'
|           6: Path s5.is_close : Boolean'
|           7: Path s5.create_at : java.sql.Date'
|           8: Path s5.modify_at : Option[java.sql.Date']
|           9: Path s5.close_at : Option[java.sql.Date']
|     where: Apply Function =
|       0: Path s4.id : String'
|       1: LiteralNode BzXlT1Cpjd (volatileHint=false)

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s7 for Filter s4
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s8 for Pure t9
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>>]
|             value: Ref s7 : @t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             value: StructNode : {password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}
|               password: Path s7.password : String'
|               email_address: Path s7.email_address : String'
|               is_close: Path s7.is_close : Boolean'
|               last_name: Path s7.last_name : String'
|               first_name: Path s7.first_name : String'
|               modify_at: Path s7.modify_at : Option[java.sql.Date']
|               close_at: Path s7.close_at : Option[java.sql.Date']
|               id: Path s7.id : String'
|               create_at: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@75ddbe16
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode : ()

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(), UnassignedType)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t9
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols t10
| Path s4.id : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t11
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols t10
| Path s7.password : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols t10
| Path s7.email_address : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols t10
| Path s7.is_close : Boolean'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols t10
| Path s7.last_name : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols t10
| Path s7.first_name : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols t10
| Path s7.modify_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols t10
| Path s7.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols t10
| Path s7.id : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols t10
| Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@68cdb7c2
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   password: Path s7.password
|   email_address: Path s7.email_address
|   is_close: Path s7.is_close
|   last_name: Path s7.last_name
|   first_name: Path s7.first_name
|   modify_at: Path s7.modify_at
|   close_at: Path s7.close_at
|   id: Path s7.id
|   create_at: Path s7.create_at

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path password
| Path s7.password

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.password
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path email_address
| Path s7.email_address

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.email_address
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path is_close
| Path s7.is_close

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path last_name
| Path s7.last_name

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.last_name
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path first_name
| Path s7.first_name

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.first_name
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path modify_at
| Path s7.modify_at

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@193a7205
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.modify_at
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path close_at
| Path s7.close_at

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s7.close_at
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s7.id

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s7.id
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path create_at
| Path s7.create_at

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Path s7.create_at
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t11: (HashMap(List(modify_at) -> s17, List(is_close) -> s14, List(last_name) -> s15, List(password) -> s12, List(email_address) -> s13, List(create_at) -> s20, List(close_at) -> s18, List(id) -> s19, List(first_name) -> s16), UnassignedType)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.password
|     s13: Path s7.email_address
|     s14: Path s7.is_close
|     s15: Path s7.last_name
|     s16: Path s7.first_name
|     s17: Path s7.modify_at
|     s18: Path s7.close_at
|     s19: Path s7.id
|     s20: Path s7.create_at

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@37cef9b
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s7: Filter s4
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|       where: Apply Function =
|         0: Path s4.id
|         1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|     select: Pure t11
|       value: StructNode
|         s12: Path s7.password
|         s13: Path s7.email_address
|         s14: Path s7.is_close
|         s15: Path s7.last_name
|         s16: Path s7.first_name
|         s17: Path s7.modify_at
|         s18: Path s7.close_at
|         s19: Path s7.id
|         s20: Path s7.create_at

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s21 -> Apply Function exists
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t9: (Map(List() -> s21), UnassignedType)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t9
|   value: StructNode
|     s21: Apply Function exists
|       0: Bind
|         from s7: Filter s4
|           from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|           where: Apply Function =
|             0: Path s4.id
|             1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|         select: Pure t11
|           value: StructNode
|             s12: Path s7.password
|             s13: Path s7.email_address
|             s14: Path s7.is_close
|             s15: Path s7.last_name
|             s16: Path s7.first_name
|             s17: Path s7.modify_at
|             s18: Path s7.close_at
|             s19: Path s7.id
|             s20: Path s7.create_at

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1bc9ccec
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t10 : Vector[t10<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Date']
|                 s18: Path s7.close_at : Option[java.sql.Date']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1e3f0bf0
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlining Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t10 : Vector[t10<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Date']
|               s18: Path s7.close_at : Option[java.sql.Date']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlined Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Date']
|               s18: Path s7.close_at : Option[java.sql.Date']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@54dff868
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t22 : Vector[t22<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Date']
|                 s18: Path s7.close_at : Option[java.sql.Date']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t11, t9, t22; Field refs: (@t6,modify_at), (@t6,is_close), (@t6,email_address), (@t6,first_name), (@t6,close_at), (@t6,id), (@t6,password), (@t6,last_name), (@t6,create_at)
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@303bc55f
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t9<Boolean>
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t9<{s21: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t9 : Vector[t9<{s21: Boolean}>]
|         value: StructNode : {s21: Boolean}
|           s21: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Date']
|                   s18: Path s7.close_at : Option[java.sql.Date']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Date'
|     map: Path s23.s21 : Boolean

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6540d118
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Apply Function exists,s24))
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3c636cb
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s23: Bind : Vector[t25<{s24: Boolean}>]
|     from s8: ...
|     select: Pure t25 : Vector[t25<{s24: Boolean}>]
|       value: StructNode : {s24: Boolean}
|         s24: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Date']
|                 s18: Path s7.close_at : Option[java.sql.Date']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Date'
|   map: Path s23.s24 : Boolean

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@28718263
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t25<{s24: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Date']
|                   s18: Path s7.close_at : Option[java.sql.Date']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Date'
|     map: Path s23.s24 : Boolean

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from Pure:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray()
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@460eab0f
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t27<{}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t27 : Vector[t27<{}>]
|     value: StructNode : {}

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map()
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@25a57ac7
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s24: Boolean}>]
|   from s8: ...
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Date']
|               s18: Path s7.close_at : Option[java.sql.Date']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Date']
|               s18: Path s7.close_at : Option[java.sql.Date']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@176760d6
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t25,s24) -> s24)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t25,s24),List(s24)))
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,password),List(password)), ((@t6,email_address),List(email_address)), ((@t6,is_close),List(is_close)), ((@t6,last_name),List(last_name)), ((@t6,first_name),List(first_name)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,create_at),List(create_at)))
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@33a18ac3
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s28, None, None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Date']
|       s37: Path s28.close_at : Option[java.sql.Date']
|       s38: Path s28.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,modify_at) -> s36, (@t6,is_close) -> s33, (@t6,email_address) -> s32, (@t6,first_name) -> s35, (@t6,close_at) -> s37, (@t6,id) -> s30, (@t6,password) -> s31, (@t6,last_name) -> s34, (@t6,create_at) -> s38)
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@c4096b
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Date'], s37: Option[java.sql.Date'], s38: java.sql.Date'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Date']
|       s37: Path s28.close_at : Option[java.sql.Date']
|       s38: Path s28.create_at : java.sql.Date'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@eb938f6
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|   from s7: ...
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|       s12: Path s7.password : String'
|       s13: Path s7.email_address : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.last_name : String'
|       s16: Path s7.first_name : String'
|       s17: Path s7.modify_at : Option[java.sql.Date']
|       s18: Path s7.close_at : Option[java.sql.Date']
|       s19: Path s7.id : String'
|       s20: Path s7.create_at : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|       s12: Path s28.password : String'
|       s13: Path s28.email_address : String'
|       s14: Path s28.is_close : Boolean'
|       s15: Path s28.last_name : String'
|       s16: Path s28.first_name : String'
|       s17: Path s28.modify_at : Option[java.sql.Date']
|       s18: Path s28.close_at : Option[java.sql.Date']
|       s19: Path s28.id : String'
|       s20: Path s28.create_at : java.sql.Date'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t11,s20) -> s20, (t11,s13) -> s13, (t11,s12) -> s12, (t11,s17) -> s17, (t11,s19) -> s19, (t11,s16) -> s16, (t11,s18) -> s18, (t11,s15) -> s15, (t11,s14) -> s14)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t11,s20),List(s20)), ((t11,s13),List(s13)), ((t11,s12),List(s12)), ((t11,s17),List(s17)), ((t11,s19),List(s19)), ((t11,s16),List(s16)), ((t11,s18),List(s18)), ((t11,s15),List(s15)), ((t11,s14),List(s14)))
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@22748827
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1dbcf938
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|       from s26: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Date'], s18: Option[java.sql.Date'], s19: String', s20: java.sql.Date'}
|                   s12: Path s28.password : String'
|                   s13: Path s28.email_address : String'
|                   s14: Path s28.is_close : Boolean'
|                   s15: Path s28.last_name : String'
|                   s16: Path s28.first_name : String'
|                   s17: Path s28.modify_at : Option[java.sql.Date']
|                   s18: Path s28.close_at : Option[java.sql.Date']
|                   s19: Path s28.id : String'
|                   s20: Path s28.create_at : java.sql.Date'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|     map: Path s23.s24 : Boolean

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3d1334b5
date:2022-07-31 18:31:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s24 -> 0
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|     from s26: Pure t22 : Vector[t22<()>]
|       value: ProductNode : ()
|     select: Pure t25 : Vector[t25<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|             from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|             select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|               value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')
|                 1: Path s28.password : String'
|                 2: Path s28.email_address : String'
|                 3: Path s28.is_close : Boolean'
|                 4: Path s28.last_name : String'
|                 5: Path s28.first_name : String'
|                 6: Path s28.modify_at : Option[java.sql.Date']
|                 7: Path s28.close_at : Option[java.sql.Date']
|                 8: Path s28.id : String'
|                 9: Path s28.create_at : java.sql.Date'
|             where: Apply Function = : Boolean
|               0: Path s28.id : String'
|               1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|   map: Path s23.s24 : Boolean

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|       from s26: Pure t22 : Vector[t22<()>]
|         value: ProductNode : ()
|       select: Pure t25 : Vector[t25<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|               select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|                 value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')
|                   1: Path s28.password : String'
|                   2: Path s28.email_address : String'
|                   3: Path s28.is_close : Boolean'
|                   4: Path s28.last_name : String'
|                   5: Path s28.first_name : String'
|                   6: Path s28.modify_at : Option[java.sql.Date']
|                   7: Path s28.close_at : Option[java.sql.Date']
|                   8: Path s28.id : String'
|                   9: Path s28.create_at : java.sql.Date'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'
|     map: Path s23._1 : Boolean

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|   from s26: Pure t22 : Vector[t22<()>]
|     value: ProductNode : ()
|   select: Pure t25 : Vector[t25<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|           from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Date'], close_at: Option[java.sql.Date'], id: String', create_at: java.sql.Date'}>]
|           select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')>]
|             value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Date'], Option[java.sql.Date'], String', java.sql.Date')
|               1: Path s28.password : String'
|               2: Path s28.email_address : String'
|               3: Path s28.is_close : Boolean'
|               4: Path s28.last_name : String'
|               5: Path s28.first_name : String'
|               6: Path s28.modify_at : Option[java.sql.Date']
|               7: Path s28.close_at : Option[java.sql.Date']
|               8: Path s28.id : String'
|               9: Path s28.create_at : java.sql.Date'
|           where: Apply Function = : Boolean
|             0: Path s28.id : String'
|             1: LiteralNode BzXlT1Cpjd (volatileHint=false) : String'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BzXlT1Cpjd')" : Vector[t25<(Boolean)>]

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BzXlT1Cpjd')" : Vector[t25<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   25.082625 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    2.396334 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:   12.165875 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   89.860333 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:   13.004791 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.858625 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    1.081417 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:   14.889542 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   86.092834 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   24.730375 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.353458 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.934584 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.412625 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.022584 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.467625 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    9.406959 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   34.613417 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    2.482625 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   89.450667 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    3.419625 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.786750 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   13.824667 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   33.621041 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  466.959378 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BzXlT1Cpjd')]
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BzXlT1Cpjd')
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@588064976 wrapping select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BzXlT1Cpjd')
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@588064976 wrapping select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'BzXlT1Cpjd')
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 9ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------\
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1      |
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | exists |
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------|
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | false  |
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------/
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Date'
|       8: Path s2.modify_at : Option[java.sql.Date']
|       9: Path s2.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Date'
|       8: Path s3.modify_at : Option[java.sql.Date']
|       9: Path s3.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|       1: Path s6.id : String'
|       2: Path s6.first_name : String'
|       3: Path s6.last_name : String'
|       4: Path s6.email_address : String'
|       5: Path s6.password : String'
|       6: Path s6.is_close : Boolean'
|       7: Path s6.create_at : java.sql.Date'
|       8: Path s6.modify_at : Option[java.sql.Date']
|       9: Path s6.close_at : Option[java.sql.Date']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|         0: Path s5._2 : String'
|       3: InsertColumn last_name : String'
|         0: Path s5._3 : String'
|       4: InsertColumn email_address : String'
|         0: Path s5._4 : String'
|       5: InsertColumn password : String'
|         0: Path s5._5 : String'
|       6: InsertColumn is_close : Boolean'
|         0: Path s5._6 : Boolean'
|       7: InsertColumn create_at : java.sql.Date'
|         0: Path s5._7 : java.sql.Date'
|       8: InsertColumn modify_at : Option[java.sql.Date']
|         0: Path s5._8 : Option[java.sql.Date']
|       9: InsertColumn close_at : Option[java.sql.Date']
|         0: Path s5._9 : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|     1: Path s6.id : String'
|     2: Path s6.first_name : String'
|     3: Path s6.last_name : String'
|     4: Path s6.email_address : String'
|     5: Path s6.password : String'
|     6: Path s6.is_close : Boolean'
|     7: Path s6.create_at : java.sql.Date'
|     8: Path s6.modify_at : Option[java.sql.Date']
|     9: Path s6.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=id : String'
|     2: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=first_name : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=first_name : String'
|     3: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=last_name : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=last_name : String'
|     4: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=email_address : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=13, name=email_address : String'
|     5: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=5, name=password : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=password : String'
|     6: CompoundResultConverter
|       *: BaseResultConverter$mcZ$sp idx=6, name=is_close : Boolean'
|       -: BaseResultConverter$mcZ$sp idx=15, name=is_close : Boolean'
|     7: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=7, name=create_at : java.sql.Date'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=16, name=create_at : java.sql.Date'
|     8: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Date'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=17 : java.sql.Date'
|     9: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Date'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=18 : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "users" set "id"=?,"first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where ; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where )" : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|   from s5: CompiledStatement "update "users" set "id"=?,"first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where ; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where )" : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=id : String'
|         2: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=first_name : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=first_name : String'
|         3: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=last_name : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=last_name : String'
|         4: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=email_address : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=13, name=email_address : String'
|         5: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=5, name=password : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=password : String'
|         6: CompoundResultConverter
|           *: BaseResultConverter$mcZ$sp idx=6, name=is_close : Boolean'
|           -: BaseResultConverter$mcZ$sp idx=15, name=is_close : Boolean'
|         7: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=7, name=create_at : java.sql.Date'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=16, name=create_at : java.sql.Date'
|         8: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Date'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=17 : java.sql.Date'
|         9: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Date'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=18 : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.047417 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    1.285250 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:   11.326042 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   22.326833 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   36.985542 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Date'
|       8: Path s2.modify_at : Option[java.sql.Date']
|       9: Path s2.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Date'
|       8: Path s3.modify_at : Option[java.sql.Date']
|       9: Path s3.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[()]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : ()
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : ()
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|       1: InsertColumn id : String'
|       2: InsertColumn first_name : String'
|       3: InsertColumn last_name : String'
|       4: InsertColumn email_address : String'
|       5: InsertColumn password : String'
|       6: InsertColumn is_close : Boolean'
|       7: InsertColumn create_at : java.sql.Date'
|       8: InsertColumn modify_at : Option[java.sql.Date']
|       9: InsertColumn close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : ()
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : ()

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|     2: CompoundResultConverter
|     3: CompoundResultConverter
|     4: CompoundResultConverter
|     5: CompoundResultConverter
|     6: CompoundResultConverter
|     7: CompoundResultConverter
|     8: CompoundResultConverter
|     9: CompoundResultConverter

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select 1 from "users" where " : ()

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[()]
|   from s5: CompiledStatement "select 1 from "users" where " : ()
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|         2: CompoundResultConverter
|         3: CompoundResultConverter
|         4: CompoundResultConverter
|         5: CompoundResultConverter
|         6: CompoundResultConverter
|         7: CompoundResultConverter
|         8: CompoundResultConverter
|         9: CompoundResultConverter

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.909458 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.267708 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    2.945708 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    4.287875 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    9.410749 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Date'
|       8: Path s2.modify_at : Option[java.sql.Date']
|       9: Path s2.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Date'
|       8: Path s3.modify_at : Option[java.sql.Date']
|       9: Path s3.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|       1: Path s6.id : String'
|       2: Path s6.first_name : String'
|       3: Path s6.last_name : String'
|       4: Path s6.email_address : String'
|       5: Path s6.password : String'
|       6: Path s6.is_close : Boolean'
|       7: Path s6.create_at : java.sql.Date'
|       8: Path s6.modify_at : Option[java.sql.Date']
|       9: Path s6.close_at : Option[java.sql.Date']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|         0: Path s5._2 : String'
|       3: InsertColumn last_name : String'
|         0: Path s5._3 : String'
|       4: InsertColumn email_address : String'
|         0: Path s5._4 : String'
|       5: InsertColumn password : String'
|         0: Path s5._5 : String'
|       6: InsertColumn is_close : Boolean'
|         0: Path s5._6 : Boolean'
|       7: InsertColumn create_at : java.sql.Date'
|         0: Path s5._7 : java.sql.Date'
|       8: InsertColumn modify_at : Option[java.sql.Date']
|         0: Path s5._8 : Option[java.sql.Date']
|       9: InsertColumn close_at : Option[java.sql.Date']
|         0: Path s5._9 : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|     1: Path s6.id : String'
|     2: Path s6.first_name : String'
|     3: Path s6.last_name : String'
|     4: Path s6.email_address : String'
|     5: Path s6.password : String'
|     6: Path s6.is_close : Boolean'
|     7: Path s6.create_at : java.sql.Date'
|     8: Path s6.modify_at : Option[java.sql.Date']
|     9: Path s6.close_at : Option[java.sql.Date']

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=first_name : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=last_name : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=email_address : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=password : String'
|     6: BaseResultConverter$mcZ$sp idx=6, name=is_close : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=create_at : java.sql.Date'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Date'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "users" set "id"=?,"first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where " : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|   from s5: CompiledStatement "update "users" set "id"=?,"first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where " : (String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Date', Option[java.sql.Date'], Option[java.sql.Date'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=first_name : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=last_name : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=email_address : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=password : String'
|         6: BaseResultConverter$mcZ$sp idx=6, name=is_close : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=create_at : java.sql.Date'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Date'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Date'

date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.815375 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.203167 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    5.281750 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    7.524333 ms
date:2022-07-31 18:31:33	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   15.824625 ms
date:2022-07-31 18:31:33	level: ERROR	logger: akka.actor.typed.ActorSystem                    	message: A database error occurred during sign-up. InsertOrUpdate is not supported on a table without PK.
date:2022-07-31 18:31:33	level: ERROR	logger: akka.actor.ActorSystemImpl                      	message: Error during processing of request: 'InsertOrUpdate is not supported on a table without PK.'. Completing with 500 Internal Server Error response. To change default exception handling behavior, provide a custom ExceptionHandler.
slick.SlickException: InsertOrUpdate is not supported on a table without PK.
	at slick.jdbc.JdbcActionComponent$InsertActionComposerImpl$InsertOrUpdateAction.<init>(JdbcActionComponent.scala:560)
	at slick.jdbc.JdbcActionComponent$InsertActionComposerImpl.insertOrUpdate(JdbcActionComponent.scala:478)
	at com.github.asadaGuitar.bbs.interfaces.adaptors.slick.SlickUsersRepositoryImpl.save(SlickUsersRepositoryImpl.scala:19)
	at com.github.asadaGuitar.bbs.usecases.UsersUseCase.$anonfun$signup$2(UsersUseCase.scala:30)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:63)
	at akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:100)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:94)
	at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:100)
	at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:49)
	at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:48)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
date:2022-07-31 18:32:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:32:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:33:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:33:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:34:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:34:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:35:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:35:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:36:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:36:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:37:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:37:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:38:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:38:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:39:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:39:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:40:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:40:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:41:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:41:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:42:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:42:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:43:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:43:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:44:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:44:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:45:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:45:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:46:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:46:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:47:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:47:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:48:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:48:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:49:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:49:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:50:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:50:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:51:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:51:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:52:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:52:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:53:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:53:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:54:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:54:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:55:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:55:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:56:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:56:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:57:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:57:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:58:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:58:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:59:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 18:59:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:00:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:00:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:00:49	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@c4096b: (connection has passed maxLifetime)
date:2022-07-31 19:00:49	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@64f9c13c
date:2022-07-31 19:00:49	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@460eab0f: (connection has passed maxLifetime)
date:2022-07-31 19:00:49	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6a3e33d3
date:2022-07-31 19:00:50	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@75ddbe16: (connection has passed maxLifetime)
date:2022-07-31 19:00:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6e01aa4c
date:2022-07-31 19:00:51	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@eb938f6: (connection has passed maxLifetime)
date:2022-07-31 19:00:51	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2b0339e8
date:2022-07-31 19:00:52	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@6540d118: (connection has passed maxLifetime)
date:2022-07-31 19:00:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@159fd95
date:2022-07-31 19:00:57	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@193a7205: (connection has passed maxLifetime)
date:2022-07-31 19:00:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4fe4381f
date:2022-07-31 19:01:02	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@22748827: (connection has passed maxLifetime)
date:2022-07-31 19:01:02	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@24162eab
date:2022-07-31 19:01:02	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@1bc9ccec: (connection has passed maxLifetime)
date:2022-07-31 19:01:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2ad1d459
date:2022-07-31 19:01:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:01:04	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@3d1334b5: (connection has passed maxLifetime)
date:2022-07-31 19:01:04	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2eee45db
date:2022-07-31 19:01:06	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@68cdb7c2: (connection has passed maxLifetime)
date:2022-07-31 19:01:06	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6becde62
date:2022-07-31 19:01:07	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@33a18ac3: (connection has passed maxLifetime)
date:2022-07-31 19:01:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@7e1ad6c2
date:2022-07-31 19:01:10	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@1e3f0bf0: (connection has passed maxLifetime)
date:2022-07-31 19:01:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@5a4db644
date:2022-07-31 19:01:12	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@176760d6: (connection has passed maxLifetime)
date:2022-07-31 19:01:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@651e04b
date:2022-07-31 19:01:12	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@37cef9b: (connection has passed maxLifetime)
date:2022-07-31 19:01:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@bc3212d
date:2022-07-31 19:01:23	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@25a57ac7: (connection has passed maxLifetime)
date:2022-07-31 19:01:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@2cc85139
date:2022-07-31 19:01:24	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@54dff868: (connection has passed maxLifetime)
date:2022-07-31 19:01:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@220fbad0
date:2022-07-31 19:01:25	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@1dbcf938: (connection has passed maxLifetime)
date:2022-07-31 19:01:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@26303a49
date:2022-07-31 19:01:25	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@3c636cb: (connection has passed maxLifetime)
date:2022-07-31 19:01:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6332b0eb
date:2022-07-31 19:01:27	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@28718263: (connection has passed maxLifetime)
date:2022-07-31 19:01:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@d9d642d
date:2022-07-31 19:01:30	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: slick.db - Closing connection org.postgresql.jdbc.PgConnection@303bc55f: (connection has passed maxLifetime)
date:2022-07-31 19:01:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@521b9674
date:2022-07-31 19:01:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:02:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:02:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:03:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:03:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:04:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:04:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:05:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:05:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:06:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:06:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:07:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:07:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:08:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:08:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:09:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:09:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:10:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:10:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:11:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:11:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:12:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:12:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:13:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:13:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:14:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:14:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:15:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:15:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:16:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:16:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:17:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:17:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:18:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:18:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:19:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:19:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:20:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:20:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:21:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:21:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:22:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:22:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:23:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:23:26	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 19:23:41	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 19:23:41	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: slick.db - configuration:
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/bs_application
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"slick.db"
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"peace"
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-07-31 19:23:53	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Starting...
date:2022-07-31 19:23:53	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: slick.db - Start completed.
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Apply Function exists
|   0: Filter s2
|     from s2: TableExpansion
|       table s3: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s3.id : String'
|           2: Path s3.first_name : String'
|           3: Path s3.last_name : String'
|           4: Path s3.email_address : String'
|           5: Path s3.password : String'
|           6: Path s3.is_close : Boolean'
|           7: Path s3.create_at : java.sql.Timestamp'
|           8: Path s3.modify_at : Option[java.sql.Timestamp']
|           9: Path s3.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s2.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false)

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Apply Function exists
|   0: Filter s4
|     from s4: TableExpansion
|       table s5: Table users
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.id : String'
|           2: Path s5.first_name : String'
|           3: Path s5.last_name : String'
|           4: Path s5.email_address : String'
|           5: Path s5.password : String'
|           6: Path s5.is_close : Boolean'
|           7: Path s5.create_at : java.sql.Timestamp'
|           8: Path s5.modify_at : Option[java.sql.Timestamp']
|           9: Path s5.close_at : Option[java.sql.Timestamp']
|     where: Apply Function =
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false)

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Apply Function exists : Boolean
|   0: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s7 for Filter s4
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.ForceOuterBinds                  	message: Introducing new Bind s8 for Pure t9
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>>]
|             value: Ref s7 : @t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| First : t9<Boolean>
|   0: Bind : Vector[t9<Boolean>]
|     from s8: Pure t10 : Vector[t10<()>]
|       value: ProductNode : ()
|     select: Pure t9 : Vector[t9<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             value: StructNode : {password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}
|               password: Path s7.password : String'
|               email_address: Path s7.email_address : String'
|               is_close: Path s7.is_close : Boolean'
|               last_name: Path s7.last_name : String'
|               first_name: Path s7.first_name : String'
|               modify_at: Path s7.modify_at : Option[java.sql.Timestamp']
|               close_at: Path s7.close_at : Option[java.sql.Timestamp']
|               id: Path s7.id : String'
|               create_at: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode : ()

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@a9793a0
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(), UnassignedType)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t9
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols t10
| Path s4.id : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t11
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols t10
| Path s7.password : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols t10
| Path s7.email_address : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols t10
| Path s7.is_close : Boolean'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols t10
| Path s7.last_name : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols t10
| Path s7.first_name : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols t10
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols t10
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols t10
| Path s7.id : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols t10
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   password: Path s7.password
|   email_address: Path s7.email_address
|   is_close: Path s7.is_close
|   last_name: Path s7.last_name
|   first_name: Path s7.first_name
|   modify_at: Path s7.modify_at
|   close_at: Path s7.close_at
|   id: Path s7.id
|   create_at: Path s7.create_at

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path password
| Path s7.password

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.password
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@6105dc88
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path email_address
| Path s7.email_address

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.email_address
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path is_close
| Path s7.is_close

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path last_name
| Path s7.last_name

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.last_name
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path first_name
| Path s7.first_name

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.first_name
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path modify_at
| Path s7.modify_at

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.modify_at
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path close_at
| Path s7.close_at

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s7.close_at
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s7.id

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s7.id
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path create_at
| Path s7.create_at

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Path s7.create_at
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t11: (HashMap(List(modify_at) -> s17, List(is_close) -> s14, List(last_name) -> s15, List(password) -> s12, List(email_address) -> s13, List(create_at) -> s20, List(close_at) -> s18, List(id) -> s19, List(first_name) -> s16), UnassignedType)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.password
|     s13: Path s7.email_address
|     s14: Path s7.is_close
|     s15: Path s7.last_name
|     s16: Path s7.first_name
|     s17: Path s7.modify_at
|     s18: Path s7.close_at
|     s19: Path s7.id
|     s20: Path s7.create_at

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1bf02163
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s7: Filter s4
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function =
|         0: Path s4.id
|         1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|     select: Pure t11
|       value: StructNode
|         s12: Path s7.password
|         s13: Path s7.email_address
|         s14: Path s7.is_close
|         s15: Path s7.last_name
|         s16: Path s7.first_name
|         s17: Path s7.modify_at
|         s18: Path s7.close_at
|         s19: Path s7.id
|         s20: Path s7.create_at

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s21 -> Apply Function exists
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t9: (Map(List() -> s21), UnassignedType)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t9
|   value: StructNode
|     s21: Apply Function exists
|       0: Bind
|         from s7: Filter s4
|           from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           where: Apply Function =
|             0: Path s4.id
|             1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|         select: Pure t11
|           value: StructNode
|             s12: Path s7.password
|             s13: Path s7.email_address
|             s14: Path s7.is_close
|             s15: Path s7.last_name
|             s16: Path s7.first_name
|             s17: Path s7.modify_at
|             s18: Path s7.close_at
|             s19: Path s7.id
|             s20: Path s7.create_at

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@500dde2e
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@66b15d1c
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t10 : Vector[t10<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@291f2cde
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlining Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t10 : Vector[t10<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@33feeba7
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Inlined Pure 'from' in:
| Bind : Vector[t9<{s21: Boolean}>]
|   from s8: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t9 : Vector[t9<{s21: Boolean}>]
|     value: StructNode : {s21: Boolean}
|       s21: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@dbcbf58
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| First : t9<{s21: Boolean}>
|   0: Bind : Vector[t9<{s21: Boolean}>]
|     from s8: Pure t22 : Vector[t22<{}>]
|       value: StructNode : {}
|     select: Pure t9 : Vector[t9<{s21: Boolean}>]
|       value: StructNode : {s21: Boolean}
|         s21: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@61094a4e
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t22, t9, t11; Field refs: (@t6,close_at), (@t6,is_close), (@t6,email_address), (@t6,modify_at), (@t6,create_at), (@t6,last_name), (@t6,id), (@t6,first_name), (@t6,password)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t9<Boolean>
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@31a0e36d
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t9<{s21: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t9 : Vector[t9<{s21: Boolean}>]
|         value: StructNode : {s21: Boolean}
|           s21: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s7.close_at : Option[java.sql.Timestamp']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Timestamp'
|     map: Path s23.s21 : Boolean

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Apply Function exists,s24))
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@75c7852d
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s23: Bind : Vector[t25<{s24: Boolean}>]
|     from s8: ...
|     select: Pure t25 : Vector[t25<{s24: Boolean}>]
|       value: StructNode : {s24: Boolean}
|         s24: Apply Function exists : Boolean
|           0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               where: Apply Function = : Boolean
|                 0: Path s4.id : String'
|                 1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|             select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                 s12: Path s7.password : String'
|                 s13: Path s7.email_address : String'
|                 s14: Path s7.is_close : Boolean'
|                 s15: Path s7.last_name : String'
|                 s16: Path s7.first_name : String'
|                 s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                 s18: Path s7.close_at : Option[java.sql.Timestamp']
|                 s19: Path s7.id : String'
|                 s20: Path s7.create_at : java.sql.Timestamp'
|   map: Path s23.s24 : Boolean

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@1de9b2b2
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Bind : Vector[t25<{s24: Boolean}>]
|       from s8: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s4.id : String'
|                   1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s7.password : String'
|                   s13: Path s7.email_address : String'
|                   s14: Path s7.is_close : Boolean'
|                   s15: Path s7.last_name : String'
|                   s16: Path s7.first_name : String'
|                   s17: Path s7.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s7.close_at : Option[java.sql.Timestamp']
|                   s19: Path s7.id : String'
|                   s20: Path s7.create_at : java.sql.Timestamp'
|     map: Path s23.s24 : Boolean

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@3699d07b
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from Pure:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray()
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Pure t22 : Vector[t22<{}>]
|   value: StructNode : {}

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t27<{}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t27 : Vector[t27<{}>]
|     value: StructNode : {}

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map()
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@94e64e
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s24: Boolean}>]
|   from s8: ...
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@4933f59c
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|   from s26: Pure t22 : Vector[t22<{}>]
|     value: StructNode : {}
|   select: Pure t25 : Vector[t25<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|           from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             where: Apply Function = : Boolean
|               0: Path s4.id : String'
|               1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|           select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|             value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|               s12: Path s7.password : String'
|               s13: Path s7.email_address : String'
|               s14: Path s7.is_close : Boolean'
|               s15: Path s7.last_name : String'
|               s16: Path s7.first_name : String'
|               s17: Path s7.modify_at : Option[java.sql.Timestamp']
|               s18: Path s7.close_at : Option[java.sql.Timestamp']
|               s19: Path s7.id : String'
|               s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t25,s24) -> s24)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t25,s24),List(s24)))
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@191fb22a
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,password),List(password)), ((@t6,email_address),List(email_address)), ((@t6,is_close),List(is_close)), ((@t6,last_name),List(last_name)), ((@t6,first_name),List(first_name)), ((@t6,modify_at),List(modify_at)), ((@t6,close_at),List(close_at)), ((@t6,create_at),List(create_at)))
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@61fdb37a
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s28, None, None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Timestamp']
|       s37: Path s28.close_at : Option[java.sql.Timestamp']
|       s38: Path s28.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@467c8f9d
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,close_at) -> s37, (@t6,is_close) -> s33, (@t6,email_address) -> s32, (@t6,modify_at) -> s36, (@t6,create_at) -> s38, (@t6,last_name) -> s34, (@t6,id) -> s30, (@t6,first_name) -> s35, (@t6,password) -> s31)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@10b50ddb
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}>]
|     value: StructNode : {s30: String', s31: String', s32: String', s33: Boolean', s34: String', s35: String', s36: Option[java.sql.Timestamp'], s37: Option[java.sql.Timestamp'], s38: java.sql.Timestamp'}
|       s30: Path s28.id : String'
|       s31: Path s28.password : String'
|       s32: Path s28.email_address : String'
|       s33: Path s28.is_close : Boolean'
|       s34: Path s28.last_name : String'
|       s35: Path s28.first_name : String'
|       s36: Path s28.modify_at : Option[java.sql.Timestamp']
|       s37: Path s28.close_at : Option[java.sql.Timestamp']
|       s38: Path s28.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|   from s7: ...
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|       s12: Path s7.password : String'
|       s13: Path s7.email_address : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.last_name : String'
|       s16: Path s7.first_name : String'
|       s17: Path s7.modify_at : Option[java.sql.Timestamp']
|       s18: Path s7.close_at : Option[java.sql.Timestamp']
|       s19: Path s7.id : String'
|       s20: Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|   from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|     value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|       s12: Path s28.password : String'
|       s13: Path s28.email_address : String'
|       s14: Path s28.is_close : Boolean'
|       s15: Path s28.last_name : String'
|       s16: Path s28.first_name : String'
|       s17: Path s28.modify_at : Option[java.sql.Timestamp']
|       s18: Path s28.close_at : Option[java.sql.Timestamp']
|       s19: Path s28.id : String'
|       s20: Path s28.create_at : java.sql.Timestamp'
|   where: Apply Function = : Boolean
|     0: Path s28.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t11,s18) -> s18, (t11,s19) -> s19, (t11,s13) -> s13, (t11,s14) -> s14, (t11,s12) -> s12, (t11,s17) -> s17, (t11,s15) -> s15, (t11,s20) -> s20, (t11,s16) -> s16)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t11,s18),List(s18)), ((t11,s19),List(s19)), ((t11,s13),List(s13)), ((t11,s14),List(s14)), ((t11,s12),List(s12)), ((t11,s17),List(s17)), ((t11,s15),List(s15)), ((t11,s20),List(s20)), ((t11,s16),List(s16)))
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Added connection org.postgresql.jdbc.PgConnection@745f6305
date:2022-07-31 19:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s24: Boolean}>]
|       from s26: Pure t22 : Vector[t22<{}>]
|         value: StructNode : {}
|       select: Pure t25 : Vector[t25<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<{s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}>]
|                 value: StructNode : {s12: String', s13: String', s14: Boolean', s15: String', s16: String', s17: Option[java.sql.Timestamp'], s18: Option[java.sql.Timestamp'], s19: String', s20: java.sql.Timestamp'}
|                   s12: Path s28.password : String'
|                   s13: Path s28.email_address : String'
|                   s14: Path s28.is_close : Boolean'
|                   s15: Path s28.last_name : String'
|                   s16: Path s28.first_name : String'
|                   s17: Path s28.modify_at : Option[java.sql.Timestamp']
|                   s18: Path s28.close_at : Option[java.sql.Timestamp']
|                   s19: Path s28.id : String'
|                   s20: Path s28.create_at : java.sql.Timestamp'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|     map: Path s23.s24 : Boolean

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s24 -> 0
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|     from s26: Pure t22 : Vector[t22<()>]
|       value: ProductNode : ()
|     select: Pure t25 : Vector[t25<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|             from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|             select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|               value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|                 1: Path s28.password : String'
|                 2: Path s28.email_address : String'
|                 3: Path s28.is_close : Boolean'
|                 4: Path s28.last_name : String'
|                 5: Path s28.first_name : String'
|                 6: Path s28.modify_at : Option[java.sql.Timestamp']
|                 7: Path s28.close_at : Option[java.sql.Timestamp']
|                 8: Path s28.id : String'
|                 9: Path s28.create_at : java.sql.Timestamp'
|             where: Apply Function = : Boolean
|               0: Path s28.id : String'
|               1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   map: Path s23.s24 : Boolean

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|       from s26: Pure t22 : Vector[t22<()>]
|         value: ProductNode : ()
|       select: Pure t25 : Vector[t25<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|               from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|               select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|                 value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|                   1: Path s28.password : String'
|                   2: Path s28.email_address : String'
|                   3: Path s28.is_close : Boolean'
|                   4: Path s28.last_name : String'
|                   5: Path s28.first_name : String'
|                   6: Path s28.modify_at : Option[java.sql.Timestamp']
|                   7: Path s28.close_at : Option[java.sql.Timestamp']
|                   8: Path s28.id : String'
|                   9: Path s28.create_at : java.sql.Timestamp'
|               where: Apply Function = : Boolean
|                 0: Path s28.id : String'
|                 1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|     map: Path s23._1 : Boolean

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s26, None, None, ConstArray(), None, None, None, None, false : Vector[t25<(Boolean)>]
|   from s26: Pure t22 : Vector[t22<()>]
|     value: ProductNode : ()
|   select: Pure t25 : Vector[t25<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|           from s28: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|           select: Pure t11 : Vector[t11<(String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')>]
|             value: ProductNode : (String', String', Boolean', String', String', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], String', java.sql.Timestamp')
|               1: Path s28.password : String'
|               2: Path s28.email_address : String'
|               3: Path s28.is_close : Boolean'
|               4: Path s28.last_name : String'
|               5: Path s28.first_name : String'
|               6: Path s28.modify_at : Option[java.sql.Timestamp']
|               7: Path s28.close_at : Option[java.sql.Timestamp']
|               8: Path s28.id : String'
|               9: Path s28.create_at : java.sql.Timestamp'
|           where: Apply Function = : Boolean
|             0: Path s28.id : String'
|             1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'qaZSzBfLia')" : Vector[t25<(Boolean)>]

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s23: CompiledStatement "select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'qaZSzBfLia')" : Vector[t25<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   23.097292 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    4.636708 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    8.605500 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   94.633333 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:   13.727666 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.941291 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.378250 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:   21.602833 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   77.234750 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   36.328208 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.832000 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.668125 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.835166 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.145750 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    4.984167 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    8.594709 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   34.909333 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    2.269041 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   86.218584 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.544791 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.214166 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   12.222583 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   57.578250 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  496.202496 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'qaZSzBfLia')]
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'qaZSzBfLia')
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@639165297 wrapping select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'qaZSzBfLia')
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@639165297 wrapping select exists(select "password", "email_address", "is_close", "last_name", "first_name", "modify_at", "close_at", "id", "create_at" from "users" where "id" = 'qaZSzBfLia')
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /--------\
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1      |
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | exists |
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |--------|
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | false  |
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \--------/
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.first_name : String'
|       3: Path s6.last_name : String'
|       4: Path s6.email_address : String'
|       5: Path s6.password : String'
|       6: Path s6.is_close : Boolean'
|       7: Path s6.create_at : java.sql.Timestamp'
|       8: Path s6.modify_at : Option[java.sql.Timestamp']
|       9: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|         0: Path s5._2 : String'
|       3: InsertColumn last_name : String'
|         0: Path s5._3 : String'
|       4: InsertColumn email_address : String'
|         0: Path s5._4 : String'
|       5: InsertColumn password : String'
|         0: Path s5._5 : String'
|       6: InsertColumn is_close : Boolean'
|         0: Path s5._6 : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._7 : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._8 : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._9 : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.first_name : String'
|     3: Path s6.last_name : String'
|     4: Path s6.email_address : String'
|     5: Path s6.password : String'
|     6: Path s6.is_close : Boolean'
|     7: Path s6.create_at : java.sql.Timestamp'
|     8: Path s6.modify_at : Option[java.sql.Timestamp']
|     9: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=id : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=19, name=id : String'
|     2: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=first_name : String'
|     3: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=last_name : String'
|     4: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=13, name=email_address : String'
|     5: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=password : String'
|     6: CompoundResultConverter
|       *: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|       -: BaseResultConverter$mcZ$sp idx=15, name=is_close : Boolean'
|     7: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$1 idx=16, name=create_at : java.sql.Timestamp'
|     8: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=17 : java.sql.Timestamp'
|     9: CompoundResultConverter
|       *: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|       -: SpecializedJdbcResultConverter$$anon$2 idx=18 : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=10, name=id : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=19, name=id : String'
|         2: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=11, name=first_name : String'
|         3: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=12, name=last_name : String'
|         4: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=13, name=email_address : String'
|         5: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=14, name=password : String'
|         6: CompoundResultConverter
|           *: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|           -: BaseResultConverter$mcZ$sp idx=15, name=is_close : Boolean'
|         7: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$1 idx=16, name=create_at : java.sql.Timestamp'
|         8: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=17 : java.sql.Timestamp'
|         9: CompoundResultConverter
|           *: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|           -: SpecializedJdbcResultConverter$$anon$2 idx=18 : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.292167 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    1.238208 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:   11.004375 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   18.754416 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   33.289166 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String')]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String')
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String')
|       1: Path s6.id : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|       3: InsertColumn last_name : String'
|       4: InsertColumn email_address : String'
|       5: InsertColumn password : String'
|       6: InsertColumn is_close : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String')
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String')
|     1: Path s6.id : String'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|     2: CompoundResultConverter
|     3: CompoundResultConverter
|     4: CompoundResultConverter
|     5: CompoundResultConverter
|     6: CompoundResultConverter
|     7: CompoundResultConverter
|     8: CompoundResultConverter
|     9: CompoundResultConverter

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select 1 from "users" where "id"=?" : (String')

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String')]
|   from s5: CompiledStatement "select 1 from "users" where "id"=?" : (String')
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=id : String'
|         2: CompoundResultConverter
|         3: CompoundResultConverter
|         4: CompoundResultConverter
|         5: CompoundResultConverter
|         6: CompoundResultConverter
|         7: CompoundResultConverter
|         8: CompoundResultConverter
|         9: CompoundResultConverter

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.297584 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.209042 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    1.504209 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.896375 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:    9.907210 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| TableExpansion
|   table s2: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.id : String'
|       2: Path s2.first_name : String'
|       3: Path s2.last_name : String'
|       4: Path s2.email_address : String'
|       5: Path s2.password : String'
|       6: Path s2.is_close : Boolean'
|       7: Path s2.create_at : java.sql.Timestamp'
|       8: Path s2.modify_at : Option[java.sql.Timestamp']
|       9: Path s2.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table users
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.id : String'
|       2: Path s3.first_name : String'
|       3: Path s3.last_name : String'
|       4: Path s3.email_address : String'
|       5: Path s3.password : String'
|       6: Path s3.is_close : Boolean'
|       7: Path s3.create_at : java.sql.Timestamp'
|       8: Path s3.modify_at : Option[java.sql.Timestamp']
|       9: Path s3.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     table s6: Table users : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s6.id : String'
|       2: Path s6.first_name : String'
|       3: Path s6.last_name : String'
|       4: Path s6.email_address : String'
|       5: Path s6.password : String'
|       6: Path s6.is_close : Boolean'
|       7: Path s6.create_at : java.sql.Timestamp'
|       8: Path s6.modify_at : Option[java.sql.Timestamp']
|       9: Path s6.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: InsertColumn id : String'
|         0: Path s5._1 : String'
|       2: InsertColumn first_name : String'
|         0: Path s5._2 : String'
|       3: InsertColumn last_name : String'
|         0: Path s5._3 : String'
|       4: InsertColumn email_address : String'
|         0: Path s5._4 : String'
|       5: InsertColumn password : String'
|         0: Path s5._5 : String'
|       6: InsertColumn is_close : Boolean'
|         0: Path s5._6 : Boolean'
|       7: InsertColumn create_at : java.sql.Timestamp'
|         0: Path s5._7 : java.sql.Timestamp'
|       8: InsertColumn modify_at : Option[java.sql.Timestamp']
|         0: Path s5._8 : Option[java.sql.Timestamp']
|       9: InsertColumn close_at : Option[java.sql.Timestamp']
|         0: Path s5._9 : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Insert allFields=[id, first_name, last_name, email_address, password, is_close, create_at, modify_at, close_at] : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   table s6: Table users : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|     1: Path s6.id : String'
|     2: Path s6.first_name : String'
|     3: Path s6.last_name : String'
|     4: Path s6.email_address : String'
|     5: Path s6.password : String'
|     6: Path s6.is_close : Boolean'
|     7: Path s6.create_at : java.sql.Timestamp'
|     8: Path s6.modify_at : Option[java.sql.Timestamp']
|     9: Path s6.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|     6: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|   from s5: CompiledStatement "update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?" : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=9, name=id : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=1, name=first_name : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=2, name=last_name : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=3, name=email_address : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=4, name=password : String'
|         6: BaseResultConverter$mcZ$sp idx=5, name=is_close : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=6, name=create_at : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=7 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'

date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    0.805375 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.178208 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            insertCompiler:    7.948750 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.208709 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   14.141042 ms
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: InsertOrUpdateAction [update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)]
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared update: HikariProxyPreparedStatement@1194622129 wrapping update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared update: HikariProxyPreparedStatement@1194622129 wrapping update "users" set "first_name"=?,"last_name"=?,"email_address"=?,"password"=?,"is_close"=?,"create_at"=?,"modify_at"=?,"close_at"=? where "id"=?; insert into "users" ("id","first_name","last_name","email_address","password","is_close","create_at","modify_at","close_at") select ?,?,?,?,?,?,?,?,? where not exists (select 1 from "users" where "id"=?)
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: /--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------\
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | 1      | 2      | 3                | 4        | 5       | 6                       | 7         | 8         | 9          | 10         | 11     | 12     | 13               | 14       | 15      | 16                      | 17        | 18        | 19         |
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | String | String | String           | String   | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String     | String     | String | String | String           | String   | Boolean | Timestamp               | TIMESTAMP | TIMESTAMP | String     |
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: |--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------|
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: | asada  | guitar | info@example.com | password | false   | 2022-07-31 19:23:53.872 | NULL      | NULL      | qaZSzBfLia | qaZSzBfLia | asada  | guitar | info@example.com | password | false   | 2022-07-31 19:23:53.872 | NULL      | NULL      | qaZSzBfLia |
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.parameter                	message: \--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------+------------+--------+--------+------------------+----------+---------+-------------------------+-----------+-----------+------------/
date:2022-07-31 19:23:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared update took 5ms
date:2022-07-31 19:24:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:24:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:25:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.first_name : String'
|         3: Path s3.last_name : String'
|         4: Path s3.email_address : String'
|         5: Path s3.password : String'
|         6: Path s3.is_close : Boolean'
|         7: Path s3.create_at : java.sql.Timestamp'
|         8: Path s3.modify_at : Option[java.sql.Timestamp']
|         9: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s2.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false)

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.first_name : String'
|         3: Path s5.last_name : String'
|         4: Path s5.email_address : String'
|         5: Path s5.password : String'
|         6: Path s5.is_close : Boolean'
|         7: Path s5.create_at : java.sql.Timestamp'
|         8: Path s5.modify_at : Option[java.sql.Timestamp']
|         9: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s4.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false)

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols 
| Path s4.id : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols 
| Path s7.first_name : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols 
| Path s7.last_name : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols 
| Path s7.email_address : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols 
| Path s7.password : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.first_name
|   3: Path s7.last_name
|   4: Path s7.email_address
|   5: Path s7.password
|   6: Path s7.is_close
|   7: Path s7.create_at
|   8: Path s7.modify_at
|   9: Path s7.close_at

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.first_name

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.first_name
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.last_name

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.last_name
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.email_address

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.email_address
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.password

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.password
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.is_close

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.create_at

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.create_at
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _8
| Path s7.modify_at

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.modify_at
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _9
| Path s7.close_at

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.close_at
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_9) -> s17, List(_7) -> s15, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11, List(_8) -> s16, List(_6) -> s14), UnassignedType)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.first_name
|     s11: Path s7.last_name
|     s12: Path s7.email_address
|     s13: Path s7.password
|     s14: Path s7.is_close
|     s15: Path s7.create_at
|     s16: Path s7.modify_at
|     s17: Path s7.close_at

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.first_name : String'
|       s11: Path s7.last_name : String'
|       s12: Path s7.email_address : String'
|       s13: Path s7.password : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.create_at : java.sql.Timestamp'
|       s16: Path s7.modify_at : Option[java.sql.Timestamp']
|       s17: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,is_close), (@t6,create_at), (@t6,email_address), (@t6,id), (@t6,close_at), (@t6,last_name), (@t6,password), (@t6,modify_at), (@t6,first_name)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.first_name : String'
|         s11: Path s7.last_name : String'
|         s12: Path s7.email_address : String'
|         s13: Path s7.password : String'
|         s14: Path s7.is_close : Boolean'
|         s15: Path s7.create_at : java.sql.Timestamp'
|         s16: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s9 : String'
|       2: Path s18.s10 : String'
|       3: Path s18.s11 : String'
|       4: Path s18.s12 : String'
|       5: Path s18.s13 : String'
|       6: Path s18.s14 : Boolean'
|       7: Path s18.s15 : java.sql.Timestamp'
|       8: Path s18.s16 : Option[java.sql.Timestamp']
|       9: Path s18.s17 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s19), 5 -> (Path s7.is_close,s20), 1 -> (Path s7.first_name,s21), 6 -> (Path s7.create_at,s22), 2 -> (Path s7.last_name,s23), 7 -> (Path s7.modify_at,s24), 3 -> (Path s7.email_address,s25), 8 -> (Path s7.close_at,s26), 4 -> (Path s7.password,s27))
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|     from s7: ...
|     select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|       value: StructNode : {s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s20: Path s7.is_close : Boolean'
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s19: Path s7.id : String'
|         s23: Path s7.last_name : String'
|         s25: Path s7.email_address : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s27: Path s7.password : String'
|         s21: Path s7.first_name : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|     select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|       value: StructNode : {s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s20: Path s7.is_close : Boolean'
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s19: Path s7.id : String'
|         s23: Path s7.last_name : String'
|         s25: Path s7.email_address : String'
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s27: Path s7.password : String'
|         s21: Path s7.first_name : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,close_at),List(close_at)), ((@t6,is_close),List(is_close)), ((@t6,create_at),List(create_at)), ((@t6,last_name),List(last_name)), ((@t6,email_address),List(email_address)), ((@t6,modify_at),List(modify_at)), ((@t6,password),List(password)), ((@t6,first_name),List(first_name)))
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: Option[java.sql.Timestamp'], s33: Boolean', s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: String'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: Option[java.sql.Timestamp'], s33: Boolean', s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: String'}>]
|     value: StructNode : {s31: String', s32: Option[java.sql.Timestamp'], s33: Boolean', s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: String'}
|       s31: Path s29.id : String'
|       s32: Path s29.close_at : Option[java.sql.Timestamp']
|       s33: Path s29.is_close : Boolean'
|       s34: Path s29.create_at : java.sql.Timestamp'
|       s35: Path s29.last_name : String'
|       s36: Path s29.email_address : String'
|       s37: Path s29.modify_at : Option[java.sql.Timestamp']
|       s38: Path s29.password : String'
|       s39: Path s29.first_name : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,is_close) -> s33, (@t6,create_at) -> s34, (@t6,email_address) -> s36, (@t6,id) -> s31, (@t6,close_at) -> s32, (@t6,last_name) -> s35, (@t6,password) -> s38, (@t6,modify_at) -> s37, (@t6,first_name) -> s39)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: Option[java.sql.Timestamp'], s33: Boolean', s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: String'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: Option[java.sql.Timestamp'], s33: Boolean', s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: String'}>]
|     value: StructNode : {s31: String', s32: Option[java.sql.Timestamp'], s33: Boolean', s34: java.sql.Timestamp', s35: String', s36: String', s37: Option[java.sql.Timestamp'], s38: String', s39: String'}
|       s31: Path s29.id : String'
|       s32: Path s29.close_at : Option[java.sql.Timestamp']
|       s33: Path s29.is_close : Boolean'
|       s34: Path s29.create_at : java.sql.Timestamp'
|       s35: Path s29.last_name : String'
|       s36: Path s29.email_address : String'
|       s37: Path s29.modify_at : Option[java.sql.Timestamp']
|       s38: Path s29.password : String'
|       s39: Path s29.first_name : String'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|   from s7: ...
|   select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|     value: StructNode : {s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}
|       s26: Path s7.close_at : Option[java.sql.Timestamp']
|       s20: Path s7.is_close : Boolean'
|       s22: Path s7.create_at : java.sql.Timestamp'
|       s19: Path s7.id : String'
|       s23: Path s7.last_name : String'
|       s25: Path s7.email_address : String'
|       s24: Path s7.modify_at : Option[java.sql.Timestamp']
|       s27: Path s7.password : String'
|       s21: Path s7.first_name : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|     value: StructNode : {s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}
|       s26: Path s29.close_at : Option[java.sql.Timestamp']
|       s20: Path s29.is_close : Boolean'
|       s22: Path s29.create_at : java.sql.Timestamp'
|       s19: Path s29.id : String'
|       s23: Path s29.last_name : String'
|       s25: Path s29.email_address : String'
|       s24: Path s29.modify_at : Option[java.sql.Timestamp']
|       s27: Path s29.password : String'
|       s21: Path s29.first_name : String'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t28,s25) -> s25, (t28,s19) -> s19, (t28,s27) -> s27, (t28,s23) -> s23, (t28,s24) -> s24, (t28,s22) -> s22, (t28,s26) -> s26, (t28,s21) -> s21, (t28,s20) -> s20)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t28,s25),List(s25)), ((t28,s19),List(s19)), ((t28,s27),List(s27)), ((t28,s23),List(s23)), ((t28,s24),List(s24)), ((t28,s22),List(s22)), ((t28,s26),List(s26)), ((t28,s21),List(s21)), ((t28,s20),List(s20)))
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<{s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}>]
|       value: StructNode : {s26: Option[java.sql.Timestamp'], s20: Boolean', s22: java.sql.Timestamp', s19: String', s23: String', s25: String', s24: Option[java.sql.Timestamp'], s27: String', s21: String'}
|         s26: Path s29.close_at : Option[java.sql.Timestamp']
|         s20: Path s29.is_close : Boolean'
|         s22: Path s29.create_at : java.sql.Timestamp'
|         s19: Path s29.id : String'
|         s23: Path s29.last_name : String'
|         s25: Path s29.email_address : String'
|         s24: Path s29.modify_at : Option[java.sql.Timestamp']
|         s27: Path s29.password : String'
|         s21: Path s29.first_name : String'
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s26 -> 8, s20 -> 5, s22 -> 6, s19 -> 0, s23 -> 2, s25 -> 3, s24 -> 7, s27 -> 4, s21 -> 1
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18._1 : String'
|       2: Path s18._2 : String'
|       3: Path s18._3 : String'
|       4: Path s18._4 : String'
|       5: Path s18._5 : String'
|       6: Path s18._6 : Boolean'
|       7: Path s18._7 : java.sql.Timestamp'
|       8: Path s18._8 : Option[java.sql.Timestamp']
|       9: Path s18._9 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s29.id : String'
|       2: Path s29.first_name : String'
|       3: Path s29.last_name : String'
|       4: Path s29.email_address : String'
|       5: Path s29.password : String'
|       6: Path s29.is_close : Boolean'
|       7: Path s29.create_at : java.sql.Timestamp'
|       8: Path s29.modify_at : Option[java.sql.Timestamp']
|       9: Path s29.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|     6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|         6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.645083 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.123250 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.754333 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   10.320792 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    2.340334 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    3.981417 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.037958 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    1.707000 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   14.083958 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    0.077542 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.069291 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.054667 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.370417 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.272959 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    0.947958 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    3.128458 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    8.552917 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.572833 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   10.834417 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.171709 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.027417 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    6.394292 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.323667 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   71.792669 ms
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: StreamingInvokerAction$HeadOptionAction [select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia']
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@909720654 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@909720654 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 714µs
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------\
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1          | 2          | 3         | 4                | 5        | 6        | 7                    | 8         | 9        |
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id         | first_name | last_name | email_address    | password | is_close | create_at            | modify_at | close_at |
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------|
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | qaZSzBfLia | asada      | guitar    | info@example.com | password | false    | 2022-07-31 19:23:... | NULL      | NULL     |
date:2022-07-31 19:25:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------/
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.id : String'
|         2: Path s3.first_name : String'
|         3: Path s3.last_name : String'
|         4: Path s3.email_address : String'
|         5: Path s3.password : String'
|         6: Path s3.is_close : Boolean'
|         7: Path s3.create_at : java.sql.Timestamp'
|         8: Path s3.modify_at : Option[java.sql.Timestamp']
|         9: Path s3.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s2.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false)

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table users
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s5.id : String'
|         2: Path s5.first_name : String'
|         3: Path s5.last_name : String'
|         4: Path s5.email_address : String'
|         5: Path s5.password : String'
|         6: Path s5.is_close : Boolean'
|         7: Path s5.create_at : java.sql.Timestamp'
|         8: Path s5.modify_at : Option[java.sql.Timestamp']
|         9: Path s5.close_at : Option[java.sql.Timestamp']
|   where: Apply Function =
|     0: Path s4.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false)

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.users)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t6 -> (s5,TypeMapping)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|       0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s7.id : String'
|         2: Path s7.first_name : String'
|         3: Path s7.last_name : String'
|         4: Path s7.email_address : String'
|         5: Path s7.password : String'
|         6: Path s7.is_close : Boolean'
|         7: Path s7.create_at : java.sql.Timestamp'
|         8: Path s7.modify_at : Option[java.sql.Timestamp']
|         9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s7.id : String'
|       2: Path s7.first_name : String'
|       3: Path s7.last_name : String'
|       4: Path s7.email_address : String'
|       5: Path s7.password : String'
|       6: Path s7.is_close : Boolean'
|       7: Path s7.create_at : java.sql.Timestamp'
|       8: Path s7.modify_at : Option[java.sql.Timestamp']
|       9: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s4.id with symbols 
| Path s4.id : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s4.id to:
| Path s4.id

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t8
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.first_name with symbols 
| Path s7.first_name : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.first_name to:
| Path s7.first_name

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.last_name with symbols 
| Path s7.last_name : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.last_name to:
| Path s7.last_name

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.email_address with symbols 
| Path s7.email_address : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.email_address to:
| Path s7.email_address

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.password with symbols 
| Path s7.password : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.password to:
| Path s7.password

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.is_close with symbols 
| Path s7.is_close : Boolean'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.is_close to:
| Path s7.is_close

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.create_at with symbols 
| Path s7.create_at : java.sql.Timestamp'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.create_at to:
| Path s7.create_at

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.modify_at with symbols 
| Path s7.modify_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.modify_at to:
| Path s7.modify_at

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.close_at with symbols 
| Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.close_at to:
| Path s7.close_at

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s7.id
|   2: Path s7.first_name
|   3: Path s7.last_name
|   4: Path s7.email_address
|   5: Path s7.password
|   6: Path s7.is_close
|   7: Path s7.create_at
|   8: Path s7.modify_at
|   9: Path s7.close_at

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s7.id

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s9 -> Path s7.id
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s7.first_name

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s10 -> Path s7.first_name
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s7.last_name

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s11 -> Path s7.last_name
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s7.email_address

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s12 -> Path s7.email_address
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s7.password

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s7.password
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _6
| Path s7.is_close

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s7.is_close
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _7
| Path s7.create_at

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s7.create_at
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _8
| Path s7.modify_at

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s7.modify_at
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _9
| Path s7.close_at

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s7.close_at
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t8: (HashMap(List(_5) -> s13, List(_2) -> s10, List(_9) -> s17, List(_7) -> s15, List(_4) -> s12, List(_1) -> s9, List(_3) -> s11, List(_8) -> s16, List(_6) -> s14), UnassignedType)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.id
|     s10: Path s7.first_name
|     s11: Path s7.last_name
|     s12: Path s7.email_address
|     s13: Path s7.password
|     s14: Path s7.is_close
|     s15: Path s7.create_at
|     s16: Path s7.modify_at
|     s17: Path s7.close_at

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|   from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|       s9: Path s7.id : String'
|       s10: Path s7.first_name : String'
|       s11: Path s7.last_name : String'
|       s12: Path s7.email_address : String'
|       s13: Path s7.password : String'
|       s14: Path s7.is_close : Boolean'
|       s15: Path s7.create_at : java.sql.Timestamp'
|       s16: Path s7.modify_at : Option[java.sql.Timestamp']
|       s17: Path s7.close_at : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t8; Field refs: (@t6,modify_at), (@t6,password), (@t6,is_close), (@t6,id), (@t6,close_at), (@t6,last_name), (@t6,create_at), (@t6,first_name), (@t6,email_address)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t8<Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]>
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Boolean'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Timestamp'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Timestamp']
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|     select: Pure t8 : Vector[t8<{s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s9: String', s10: String', s11: String', s12: String', s13: String', s14: Boolean', s15: java.sql.Timestamp', s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp']}
|         s9: Path s7.id : String'
|         s10: Path s7.first_name : String'
|         s11: Path s7.last_name : String'
|         s12: Path s7.email_address : String'
|         s13: Path s7.password : String'
|         s14: Path s7.is_close : Boolean'
|         s15: Path s7.create_at : java.sql.Timestamp'
|         s16: Path s7.modify_at : Option[java.sql.Timestamp']
|         s17: Path s7.close_at : Option[java.sql.Timestamp']
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s9 : String'
|       2: Path s18.s10 : String'
|       3: Path s18.s11 : String'
|       4: Path s18.s12 : String'
|       5: Path s18.s13 : String'
|       6: Path s18.s14 : Boolean'
|       7: Path s18.s15 : java.sql.Timestamp'
|       8: Path s18.s16 : Option[java.sql.Timestamp']
|       9: Path s18.s17 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s7.id,s19), 5 -> (Path s7.is_close,s20), 1 -> (Path s7.first_name,s21), 6 -> (Path s7.create_at,s22), 2 -> (Path s7.last_name,s23), 7 -> (Path s7.modify_at,s24), 3 -> (Path s7.email_address,s25), 8 -> (Path s7.close_at,s26), 4 -> (Path s7.password,s27))
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|     from s7: ...
|     select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|       value: StructNode : {s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}
|         s27: Path s7.password : String'
|         s20: Path s7.is_close : Boolean'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s21: Path s7.first_name : String'
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s25: Path s7.email_address : String'
|         s19: Path s7.id : String'
|         s23: Path s7.last_name : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Bind : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|     from s7: Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       from s4: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.id : String'
|         1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|     select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|       value: StructNode : {s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}
|         s27: Path s7.password : String'
|         s20: Path s7.is_close : Boolean'
|         s26: Path s7.close_at : Option[java.sql.Timestamp']
|         s24: Path s7.modify_at : Option[java.sql.Timestamp']
|         s21: Path s7.first_name : String'
|         s22: Path s7.create_at : java.sql.Timestamp'
|         s25: Path s7.email_address : String'
|         s19: Path s7.id : String'
|         s23: Path s7.last_name : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t6,id),List(id)), ((@t6,password),List(password)), ((@t6,is_close),List(is_close)), ((@t6,close_at),List(close_at)), ((@t6,modify_at),List(modify_at)), ((@t6,first_name),List(first_name)), ((@t6,create_at),List(create_at)), ((@t6,email_address),List(email_address)), ((@t6,last_name),List(last_name)))
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: Boolean', s34: Option[java.sql.Timestamp'], s35: Option[java.sql.Timestamp'], s36: String', s37: java.sql.Timestamp', s38: String', s39: String'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: Boolean', s34: Option[java.sql.Timestamp'], s35: Option[java.sql.Timestamp'], s36: String', s37: java.sql.Timestamp', s38: String', s39: String'}>]
|     value: StructNode : {s31: String', s32: String', s33: Boolean', s34: Option[java.sql.Timestamp'], s35: Option[java.sql.Timestamp'], s36: String', s37: java.sql.Timestamp', s38: String', s39: String'}
|       s31: Path s29.id : String'
|       s32: Path s29.password : String'
|       s33: Path s29.is_close : Boolean'
|       s34: Path s29.close_at : Option[java.sql.Timestamp']
|       s35: Path s29.modify_at : Option[java.sql.Timestamp']
|       s36: Path s29.first_name : String'
|       s37: Path s29.create_at : java.sql.Timestamp'
|       s38: Path s29.email_address : String'
|       s39: Path s29.last_name : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t6,modify_at) -> s35, (@t6,password) -> s32, (@t6,is_close) -> s33, (@t6,id) -> s31, (@t6,close_at) -> s34, (@t6,last_name) -> s39, (@t6,create_at) -> s37, (@t6,first_name) -> s36, (@t6,email_address) -> s38)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: String', s33: Boolean', s34: Option[java.sql.Timestamp'], s35: Option[java.sql.Timestamp'], s36: String', s37: java.sql.Timestamp', s38: String', s39: String'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: String', s33: Boolean', s34: Option[java.sql.Timestamp'], s35: Option[java.sql.Timestamp'], s36: String', s37: java.sql.Timestamp', s38: String', s39: String'}>]
|     value: StructNode : {s31: String', s32: String', s33: Boolean', s34: Option[java.sql.Timestamp'], s35: Option[java.sql.Timestamp'], s36: String', s37: java.sql.Timestamp', s38: String', s39: String'}
|       s31: Path s29.id : String'
|       s32: Path s29.password : String'
|       s33: Path s29.is_close : Boolean'
|       s34: Path s29.close_at : Option[java.sql.Timestamp']
|       s35: Path s29.modify_at : Option[java.sql.Timestamp']
|       s36: Path s29.first_name : String'
|       s37: Path s29.create_at : java.sql.Timestamp'
|       s38: Path s29.email_address : String'
|       s39: Path s29.last_name : String'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|   from s7: ...
|   select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|     value: StructNode : {s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}
|       s27: Path s7.password : String'
|       s20: Path s7.is_close : Boolean'
|       s26: Path s7.close_at : Option[java.sql.Timestamp']
|       s24: Path s7.modify_at : Option[java.sql.Timestamp']
|       s21: Path s7.first_name : String'
|       s22: Path s7.create_at : java.sql.Timestamp'
|       s25: Path s7.email_address : String'
|       s19: Path s7.id : String'
|       s23: Path s7.last_name : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|     value: StructNode : {s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}
|       s27: Path s29.password : String'
|       s20: Path s29.is_close : Boolean'
|       s26: Path s29.close_at : Option[java.sql.Timestamp']
|       s24: Path s29.modify_at : Option[java.sql.Timestamp']
|       s21: Path s29.first_name : String'
|       s22: Path s29.create_at : java.sql.Timestamp'
|       s25: Path s29.email_address : String'
|       s19: Path s29.id : String'
|       s23: Path s29.last_name : String'
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t28,s26) -> s26, (t28,s24) -> s24, (t28,s27) -> s27, (t28,s25) -> s25, (t28,s22) -> s22, (t28,s21) -> s21, (t28,s23) -> s23, (t28,s19) -> s19, (t28,s20) -> s20)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t28,s26),List(s26)), ((t28,s24),List(s24)), ((t28,s27),List(s27)), ((t28,s25),List(s25)), ((t28,s22),List(s22)), ((t28,s21),List(s21)), ((t28,s23),List(s23)), ((t28,s19),List(s19)), ((t28,s20),List(s20)))
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<{s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}>]
|       value: StructNode : {s27: String', s20: Boolean', s26: Option[java.sql.Timestamp'], s24: Option[java.sql.Timestamp'], s21: String', s22: java.sql.Timestamp', s25: String', s19: String', s23: String'}
|         s27: Path s29.password : String'
|         s20: Path s29.is_close : Boolean'
|         s26: Path s29.close_at : Option[java.sql.Timestamp']
|         s24: Path s29.modify_at : Option[java.sql.Timestamp']
|         s21: Path s29.first_name : String'
|         s22: Path s29.create_at : java.sql.Timestamp'
|         s25: Path s29.email_address : String'
|         s19: Path s29.id : String'
|         s23: Path s29.last_name : String'
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s27 -> 4, s20 -> 5, s26 -> 8, s24 -> 7, s21 -> 1, s22 -> 6, s25 -> 3, s19 -> 0, s23 -> 2
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18.s19 : String'
|       2: Path s18.s21 : String'
|       3: Path s18.s23 : String'
|       4: Path s18.s25 : String'
|       5: Path s18.s27 : String'
|       6: Path s18.s20 : Boolean'
|       7: Path s18.s22 : java.sql.Timestamp'
|       8: Path s18.s24 : Option[java.sql.Timestamp']
|       9: Path s18.s26 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|     select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|         1: Path s29.id : String'
|         2: Path s29.first_name : String'
|         3: Path s29.last_name : String'
|         4: Path s29.email_address : String'
|         5: Path s29.password : String'
|         6: Path s29.is_close : Boolean'
|         7: Path s29.create_at : java.sql.Timestamp'
|         8: Path s29.modify_at : Option[java.sql.Timestamp']
|         9: Path s29.close_at : Option[java.sql.Timestamp']
|     where: Apply Function = : Boolean
|       0: Path s29.id : String'
|       1: LiteralNode qaZSzBfLia (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     0: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s18._1 : String'
|       2: Path s18._2 : String'
|       3: Path s18._3 : String'
|       4: Path s18._4 : String'
|       5: Path s18._5 : String'
|       6: Path s18._6 : Boolean'
|       7: Path s18._7 : java.sql.Timestamp'
|       8: Path s18._8 : Option[java.sql.Timestamp']
|       9: Path s18._9 : Option[java.sql.Timestamp']

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   from s29: Table users : Vector[@t6<{password: String', email_address: String', is_close: Boolean', last_name: String', first_name: String', modify_at: Option[java.sql.Timestamp'], close_at: Option[java.sql.Timestamp'], id: String', create_at: java.sql.Timestamp'}>]
|   select: Pure t28 : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])
|       1: Path s29.id : String'
|       2: Path s29.first_name : String'
|       3: Path s29.last_name : String'
|       4: Path s29.email_address : String'
|       5: Path s29.password : String'
|       6: Path s29.is_close : Boolean'
|       7: Path s29.create_at : java.sql.Timestamp'
|       8: Path s29.modify_at : Option[java.sql.Timestamp']
|       9: Path s29.close_at : Option[java.sql.Timestamp']
|   where: Apply Function = : Boolean
|     0: Path s29.id : String'
|     1: LiteralNode qaZSzBfLia (volatileHint=false) : String'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|     6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|     7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]]
|   from s18: CompiledStatement "select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'" : Vector[t28<(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', String', Boolean', java.sql.Timestamp', Option[java.sql.Timestamp'], Option[java.sql.Timestamp'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|         6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|         7: SpecializedJdbcResultConverter$$anon$1 idx=7, name=<computed> : java.sql.Timestamp'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : java.sql.Timestamp'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : java.sql.Timestamp'

date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    4.216750 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.180917 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    2.035125 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    4.127250 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    8.707041 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.720416 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.044833 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    1.114209 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:    8.878375 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    0.122584 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.121625 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.780916 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.027250 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.280209 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    4.053167 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    4.647000 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    6.401500 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.099708 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:    8.785834 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.115458 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.130125 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    6.674833 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    3.210208 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   66.475333 ms
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: StreamingInvokerAction$HeadOptionAction [select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia']
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1335077835 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1335077835 wrapping select "id", "first_name", "last_name", "email_address", "password", "is_close", "create_at", "modify_at", "close_at" from "users" where "id" = 'qaZSzBfLia'
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 575µs
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------\
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1          | 2          | 3         | 4                | 5        | 6        | 7                    | 8         | 9        |
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id         | first_name | last_name | email_address    | password | is_close | create_at            | modify_at | close_at |
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------|
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | qaZSzBfLia | asada      | guitar    | info@example.com | password | false    | 2022-07-31 19:23:... | NULL      | NULL     |
date:2022-07-31 19:25:51	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \------------+------------+-----------+------------------+----------+----------+----------------------+-----------+----------/
date:2022-07-31 19:25:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:26:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:26:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:27:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:27:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:28:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:28:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:29:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:29:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:30:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:30:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:31:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:31:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:32:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:32:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: slick.db - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-07-31 19:33:15	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 19:33:24	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 19:33:24	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 19:33:32	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [JvmExitReason]
date:2022-07-31 19:34:16	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-07-31 19:34:16	level: INFO 	logger: akka.actor.typed.ActorSystem                    	message: Server starting online http://localhost:9876/
date:2022-07-31 19:34:22	level: INFO 	logger: akka.actor.CoordinatedShutdown                  	message: Running CoordinatedShutdown with reason [ActorSystemTerminateReason]
